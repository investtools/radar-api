/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class SecurityId : TBase
{
  private StockId _stock;
  private FundId _fund;
  private IndexLinkedBondId _index_linked_bond;
  private GovernmentBondId _government_bond;

  public StockId Stock
  {
    get
    {
      return _stock;
    }
    set
    {
      __isset.stock = true;
      this._stock = value;
    }
  }

  public FundId Fund
  {
    get
    {
      return _fund;
    }
    set
    {
      __isset.fund = true;
      this._fund = value;
    }
  }

  public IndexLinkedBondId Index_linked_bond
  {
    get
    {
      return _index_linked_bond;
    }
    set
    {
      __isset.index_linked_bond = true;
      this._index_linked_bond = value;
    }
  }

  public GovernmentBondId Government_bond
  {
    get
    {
      return _government_bond;
    }
    set
    {
      __isset.government_bond = true;
      this._government_bond = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool stock;
    public bool fund;
    public bool index_linked_bond;
    public bool government_bond;
  }

  public SecurityId() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Stock = new StockId();
              Stock.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Fund = new FundId();
              Fund.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Index_linked_bond = new IndexLinkedBondId();
              Index_linked_bond.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Government_bond = new GovernmentBondId();
              Government_bond.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("SecurityId");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Stock != null && __isset.stock) {
        field.Name = "stock";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Stock.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Fund != null && __isset.fund) {
        field.Name = "fund";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Fund.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Index_linked_bond != null && __isset.index_linked_bond) {
        field.Name = "index_linked_bond";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Index_linked_bond.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Government_bond != null && __isset.government_bond) {
        field.Name = "government_bond";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Government_bond.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("SecurityId(");
    bool __first = true;
    if (Stock != null && __isset.stock) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Stock: ");
      __sb.Append(Stock== null ? "<null>" : Stock.ToString());
    }
    if (Fund != null && __isset.fund) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Fund: ");
      __sb.Append(Fund== null ? "<null>" : Fund.ToString());
    }
    if (Index_linked_bond != null && __isset.index_linked_bond) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Index_linked_bond: ");
      __sb.Append(Index_linked_bond== null ? "<null>" : Index_linked_bond.ToString());
    }
    if (Government_bond != null && __isset.government_bond) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Government_bond: ");
      __sb.Append(Government_bond== null ? "<null>" : Government_bond.ToString());
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}


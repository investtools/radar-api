/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Result : TBase
{
  private Table _table;
  private PieChart _pie_chart;
  private LineChart _line_chart;
  private BarChart _bar_chart;

  public Table Table
  {
    get
    {
      return _table;
    }
    set
    {
      __isset.table = true;
      this._table = value;
    }
  }

  public PieChart Pie_chart
  {
    get
    {
      return _pie_chart;
    }
    set
    {
      __isset.pie_chart = true;
      this._pie_chart = value;
    }
  }

  public LineChart Line_chart
  {
    get
    {
      return _line_chart;
    }
    set
    {
      __isset.line_chart = true;
      this._line_chart = value;
    }
  }

  public BarChart Bar_chart
  {
    get
    {
      return _bar_chart;
    }
    set
    {
      __isset.bar_chart = true;
      this._bar_chart = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool table;
    public bool pie_chart;
    public bool line_chart;
    public bool bar_chart;
  }

  public Result() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Table = new Table();
              Table.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Pie_chart = new PieChart();
              Pie_chart.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Line_chart = new LineChart();
              Line_chart.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              Bar_chart = new BarChart();
              Bar_chart.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("Result");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Table != null && __isset.table) {
        field.Name = "table";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Table.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Pie_chart != null && __isset.pie_chart) {
        field.Name = "pie_chart";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Pie_chart.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Line_chart != null && __isset.line_chart) {
        field.Name = "line_chart";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Line_chart.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Bar_chart != null && __isset.bar_chart) {
        field.Name = "bar_chart";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        Bar_chart.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Result(");
    bool __first = true;
    if (Table != null && __isset.table) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Table: ");
      __sb.Append(Table== null ? "<null>" : Table.ToString());
    }
    if (Pie_chart != null && __isset.pie_chart) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Pie_chart: ");
      __sb.Append(Pie_chart== null ? "<null>" : Pie_chart.ToString());
    }
    if (Line_chart != null && __isset.line_chart) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Line_chart: ");
      __sb.Append(Line_chart== null ? "<null>" : Line_chart.ToString());
    }
    if (Bar_chart != null && __isset.bar_chart) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Bar_chart: ");
      __sb.Append(Bar_chart== null ? "<null>" : Bar_chart.ToString());
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}


/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Portfolio : TBase
{
  private long _date;
  private List<Position> _positions;
  private double _rentability;
  private double _nav;
  private double _cash;
  private List<Provision> _provisions;

  public long Date
  {
    get
    {
      return _date;
    }
    set
    {
      __isset.date = true;
      this._date = value;
    }
  }

  public List<Position> Positions
  {
    get
    {
      return _positions;
    }
    set
    {
      __isset.positions = true;
      this._positions = value;
    }
  }

  public double Rentability
  {
    get
    {
      return _rentability;
    }
    set
    {
      __isset.rentability = true;
      this._rentability = value;
    }
  }

  public double Nav
  {
    get
    {
      return _nav;
    }
    set
    {
      __isset.nav = true;
      this._nav = value;
    }
  }

  public double Cash
  {
    get
    {
      return _cash;
    }
    set
    {
      __isset.cash = true;
      this._cash = value;
    }
  }

  /// <summary>
  /// Criado na vers√£o 0.2.1
  /// </summary>
  public List<Provision> Provisions
  {
    get
    {
      return _provisions;
    }
    set
    {
      __isset.provisions = true;
      this._provisions = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool date;
    public bool positions;
    public bool rentability;
    public bool nav;
    public bool cash;
    public bool provisions;
  }

  public Portfolio() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Date = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Positions = new List<Position>();
                TList _list40 = iprot.ReadListBegin();
                for( int _i41 = 0; _i41 < _list40.Count; ++_i41)
                {
                  Position _elem42;
                  _elem42 = new Position();
                  _elem42.Read(iprot);
                  Positions.Add(_elem42);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Double) {
              Rentability = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              Nav = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              Cash = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                Provisions = new List<Provision>();
                TList _list43 = iprot.ReadListBegin();
                for( int _i44 = 0; _i44 < _list43.Count; ++_i44)
                {
                  Provision _elem45;
                  _elem45 = new Provision();
                  _elem45.Read(iprot);
                  Provisions.Add(_elem45);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("Portfolio");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.date) {
        field.Name = "date";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Date);
        oprot.WriteFieldEnd();
      }
      if (Positions != null && __isset.positions) {
        field.Name = "positions";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Positions.Count));
          foreach (Position _iter46 in Positions)
          {
            _iter46.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.rentability) {
        field.Name = "rentability";
        field.Type = TType.Double;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Rentability);
        oprot.WriteFieldEnd();
      }
      if (__isset.nav) {
        field.Name = "nav";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Nav);
        oprot.WriteFieldEnd();
      }
      if (__isset.cash) {
        field.Name = "cash";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Cash);
        oprot.WriteFieldEnd();
      }
      if (Provisions != null && __isset.provisions) {
        field.Name = "provisions";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Provisions.Count));
          foreach (Provision _iter47 in Provisions)
          {
            _iter47.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Portfolio(");
    bool __first = true;
    if (__isset.date) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Date: ");
      __sb.Append(Date);
    }
    if (Positions != null && __isset.positions) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Positions: ");
      __sb.Append(Positions);
    }
    if (__isset.rentability) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Rentability: ");
      __sb.Append(Rentability);
    }
    if (__isset.nav) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Nav: ");
      __sb.Append(Nav);
    }
    if (__isset.cash) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Cash: ");
      __sb.Append(Cash);
    }
    if (Provisions != null && __isset.provisions) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Provisions: ");
      __sb.Append(Provisions);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}


/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TableCellFormat : TBase
{
  private bool _bold;
  private bool _italic;
  private int _color;
  private short _colspan;
  private short _rowspan;

  public bool Bold
  {
    get
    {
      return _bold;
    }
    set
    {
      __isset.bold = true;
      this._bold = value;
    }
  }

  public bool Italic
  {
    get
    {
      return _italic;
    }
    set
    {
      __isset.italic = true;
      this._italic = value;
    }
  }

  public int Color
  {
    get
    {
      return _color;
    }
    set
    {
      __isset.color = true;
      this._color = value;
    }
  }

  public short Colspan
  {
    get
    {
      return _colspan;
    }
    set
    {
      __isset.colspan = true;
      this._colspan = value;
    }
  }

  public short Rowspan
  {
    get
    {
      return _rowspan;
    }
    set
    {
      __isset.rowspan = true;
      this._rowspan = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool bold;
    public bool italic;
    public bool color;
    public bool colspan;
    public bool rowspan;
  }

  public TableCellFormat() {
    this._colspan = 1;
    this.__isset.colspan = true;
    this._rowspan = 1;
    this.__isset.rowspan = true;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              Bold = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              Italic = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Color = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I16) {
              Colspan = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              Rowspan = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TableCellFormat");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.bold) {
        field.Name = "bold";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Bold);
        oprot.WriteFieldEnd();
      }
      if (__isset.italic) {
        field.Name = "italic";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Italic);
        oprot.WriteFieldEnd();
      }
      if (__isset.color) {
        field.Name = "color";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Color);
        oprot.WriteFieldEnd();
      }
      if (__isset.colspan) {
        field.Name = "colspan";
        field.Type = TType.I16;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Colspan);
        oprot.WriteFieldEnd();
      }
      if (__isset.rowspan) {
        field.Name = "rowspan";
        field.Type = TType.I16;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Rowspan);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TableCellFormat(");
    bool __first = true;
    if (__isset.bold) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Bold: ");
      __sb.Append(Bold);
    }
    if (__isset.italic) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Italic: ");
      __sb.Append(Italic);
    }
    if (__isset.color) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Color: ");
      __sb.Append(Color);
    }
    if (__isset.colspan) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Colspan: ");
      __sb.Append(Colspan);
    }
    if (__isset.rowspan) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Rowspan: ");
      __sb.Append(Rowspan);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}


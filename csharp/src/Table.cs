/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Table : TBase
{
  private string _title;
  private List<TableRow> _header;
  private List<TableRow> _body;
  private List<TableRow> _footer;

  public string Title
  {
    get
    {
      return _title;
    }
    set
    {
      __isset.title = true;
      this._title = value;
    }
  }

  public List<TableRow> Header
  {
    get
    {
      return _header;
    }
    set
    {
      __isset.header = true;
      this._header = value;
    }
  }

  public List<TableRow> Body
  {
    get
    {
      return _body;
    }
    set
    {
      __isset.body = true;
      this._body = value;
    }
  }

  public List<TableRow> Footer
  {
    get
    {
      return _footer;
    }
    set
    {
      __isset.footer = true;
      this._footer = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool title;
    public bool header;
    public bool body;
    public bool footer;
  }

  public Table() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Header = new List<TableRow>();
                TList _list28 = iprot.ReadListBegin();
                for( int _i29 = 0; _i29 < _list28.Count; ++_i29)
                {
                  TableRow _elem30;
                  _elem30 = new TableRow();
                  _elem30.Read(iprot);
                  Header.Add(_elem30);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Body = new List<TableRow>();
                TList _list31 = iprot.ReadListBegin();
                for( int _i32 = 0; _i32 < _list31.Count; ++_i32)
                {
                  TableRow _elem33;
                  _elem33 = new TableRow();
                  _elem33.Read(iprot);
                  Body.Add(_elem33);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Footer = new List<TableRow>();
                TList _list34 = iprot.ReadListBegin();
                for( int _i35 = 0; _i35 < _list34.Count; ++_i35)
                {
                  TableRow _elem36;
                  _elem36 = new TableRow();
                  _elem36.Read(iprot);
                  Footer.Add(_elem36);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("Table");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (Header != null && __isset.header) {
        field.Name = "header";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Header.Count));
          foreach (TableRow _iter37 in Header)
          {
            _iter37.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Body != null && __isset.body) {
        field.Name = "body";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Body.Count));
          foreach (TableRow _iter38 in Body)
          {
            _iter38.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Footer != null && __isset.footer) {
        field.Name = "footer";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Footer.Count));
          foreach (TableRow _iter39 in Footer)
          {
            _iter39.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Table(");
    bool __first = true;
    if (Title != null && __isset.title) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Title: ");
      __sb.Append(Title);
    }
    if (Header != null && __isset.header) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Header: ");
      __sb.Append(Header);
    }
    if (Body != null && __isset.body) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Body: ");
      __sb.Append(Body);
    }
    if (Footer != null && __isset.footer) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Footer: ");
      __sb.Append(Footer);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}


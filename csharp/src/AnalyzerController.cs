/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class AnalyzerController {
  /// <summary>
  /// 
  /// O AnalyzerController deve ser implementado pela app e seus métodos são chamados pelo Radar.
  /// 
  /// Suas funções principais são registrar os analyzers, controlar o ciclo de vida das sessões dos analyzers e repassar os eventos para os mesmos.
  /// 
  /// Método que registra os analyzers: <a href="#Fn_AnalyzerController_analyzers">analyzers</a>
  /// 
  /// Métodos que controlam o ciclo de vida da sessão:
  /// <a href="#Fn_AnalyzerController_create_session">create_session</a> (criação),
  /// <a href="#Fn_AnalyzerController_result">result</a> (destruição)
  /// 
  /// Métodos que devem repassar o controle para os analyzers:
  /// <a href="#Fn_AnalyzerController_create_session">on_each_day</a>,
  /// <a href="#Fn_AnalyzerController_on_each_month">on_each_month</a>,
  /// <a href="#Fn_AnalyzerController_on_finish">on_finish</a>,
  /// <a href="#Fn_AnalyzerController_on_cash_flow">on_cash_flow</a>,
  /// <a href="#Fn_AnalyzerController_dump">dump</a>,
  /// <a href="#Fn_AnalyzerController_resume">resume</a>,
  /// <a href="#Fn_AnalyzerController_result">result</a>,
  /// <a href="#Fn_AnalyzerController_example_result">example_result</a>
  /// 
  /// </summary>
  public interface Iface {
    /// <summary>
    /// É chamado quando
    /// 
    /// </summary>
    List<AnalyzerConfig> analyzers();
    #if SILVERLIGHT
    IAsyncResult Begin_analyzers(AsyncCallback callback, object state);
    List<AnalyzerConfig> End_analyzers(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// É chamado <i>n</i> vezes durante o processamento da carteira, sendo
    /// <i>n</i> o número de dias processados.
    /// 
    /// <code>portfolio</code> Estado da carteira no dia que está sendo processado.
    /// </summary>
    /// <param name="sessionid"></param>
    /// <param name="portfolio"></param>
    void on_each_day(short sessionid, Portfolio portfolio);
    #if SILVERLIGHT
    IAsyncResult Begin_on_each_day(AsyncCallback callback, object state, short sessionid, Portfolio portfolio);
    void End_on_each_day(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// É chamado no final de cada mes durante o processamento da carteira.
    /// 
    /// <code>portfolio</code> Estado da carteira no último dia do mes.
    /// </summary>
    /// <param name="sessionid"></param>
    /// <param name="portfolio"></param>
    void on_each_month(short sessionid, Portfolio portfolio);
    #if SILVERLIGHT
    IAsyncResult Begin_on_each_month(AsyncCallback callback, object state, short sessionid, Portfolio portfolio);
    void End_on_each_month(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// É chamado ao final do processamento da carteira.
    /// 
    /// <code>portfolio</code> Estado da carteira no último dia de processamento.
    /// </summary>
    /// <param name="session_id"></param>
    /// <param name="portfolio"></param>
    void on_finish(short session_id, Portfolio portfolio);
    #if SILVERLIGHT
    IAsyncResult Begin_on_finish(AsyncCallback callback, object state, short session_id, Portfolio portfolio);
    void End_on_finish(IAsyncResult asyncResult);
    #endif
    void on_cash_flow(short session_id, CashFlow cash_flow);
    #if SILVERLIGHT
    IAsyncResult Begin_on_cash_flow(AsyncCallback callback, object state, short session_id, CashFlow cash_flow);
    void End_on_cash_flow(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// É chamado antes do processamento para o Radar receber as configurações do analyzer.
    /// </summary>
    /// <param name="session_id"></param>
    /// <param name="analyzer_id"></param>
    AnalyzerConfig create_session(short session_id, string analyzer_id);
    #if SILVERLIGHT
    IAsyncResult Begin_create_session(AsyncCallback callback, object state, short session_id, string analyzer_id);
    AnalyzerConfig End_create_session(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// É chamado sempre que o Radar quiser gerar uma imagem do estado atual do serviço
    /// para poder restaurar nos próximos processamentos.
    /// 
    /// O retorno pode ter qualquer formato, desde que seja compreendido pelo método
    /// <code>resume()</code>, já que posteriormente o conteúdo do retorno será
    /// passado como argumento para o método.
    /// </summary>
    /// <param name="session_id"></param>
    byte[] dump(short session_id);
    #if SILVERLIGHT
    IAsyncResult Begin_dump(AsyncCallback callback, object state, short session_id);
    byte[] End_dump(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// É chamado sempre que o Radar quiser começar a processar uma carteira à partir de
    /// uma imagem gerada pelo método <code>dump()</code>.
    /// </summary>
    /// <param name="session_id"></param>
    /// <param name="data"></param>
    void resume(short session_id, byte[] data);
    #if SILVERLIGHT
    IAsyncResult Begin_resume(AsyncCallback callback, object state, short session_id, byte[] data);
    void End_resume(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// É chamado no fim do processamento para pegar o resultado do Analyzer.
    /// </summary>
    /// <param name="session_id"></param>
    Result result(short session_id);
    #if SILVERLIGHT
    IAsyncResult Begin_result(AsyncCallback callback, object state, short session_id);
    Result End_result(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// É chamado no preview para exibir um exemplo de resultado do Analyzer.
    /// </summary>
    /// <param name="session_id"></param>
    void example_result(short session_id);
    #if SILVERLIGHT
    IAsyncResult Begin_example_result(AsyncCallback callback, object state, short session_id);
    void End_example_result(IAsyncResult asyncResult);
    #endif
    void destroy_session(short session_id);
    #if SILVERLIGHT
    IAsyncResult Begin_destroy_session(AsyncCallback callback, object state, short session_id);
    void End_destroy_session(IAsyncResult asyncResult);
    #endif
  }

  /// <summary>
  /// 
  /// O AnalyzerController deve ser implementado pela app e seus métodos são chamados pelo Radar.
  /// 
  /// Suas funções principais são registrar os analyzers, controlar o ciclo de vida das sessões dos analyzers e repassar os eventos para os mesmos.
  /// 
  /// Método que registra os analyzers: <a href="#Fn_AnalyzerController_analyzers">analyzers</a>
  /// 
  /// Métodos que controlam o ciclo de vida da sessão:
  /// <a href="#Fn_AnalyzerController_create_session">create_session</a> (criação),
  /// <a href="#Fn_AnalyzerController_result">result</a> (destruição)
  /// 
  /// Métodos que devem repassar o controle para os analyzers:
  /// <a href="#Fn_AnalyzerController_create_session">on_each_day</a>,
  /// <a href="#Fn_AnalyzerController_on_each_month">on_each_month</a>,
  /// <a href="#Fn_AnalyzerController_on_finish">on_finish</a>,
  /// <a href="#Fn_AnalyzerController_on_cash_flow">on_cash_flow</a>,
  /// <a href="#Fn_AnalyzerController_dump">dump</a>,
  /// <a href="#Fn_AnalyzerController_resume">resume</a>,
  /// <a href="#Fn_AnalyzerController_result">result</a>,
  /// <a href="#Fn_AnalyzerController_example_result">example_result</a>
  /// 
  /// </summary>
  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_analyzers(AsyncCallback callback, object state)
    {
      return send_analyzers(callback, state);
    }

    public List<AnalyzerConfig> End_analyzers(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_analyzers();
    }

    #endif

    /// <summary>
    /// É chamado quando
    /// 
    /// </summary>
    public List<AnalyzerConfig> analyzers()
    {
      #if !SILVERLIGHT
      send_analyzers();
      return recv_analyzers();

      #else
      var asyncResult = Begin_analyzers(null, null);
      return End_analyzers(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_analyzers(AsyncCallback callback, object state)
    #else
    public void send_analyzers()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("analyzers", TMessageType.Call, seqid_));
      analyzers_args args = new analyzers_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<AnalyzerConfig> recv_analyzers()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      analyzers_result result = new analyzers_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "analyzers failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_on_each_day(AsyncCallback callback, object state, short sessionid, Portfolio portfolio)
    {
      return send_on_each_day(callback, state, sessionid, portfolio);
    }

    public void End_on_each_day(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// É chamado <i>n</i> vezes durante o processamento da carteira, sendo
    /// <i>n</i> o número de dias processados.
    /// 
    /// <code>portfolio</code> Estado da carteira no dia que está sendo processado.
    /// </summary>
    /// <param name="sessionid"></param>
    /// <param name="portfolio"></param>
    public void on_each_day(short sessionid, Portfolio portfolio)
    {
      #if !SILVERLIGHT
      send_on_each_day(sessionid, portfolio);

      #else
      var asyncResult = Begin_on_each_day(null, null, sessionid, portfolio);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_on_each_day(AsyncCallback callback, object state, short sessionid, Portfolio portfolio)
    #else
    public void send_on_each_day(short sessionid, Portfolio portfolio)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("on_each_day", TMessageType.Oneway, seqid_));
      on_each_day_args args = new on_each_day_args();
      args.Sessionid = sessionid;
      args.Portfolio = portfolio;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_on_each_month(AsyncCallback callback, object state, short sessionid, Portfolio portfolio)
    {
      return send_on_each_month(callback, state, sessionid, portfolio);
    }

    public void End_on_each_month(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// É chamado no final de cada mes durante o processamento da carteira.
    /// 
    /// <code>portfolio</code> Estado da carteira no último dia do mes.
    /// </summary>
    /// <param name="sessionid"></param>
    /// <param name="portfolio"></param>
    public void on_each_month(short sessionid, Portfolio portfolio)
    {
      #if !SILVERLIGHT
      send_on_each_month(sessionid, portfolio);

      #else
      var asyncResult = Begin_on_each_month(null, null, sessionid, portfolio);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_on_each_month(AsyncCallback callback, object state, short sessionid, Portfolio portfolio)
    #else
    public void send_on_each_month(short sessionid, Portfolio portfolio)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("on_each_month", TMessageType.Oneway, seqid_));
      on_each_month_args args = new on_each_month_args();
      args.Sessionid = sessionid;
      args.Portfolio = portfolio;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_on_finish(AsyncCallback callback, object state, short session_id, Portfolio portfolio)
    {
      return send_on_finish(callback, state, session_id, portfolio);
    }

    public void End_on_finish(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// É chamado ao final do processamento da carteira.
    /// 
    /// <code>portfolio</code> Estado da carteira no último dia de processamento.
    /// </summary>
    /// <param name="session_id"></param>
    /// <param name="portfolio"></param>
    public void on_finish(short session_id, Portfolio portfolio)
    {
      #if !SILVERLIGHT
      send_on_finish(session_id, portfolio);

      #else
      var asyncResult = Begin_on_finish(null, null, session_id, portfolio);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_on_finish(AsyncCallback callback, object state, short session_id, Portfolio portfolio)
    #else
    public void send_on_finish(short session_id, Portfolio portfolio)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("on_finish", TMessageType.Oneway, seqid_));
      on_finish_args args = new on_finish_args();
      args.Session_id = session_id;
      args.Portfolio = portfolio;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_on_cash_flow(AsyncCallback callback, object state, short session_id, CashFlow cash_flow)
    {
      return send_on_cash_flow(callback, state, session_id, cash_flow);
    }

    public void End_on_cash_flow(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    public void on_cash_flow(short session_id, CashFlow cash_flow)
    {
      #if !SILVERLIGHT
      send_on_cash_flow(session_id, cash_flow);

      #else
      var asyncResult = Begin_on_cash_flow(null, null, session_id, cash_flow);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_on_cash_flow(AsyncCallback callback, object state, short session_id, CashFlow cash_flow)
    #else
    public void send_on_cash_flow(short session_id, CashFlow cash_flow)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("on_cash_flow", TMessageType.Oneway, seqid_));
      on_cash_flow_args args = new on_cash_flow_args();
      args.Session_id = session_id;
      args.Cash_flow = cash_flow;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_create_session(AsyncCallback callback, object state, short session_id, string analyzer_id)
    {
      return send_create_session(callback, state, session_id, analyzer_id);
    }

    public AnalyzerConfig End_create_session(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_create_session();
    }

    #endif

    /// <summary>
    /// É chamado antes do processamento para o Radar receber as configurações do analyzer.
    /// </summary>
    /// <param name="session_id"></param>
    /// <param name="analyzer_id"></param>
    public AnalyzerConfig create_session(short session_id, string analyzer_id)
    {
      #if !SILVERLIGHT
      send_create_session(session_id, analyzer_id);
      return recv_create_session();

      #else
      var asyncResult = Begin_create_session(null, null, session_id, analyzer_id);
      return End_create_session(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_create_session(AsyncCallback callback, object state, short session_id, string analyzer_id)
    #else
    public void send_create_session(short session_id, string analyzer_id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("create_session", TMessageType.Call, seqid_));
      create_session_args args = new create_session_args();
      args.Session_id = session_id;
      args.Analyzer_id = analyzer_id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public AnalyzerConfig recv_create_session()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      create_session_result result = new create_session_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "create_session failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_dump(AsyncCallback callback, object state, short session_id)
    {
      return send_dump(callback, state, session_id);
    }

    public byte[] End_dump(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_dump();
    }

    #endif

    /// <summary>
    /// É chamado sempre que o Radar quiser gerar uma imagem do estado atual do serviço
    /// para poder restaurar nos próximos processamentos.
    /// 
    /// O retorno pode ter qualquer formato, desde que seja compreendido pelo método
    /// <code>resume()</code>, já que posteriormente o conteúdo do retorno será
    /// passado como argumento para o método.
    /// </summary>
    /// <param name="session_id"></param>
    public byte[] dump(short session_id)
    {
      #if !SILVERLIGHT
      send_dump(session_id);
      return recv_dump();

      #else
      var asyncResult = Begin_dump(null, null, session_id);
      return End_dump(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_dump(AsyncCallback callback, object state, short session_id)
    #else
    public void send_dump(short session_id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("dump", TMessageType.Call, seqid_));
      dump_args args = new dump_args();
      args.Session_id = session_id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public byte[] recv_dump()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      dump_result result = new dump_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dump failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_resume(AsyncCallback callback, object state, short session_id, byte[] data)
    {
      return send_resume(callback, state, session_id, data);
    }

    public void End_resume(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    /// <summary>
    /// É chamado sempre que o Radar quiser começar a processar uma carteira à partir de
    /// uma imagem gerada pelo método <code>dump()</code>.
    /// </summary>
    /// <param name="session_id"></param>
    /// <param name="data"></param>
    public void resume(short session_id, byte[] data)
    {
      #if !SILVERLIGHT
      send_resume(session_id, data);

      #else
      var asyncResult = Begin_resume(null, null, session_id, data);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_resume(AsyncCallback callback, object state, short session_id, byte[] data)
    #else
    public void send_resume(short session_id, byte[] data)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("resume", TMessageType.Oneway, seqid_));
      resume_args args = new resume_args();
      args.Session_id = session_id;
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_result(AsyncCallback callback, object state, short session_id)
    {
      return send_result(callback, state, session_id);
    }

    public Result End_result(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_result();
    }

    #endif

    /// <summary>
    /// É chamado no fim do processamento para pegar o resultado do Analyzer.
    /// </summary>
    /// <param name="session_id"></param>
    public Result result(short session_id)
    {
      #if !SILVERLIGHT
      send_result(session_id);
      return recv_result();

      #else
      var asyncResult = Begin_result(null, null, session_id);
      return End_result(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_result(AsyncCallback callback, object state, short session_id)
    #else
    public void send_result(short session_id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("result", TMessageType.Call, seqid_));
      result_args args = new result_args();
      args.Session_id = session_id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public Result recv_result()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      result_result result = new result_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "result failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_example_result(AsyncCallback callback, object state, short session_id)
    {
      return send_example_result(callback, state, session_id);
    }

    public void End_example_result(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_example_result();
    }

    #endif

    /// <summary>
    /// É chamado no preview para exibir um exemplo de resultado do Analyzer.
    /// </summary>
    /// <param name="session_id"></param>
    public void example_result(short session_id)
    {
      #if !SILVERLIGHT
      send_example_result(session_id);
      recv_example_result();

      #else
      var asyncResult = Begin_example_result(null, null, session_id);
      End_example_result(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_example_result(AsyncCallback callback, object state, short session_id)
    #else
    public void send_example_result(short session_id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("example_result", TMessageType.Call, seqid_));
      example_result_args args = new example_result_args();
      args.Session_id = session_id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_example_result()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      example_result_result result = new example_result_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_destroy_session(AsyncCallback callback, object state, short session_id)
    {
      return send_destroy_session(callback, state, session_id);
    }

    public void End_destroy_session(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
    }

    #endif

    public void destroy_session(short session_id)
    {
      #if !SILVERLIGHT
      send_destroy_session(session_id);

      #else
      var asyncResult = Begin_destroy_session(null, null, session_id);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_destroy_session(AsyncCallback callback, object state, short session_id)
    #else
    public void send_destroy_session(short session_id)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("destroy_session", TMessageType.Oneway, seqid_));
      destroy_session_args args = new destroy_session_args();
      args.Session_id = session_id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

  }
  public class Processor : TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_["analyzers"] = analyzers_Process;
      processMap_["on_each_day"] = on_each_day_Process;
      processMap_["on_each_month"] = on_each_month_Process;
      processMap_["on_finish"] = on_finish_Process;
      processMap_["on_cash_flow"] = on_cash_flow_Process;
      processMap_["create_session"] = create_session_Process;
      processMap_["dump"] = dump_Process;
      processMap_["resume"] = resume_Process;
      processMap_["result"] = result_Process;
      processMap_["example_result"] = example_result_Process;
      processMap_["destroy_session"] = destroy_session_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private Iface iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void analyzers_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      analyzers_args args = new analyzers_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      analyzers_result result = new analyzers_result();
      result.Success = iface_.analyzers();
      oprot.WriteMessageBegin(new TMessage("analyzers", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void on_each_day_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      on_each_day_args args = new on_each_day_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.on_each_day(args.Sessionid, args.Portfolio);
      return;
    }
    public void on_each_month_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      on_each_month_args args = new on_each_month_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.on_each_month(args.Sessionid, args.Portfolio);
      return;
    }
    public void on_finish_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      on_finish_args args = new on_finish_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.on_finish(args.Session_id, args.Portfolio);
      return;
    }
    public void on_cash_flow_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      on_cash_flow_args args = new on_cash_flow_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.on_cash_flow(args.Session_id, args.Cash_flow);
      return;
    }
    public void create_session_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      create_session_args args = new create_session_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      create_session_result result = new create_session_result();
      result.Success = iface_.create_session(args.Session_id, args.Analyzer_id);
      oprot.WriteMessageBegin(new TMessage("create_session", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void dump_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      dump_args args = new dump_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      dump_result result = new dump_result();
      result.Success = iface_.dump(args.Session_id);
      oprot.WriteMessageBegin(new TMessage("dump", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void resume_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      resume_args args = new resume_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.resume(args.Session_id, args.Data);
      return;
    }
    public void result_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      result_args args = new result_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      result_result result = new result_result();
      result.Success = iface_.result(args.Session_id);
      oprot.WriteMessageBegin(new TMessage("result", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void example_result_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      example_result_args args = new example_result_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      example_result_result result = new example_result_result();
      iface_.example_result(args.Session_id);
      oprot.WriteMessageBegin(new TMessage("example_result", TMessageType.Reply, seqid)); 
      result.Write(oprot);
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void destroy_session_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      destroy_session_args args = new destroy_session_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      iface_.destroy_session(args.Session_id);
      return;
    }
  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class analyzers_args : TBase
  {

    public analyzers_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("analyzers_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("analyzers_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class analyzers_result : TBase
  {
    private List<AnalyzerConfig> _success;

    public List<AnalyzerConfig> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public analyzers_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<AnalyzerConfig>();
                  TList _list52 = iprot.ReadListBegin();
                  for( int _i53 = 0; _i53 < _list52.Count; ++_i53)
                  {
                    AnalyzerConfig _elem54;
                    _elem54 = new AnalyzerConfig();
                    _elem54.Read(iprot);
                    Success.Add(_elem54);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("analyzers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (AnalyzerConfig _iter55 in Success)
              {
                _iter55.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("analyzers_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class on_each_day_args : TBase
  {
    private short _sessionid;
    private Portfolio _portfolio;

    public short Sessionid
    {
      get
      {
        return _sessionid;
      }
      set
      {
        __isset.sessionid = true;
        this._sessionid = value;
      }
    }

    public Portfolio Portfolio
    {
      get
      {
        return _portfolio;
      }
      set
      {
        __isset.portfolio = true;
        this._portfolio = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionid;
      public bool portfolio;
    }

    public on_each_day_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Sessionid = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Portfolio = new Portfolio();
                Portfolio.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("on_each_day_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sessionid) {
          field.Name = "sessionid";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Sessionid);
          oprot.WriteFieldEnd();
        }
        if (Portfolio != null && __isset.portfolio) {
          field.Name = "portfolio";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Portfolio.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("on_each_day_args(");
      bool __first = true;
      if (__isset.sessionid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sessionid: ");
        __sb.Append(Sessionid);
      }
      if (Portfolio != null && __isset.portfolio) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Portfolio: ");
        __sb.Append(Portfolio== null ? "<null>" : Portfolio.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class on_each_month_args : TBase
  {
    private short _sessionid;
    private Portfolio _portfolio;

    public short Sessionid
    {
      get
      {
        return _sessionid;
      }
      set
      {
        __isset.sessionid = true;
        this._sessionid = value;
      }
    }

    public Portfolio Portfolio
    {
      get
      {
        return _portfolio;
      }
      set
      {
        __isset.portfolio = true;
        this._portfolio = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionid;
      public bool portfolio;
    }

    public on_each_month_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Sessionid = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Portfolio = new Portfolio();
                Portfolio.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("on_each_month_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.sessionid) {
          field.Name = "sessionid";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Sessionid);
          oprot.WriteFieldEnd();
        }
        if (Portfolio != null && __isset.portfolio) {
          field.Name = "portfolio";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Portfolio.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("on_each_month_args(");
      bool __first = true;
      if (__isset.sessionid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Sessionid: ");
        __sb.Append(Sessionid);
      }
      if (Portfolio != null && __isset.portfolio) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Portfolio: ");
        __sb.Append(Portfolio== null ? "<null>" : Portfolio.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class on_finish_args : TBase
  {
    private short _session_id;
    private Portfolio _portfolio;

    public short Session_id
    {
      get
      {
        return _session_id;
      }
      set
      {
        __isset.session_id = true;
        this._session_id = value;
      }
    }

    public Portfolio Portfolio
    {
      get
      {
        return _portfolio;
      }
      set
      {
        __isset.portfolio = true;
        this._portfolio = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool session_id;
      public bool portfolio;
    }

    public on_finish_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Session_id = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Portfolio = new Portfolio();
                Portfolio.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("on_finish_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.session_id) {
          field.Name = "session_id";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Session_id);
          oprot.WriteFieldEnd();
        }
        if (Portfolio != null && __isset.portfolio) {
          field.Name = "portfolio";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Portfolio.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("on_finish_args(");
      bool __first = true;
      if (__isset.session_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Session_id: ");
        __sb.Append(Session_id);
      }
      if (Portfolio != null && __isset.portfolio) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Portfolio: ");
        __sb.Append(Portfolio== null ? "<null>" : Portfolio.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class on_cash_flow_args : TBase
  {
    private short _session_id;
    private CashFlow _cash_flow;

    public short Session_id
    {
      get
      {
        return _session_id;
      }
      set
      {
        __isset.session_id = true;
        this._session_id = value;
      }
    }

    public CashFlow Cash_flow
    {
      get
      {
        return _cash_flow;
      }
      set
      {
        __isset.cash_flow = true;
        this._cash_flow = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool session_id;
      public bool cash_flow;
    }

    public on_cash_flow_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Session_id = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Cash_flow = new CashFlow();
                Cash_flow.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("on_cash_flow_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.session_id) {
          field.Name = "session_id";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Session_id);
          oprot.WriteFieldEnd();
        }
        if (Cash_flow != null && __isset.cash_flow) {
          field.Name = "cash_flow";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Cash_flow.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("on_cash_flow_args(");
      bool __first = true;
      if (__isset.session_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Session_id: ");
        __sb.Append(Session_id);
      }
      if (Cash_flow != null && __isset.cash_flow) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Cash_flow: ");
        __sb.Append(Cash_flow== null ? "<null>" : Cash_flow.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class create_session_args : TBase
  {
    private short _session_id;
    private string _analyzer_id;

    public short Session_id
    {
      get
      {
        return _session_id;
      }
      set
      {
        __isset.session_id = true;
        this._session_id = value;
      }
    }

    public string Analyzer_id
    {
      get
      {
        return _analyzer_id;
      }
      set
      {
        __isset.analyzer_id = true;
        this._analyzer_id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool session_id;
      public bool analyzer_id;
    }

    public create_session_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Session_id = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Analyzer_id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("create_session_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.session_id) {
          field.Name = "session_id";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Session_id);
          oprot.WriteFieldEnd();
        }
        if (Analyzer_id != null && __isset.analyzer_id) {
          field.Name = "analyzer_id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Analyzer_id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("create_session_args(");
      bool __first = true;
      if (__isset.session_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Session_id: ");
        __sb.Append(Session_id);
      }
      if (Analyzer_id != null && __isset.analyzer_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Analyzer_id: ");
        __sb.Append(Analyzer_id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class create_session_result : TBase
  {
    private AnalyzerConfig _success;

    public AnalyzerConfig Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public create_session_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AnalyzerConfig();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("create_session_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("create_session_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class dump_args : TBase
  {
    private short _session_id;

    public short Session_id
    {
      get
      {
        return _session_id;
      }
      set
      {
        __isset.session_id = true;
        this._session_id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool session_id;
    }

    public dump_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Session_id = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("dump_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.session_id) {
          field.Name = "session_id";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Session_id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("dump_args(");
      bool __first = true;
      if (__isset.session_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Session_id: ");
        __sb.Append(Session_id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class dump_result : TBase
  {
    private byte[] _success;

    public byte[] Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public dump_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("dump_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("dump_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class resume_args : TBase
  {
    private short _session_id;
    private byte[] _data;

    public short Session_id
    {
      get
      {
        return _session_id;
      }
      set
      {
        __isset.session_id = true;
        this._session_id = value;
      }
    }

    public byte[] Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool session_id;
      public bool data;
    }

    public resume_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Session_id = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Data = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("resume_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.session_id) {
          field.Name = "session_id";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Session_id);
          oprot.WriteFieldEnd();
        }
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Data);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("resume_args(");
      bool __first = true;
      if (__isset.session_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Session_id: ");
        __sb.Append(Session_id);
      }
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class result_args : TBase
  {
    private short _session_id;

    public short Session_id
    {
      get
      {
        return _session_id;
      }
      set
      {
        __isset.session_id = true;
        this._session_id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool session_id;
    }

    public result_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Session_id = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("result_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.session_id) {
          field.Name = "session_id";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Session_id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("result_args(");
      bool __first = true;
      if (__isset.session_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Session_id: ");
        __sb.Append(Session_id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class result_result : TBase
  {
    private Result _success;

    public Result Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public result_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Result();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("result_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("result_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class example_result_args : TBase
  {
    private short _session_id;

    public short Session_id
    {
      get
      {
        return _session_id;
      }
      set
      {
        __isset.session_id = true;
        this._session_id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool session_id;
    }

    public example_result_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Session_id = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("example_result_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.session_id) {
          field.Name = "session_id";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Session_id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("example_result_args(");
      bool __first = true;
      if (__isset.session_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Session_id: ");
        __sb.Append(Session_id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class example_result_result : TBase
  {

    public example_result_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("example_result_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("example_result_result(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class destroy_session_args : TBase
  {
    private short _session_id;

    public short Session_id
    {
      get
      {
        return _session_id;
      }
      set
      {
        __isset.session_id = true;
        this._session_id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool session_id;
    }

    public destroy_session_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I16) {
                Session_id = iprot.ReadI16();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("destroy_session_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.session_id) {
          field.Name = "session_id";
          field.Type = TType.I16;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI16(Session_id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("destroy_session_args(");
      bool __first = true;
      if (__isset.session_id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Session_id: ");
        __sb.Append(Session_id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}

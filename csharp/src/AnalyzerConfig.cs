/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class AnalyzerConfig : TBase
{
  private string _id;
  private string _name;
  private ResultType _result_type;
  private THashSet<@Event> _accepted_events;

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="ResultType"/>
  /// </summary>
  public ResultType Result_type
  {
    get
    {
      return _result_type;
    }
    set
    {
      __isset.result_type = true;
      this._result_type = value;
    }
  }

  public THashSet<@Event> Accepted_events
  {
    get
    {
      return _accepted_events;
    }
    set
    {
      __isset.accepted_events = true;
      this._accepted_events = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool name;
    public bool result_type;
    public bool accepted_events;
  }

  public AnalyzerConfig() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Result_type = (ResultType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Set) {
              {
                Accepted_events = new THashSet<@Event>();
                TSet _set48 = iprot.ReadSetBegin();
                for( int _i49 = 0; _i49 < _set48.Count; ++_i49)
                {
                  @Event _elem50;
                  _elem50 = (@Event)iprot.ReadI32();
                  Accepted_events.Add(_elem50);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("AnalyzerConfig");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (__isset.result_type) {
        field.Name = "result_type";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Result_type);
        oprot.WriteFieldEnd();
      }
      if (Accepted_events != null && __isset.accepted_events) {
        field.Name = "accepted_events";
        field.Type = TType.Set;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.I32, Accepted_events.Count));
          foreach (@Event _iter51 in Accepted_events)
          {
            oprot.WriteI32((int)_iter51);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("AnalyzerConfig(");
    bool __first = true;
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (Name != null && __isset.name) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Name: ");
      __sb.Append(Name);
    }
    if (__isset.result_type) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Result_type: ");
      __sb.Append(Result_type);
    }
    if (Accepted_events != null && __isset.accepted_events) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Accepted_events: ");
      __sb.Append(Accepted_events);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}


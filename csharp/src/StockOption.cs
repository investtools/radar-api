/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class StockOption : TBase
{
  private long _date;
  private StockId _stock;
  private int _shares;
  private double _price;
  private long _maturity;
  private StockOptionTransactionType _transaction_type;
  private StockBuyTransactionType _type;

  public long Date
  {
    get
    {
      return _date;
    }
    set
    {
      __isset.date = true;
      this._date = value;
    }
  }

  public StockId Stock
  {
    get
    {
      return _stock;
    }
    set
    {
      __isset.stock = true;
      this._stock = value;
    }
  }

  public int Shares
  {
    get
    {
      return _shares;
    }
    set
    {
      __isset.shares = true;
      this._shares = value;
    }
  }

  public double Price
  {
    get
    {
      return _price;
    }
    set
    {
      __isset.price = true;
      this._price = value;
    }
  }

  public long Maturity
  {
    get
    {
      return _maturity;
    }
    set
    {
      __isset.maturity = true;
      this._maturity = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="StockOptionTransactionType"/>
  /// </summary>
  public StockOptionTransactionType Transaction_type
  {
    get
    {
      return _transaction_type;
    }
    set
    {
      __isset.transaction_type = true;
      this._transaction_type = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="StockBuyTransactionType"/>
  /// </summary>
  public StockBuyTransactionType Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool date;
    public bool stock;
    public bool shares;
    public bool price;
    public bool maturity;
    public bool transaction_type;
    public bool type;
  }

  public StockOption() {
    this._type = StockBuyTransactionType.REGULAR;
    this.__isset.type = true;
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              Date = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Stock = new StockId();
              Stock.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Shares = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Double) {
              Price = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              Maturity = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Transaction_type = (StockOptionTransactionType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              Type = (StockBuyTransactionType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("StockOption");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.date) {
        field.Name = "date";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Date);
        oprot.WriteFieldEnd();
      }
      if (Stock != null && __isset.stock) {
        field.Name = "stock";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Stock.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.shares) {
        field.Name = "shares";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Shares);
        oprot.WriteFieldEnd();
      }
      if (__isset.price) {
        field.Name = "price";
        field.Type = TType.Double;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Price);
        oprot.WriteFieldEnd();
      }
      if (__isset.maturity) {
        field.Name = "maturity";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Maturity);
        oprot.WriteFieldEnd();
      }
      if (__isset.transaction_type) {
        field.Name = "transaction_type";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Transaction_type);
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("StockOption(");
    bool __first = true;
    if (__isset.date) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Date: ");
      __sb.Append(Date);
    }
    if (Stock != null && __isset.stock) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Stock: ");
      __sb.Append(Stock== null ? "<null>" : Stock.ToString());
    }
    if (__isset.shares) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Shares: ");
      __sb.Append(Shares);
    }
    if (__isset.price) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Price: ");
      __sb.Append(Price);
    }
    if (__isset.maturity) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Maturity: ");
      __sb.Append(Maturity);
    }
    if (__isset.transaction_type) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Transaction_type: ");
      __sb.Append(Transaction_type);
    }
    if (__isset.type) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Type: ");
      __sb.Append(Type);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}


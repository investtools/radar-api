/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class CorporateBondId : TBase
{
  private IndexId _index;
  private double _factor;
  private double _rate;
  private int _base_date;
  private int _maturity_date;

  public IndexId Index
  {
    get
    {
      return _index;
    }
    set
    {
      __isset.index = true;
      this._index = value;
    }
  }

  public double Factor
  {
    get
    {
      return _factor;
    }
    set
    {
      __isset.factor = true;
      this._factor = value;
    }
  }

  public double Rate
  {
    get
    {
      return _rate;
    }
    set
    {
      __isset.rate = true;
      this._rate = value;
    }
  }

  public int Base_date
  {
    get
    {
      return _base_date;
    }
    set
    {
      __isset.base_date = true;
      this._base_date = value;
    }
  }

  public int Maturity_date
  {
    get
    {
      return _maturity_date;
    }
    set
    {
      __isset.maturity_date = true;
      this._maturity_date = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool index;
    public bool factor;
    public bool rate;
    public bool base_date;
    public bool maturity_date;
  }

  public CorporateBondId() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Index = new IndexId();
              Index.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Double) {
              Factor = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              Rate = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Base_date = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Maturity_date = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("CorporateBondId");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Index != null && __isset.index) {
        field.Name = "index";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Index.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.factor) {
        field.Name = "factor";
        field.Type = TType.Double;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Factor);
        oprot.WriteFieldEnd();
      }
      if (__isset.base_date) {
        field.Name = "base_date";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Base_date);
        oprot.WriteFieldEnd();
      }
      if (__isset.maturity_date) {
        field.Name = "maturity_date";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Maturity_date);
        oprot.WriteFieldEnd();
      }
      if (__isset.rate) {
        field.Name = "rate";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Rate);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("CorporateBondId(");
    bool __first = true;
    if (Index != null && __isset.index) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Index: ");
      __sb.Append(Index== null ? "<null>" : Index.ToString());
    }
    if (__isset.factor) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Factor: ");
      __sb.Append(Factor);
    }
    if (__isset.rate) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Rate: ");
      __sb.Append(Rate);
    }
    if (__isset.base_date) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Base_date: ");
      __sb.Append(Base_date);
    }
    if (__isset.maturity_date) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Maturity_date: ");
      __sb.Append(Maturity_date);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}


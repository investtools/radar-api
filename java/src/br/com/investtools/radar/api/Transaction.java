/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.com.investtools.radar.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class Transaction extends org.apache.thrift.TUnion<Transaction, Transaction._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Transaction");
  private static final org.apache.thrift.protocol.TField EQUITY_BUY_FIELD_DESC = new org.apache.thrift.protocol.TField("equity_buy", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField EQUITY_SELL_FIELD_DESC = new org.apache.thrift.protocol.TField("equity_sell", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField EQUITY_POSITION_SNAPSHOT_FIELD_DESC = new org.apache.thrift.protocol.TField("equity_position_snapshot", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SLB_FIELD_DESC = new org.apache.thrift.protocol.TField("slb", org.apache.thrift.protocol.TType.STRUCT, (short)4);
  private static final org.apache.thrift.protocol.TField SLBR_FIELD_DESC = new org.apache.thrift.protocol.TField("slbr", org.apache.thrift.protocol.TType.STRUCT, (short)5);
  private static final org.apache.thrift.protocol.TField STOCK_COMMISSION_EXPENSE_FIELD_DESC = new org.apache.thrift.protocol.TField("stock_commission_expense", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField TRANSFER_FIELD_DESC = new org.apache.thrift.protocol.TField("transfer", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField OPTION_EXERCISE_FIELD_DESC = new org.apache.thrift.protocol.TField("option_exercise", org.apache.thrift.protocol.TType.STRUCT, (short)8);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EQUITY_BUY((short)1, "equity_buy"),
    EQUITY_SELL((short)2, "equity_sell"),
    EQUITY_POSITION_SNAPSHOT((short)3, "equity_position_snapshot"),
    SLB((short)4, "slb"),
    SLBR((short)5, "slbr"),
    STOCK_COMMISSION_EXPENSE((short)6, "stock_commission_expense"),
    TRANSFER((short)7, "transfer"),
    OPTION_EXERCISE((short)8, "option_exercise");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EQUITY_BUY
          return EQUITY_BUY;
        case 2: // EQUITY_SELL
          return EQUITY_SELL;
        case 3: // EQUITY_POSITION_SNAPSHOT
          return EQUITY_POSITION_SNAPSHOT;
        case 4: // SLB
          return SLB;
        case 5: // SLBR
          return SLBR;
        case 6: // STOCK_COMMISSION_EXPENSE
          return STOCK_COMMISSION_EXPENSE;
        case 7: // TRANSFER
          return TRANSFER;
        case 8: // OPTION_EXERCISE
          return OPTION_EXERCISE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EQUITY_BUY, new org.apache.thrift.meta_data.FieldMetaData("equity_buy", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EquityBuy.class)));
    tmpMap.put(_Fields.EQUITY_SELL, new org.apache.thrift.meta_data.FieldMetaData("equity_sell", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EquitySell.class)));
    tmpMap.put(_Fields.EQUITY_POSITION_SNAPSHOT, new org.apache.thrift.meta_data.FieldMetaData("equity_position_snapshot", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EquityPositionSnapshot.class)));
    tmpMap.put(_Fields.SLB, new org.apache.thrift.meta_data.FieldMetaData("slb", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SecurityLendingAndBorrowing.class)));
    tmpMap.put(_Fields.SLBR, new org.apache.thrift.meta_data.FieldMetaData("slbr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SecurityLendingAndBorrowingReturning.class)));
    tmpMap.put(_Fields.STOCK_COMMISSION_EXPENSE, new org.apache.thrift.meta_data.FieldMetaData("stock_commission_expense", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CommissionExpense.class)));
    tmpMap.put(_Fields.TRANSFER, new org.apache.thrift.meta_data.FieldMetaData("transfer", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Transfer.class)));
    tmpMap.put(_Fields.OPTION_EXERCISE, new org.apache.thrift.meta_data.FieldMetaData("option_exercise", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OptionExercise.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Transaction.class, metaDataMap);
  }

  public Transaction() {
    super();
  }

  public Transaction(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public Transaction(Transaction other) {
    super(other);
  }
  public Transaction deepCopy() {
    return new Transaction(this);
  }

  public static Transaction equity_buy(EquityBuy value) {
    Transaction x = new Transaction();
    x.setEquity_buy(value);
    return x;
  }

  public static Transaction equity_sell(EquitySell value) {
    Transaction x = new Transaction();
    x.setEquity_sell(value);
    return x;
  }

  public static Transaction equity_position_snapshot(EquityPositionSnapshot value) {
    Transaction x = new Transaction();
    x.setEquity_position_snapshot(value);
    return x;
  }

  public static Transaction slb(SecurityLendingAndBorrowing value) {
    Transaction x = new Transaction();
    x.setSlb(value);
    return x;
  }

  public static Transaction slbr(SecurityLendingAndBorrowingReturning value) {
    Transaction x = new Transaction();
    x.setSlbr(value);
    return x;
  }

  public static Transaction stock_commission_expense(CommissionExpense value) {
    Transaction x = new Transaction();
    x.setStock_commission_expense(value);
    return x;
  }

  public static Transaction transfer(Transfer value) {
    Transaction x = new Transaction();
    x.setTransfer(value);
    return x;
  }

  public static Transaction option_exercise(OptionExercise value) {
    Transaction x = new Transaction();
    x.setOption_exercise(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case EQUITY_BUY:
        if (value instanceof EquityBuy) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type EquityBuy for field 'equity_buy', but got " + value.getClass().getSimpleName());
      case EQUITY_SELL:
        if (value instanceof EquitySell) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type EquitySell for field 'equity_sell', but got " + value.getClass().getSimpleName());
      case EQUITY_POSITION_SNAPSHOT:
        if (value instanceof EquityPositionSnapshot) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type EquityPositionSnapshot for field 'equity_position_snapshot', but got " + value.getClass().getSimpleName());
      case SLB:
        if (value instanceof SecurityLendingAndBorrowing) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type SecurityLendingAndBorrowing for field 'slb', but got " + value.getClass().getSimpleName());
      case SLBR:
        if (value instanceof SecurityLendingAndBorrowingReturning) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type SecurityLendingAndBorrowingReturning for field 'slbr', but got " + value.getClass().getSimpleName());
      case STOCK_COMMISSION_EXPENSE:
        if (value instanceof CommissionExpense) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type CommissionExpense for field 'stock_commission_expense', but got " + value.getClass().getSimpleName());
      case TRANSFER:
        if (value instanceof Transfer) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type Transfer for field 'transfer', but got " + value.getClass().getSimpleName());
      case OPTION_EXERCISE:
        if (value instanceof OptionExercise) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type OptionExercise for field 'option_exercise', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case EQUITY_BUY:
          if (field.type == EQUITY_BUY_FIELD_DESC.type) {
            EquityBuy equity_buy;
            equity_buy = new EquityBuy();
            equity_buy.read(iprot);
            return equity_buy;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case EQUITY_SELL:
          if (field.type == EQUITY_SELL_FIELD_DESC.type) {
            EquitySell equity_sell;
            equity_sell = new EquitySell();
            equity_sell.read(iprot);
            return equity_sell;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case EQUITY_POSITION_SNAPSHOT:
          if (field.type == EQUITY_POSITION_SNAPSHOT_FIELD_DESC.type) {
            EquityPositionSnapshot equity_position_snapshot;
            equity_position_snapshot = new EquityPositionSnapshot();
            equity_position_snapshot.read(iprot);
            return equity_position_snapshot;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SLB:
          if (field.type == SLB_FIELD_DESC.type) {
            SecurityLendingAndBorrowing slb;
            slb = new SecurityLendingAndBorrowing();
            slb.read(iprot);
            return slb;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case SLBR:
          if (field.type == SLBR_FIELD_DESC.type) {
            SecurityLendingAndBorrowingReturning slbr;
            slbr = new SecurityLendingAndBorrowingReturning();
            slbr.read(iprot);
            return slbr;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case STOCK_COMMISSION_EXPENSE:
          if (field.type == STOCK_COMMISSION_EXPENSE_FIELD_DESC.type) {
            CommissionExpense stock_commission_expense;
            stock_commission_expense = new CommissionExpense();
            stock_commission_expense.read(iprot);
            return stock_commission_expense;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case TRANSFER:
          if (field.type == TRANSFER_FIELD_DESC.type) {
            Transfer transfer;
            transfer = new Transfer();
            transfer.read(iprot);
            return transfer;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case OPTION_EXERCISE:
          if (field.type == OPTION_EXERCISE_FIELD_DESC.type) {
            OptionExercise option_exercise;
            option_exercise = new OptionExercise();
            option_exercise.read(iprot);
            return option_exercise;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case EQUITY_BUY:
        EquityBuy equity_buy = (EquityBuy)value_;
        equity_buy.write(oprot);
        return;
      case EQUITY_SELL:
        EquitySell equity_sell = (EquitySell)value_;
        equity_sell.write(oprot);
        return;
      case EQUITY_POSITION_SNAPSHOT:
        EquityPositionSnapshot equity_position_snapshot = (EquityPositionSnapshot)value_;
        equity_position_snapshot.write(oprot);
        return;
      case SLB:
        SecurityLendingAndBorrowing slb = (SecurityLendingAndBorrowing)value_;
        slb.write(oprot);
        return;
      case SLBR:
        SecurityLendingAndBorrowingReturning slbr = (SecurityLendingAndBorrowingReturning)value_;
        slbr.write(oprot);
        return;
      case STOCK_COMMISSION_EXPENSE:
        CommissionExpense stock_commission_expense = (CommissionExpense)value_;
        stock_commission_expense.write(oprot);
        return;
      case TRANSFER:
        Transfer transfer = (Transfer)value_;
        transfer.write(oprot);
        return;
      case OPTION_EXERCISE:
        OptionExercise option_exercise = (OptionExercise)value_;
        option_exercise.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case EQUITY_BUY:
          EquityBuy equity_buy;
          equity_buy = new EquityBuy();
          equity_buy.read(iprot);
          return equity_buy;
        case EQUITY_SELL:
          EquitySell equity_sell;
          equity_sell = new EquitySell();
          equity_sell.read(iprot);
          return equity_sell;
        case EQUITY_POSITION_SNAPSHOT:
          EquityPositionSnapshot equity_position_snapshot;
          equity_position_snapshot = new EquityPositionSnapshot();
          equity_position_snapshot.read(iprot);
          return equity_position_snapshot;
        case SLB:
          SecurityLendingAndBorrowing slb;
          slb = new SecurityLendingAndBorrowing();
          slb.read(iprot);
          return slb;
        case SLBR:
          SecurityLendingAndBorrowingReturning slbr;
          slbr = new SecurityLendingAndBorrowingReturning();
          slbr.read(iprot);
          return slbr;
        case STOCK_COMMISSION_EXPENSE:
          CommissionExpense stock_commission_expense;
          stock_commission_expense = new CommissionExpense();
          stock_commission_expense.read(iprot);
          return stock_commission_expense;
        case TRANSFER:
          Transfer transfer;
          transfer = new Transfer();
          transfer.read(iprot);
          return transfer;
        case OPTION_EXERCISE:
          OptionExercise option_exercise;
          option_exercise = new OptionExercise();
          option_exercise.read(iprot);
          return option_exercise;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case EQUITY_BUY:
        EquityBuy equity_buy = (EquityBuy)value_;
        equity_buy.write(oprot);
        return;
      case EQUITY_SELL:
        EquitySell equity_sell = (EquitySell)value_;
        equity_sell.write(oprot);
        return;
      case EQUITY_POSITION_SNAPSHOT:
        EquityPositionSnapshot equity_position_snapshot = (EquityPositionSnapshot)value_;
        equity_position_snapshot.write(oprot);
        return;
      case SLB:
        SecurityLendingAndBorrowing slb = (SecurityLendingAndBorrowing)value_;
        slb.write(oprot);
        return;
      case SLBR:
        SecurityLendingAndBorrowingReturning slbr = (SecurityLendingAndBorrowingReturning)value_;
        slbr.write(oprot);
        return;
      case STOCK_COMMISSION_EXPENSE:
        CommissionExpense stock_commission_expense = (CommissionExpense)value_;
        stock_commission_expense.write(oprot);
        return;
      case TRANSFER:
        Transfer transfer = (Transfer)value_;
        transfer.write(oprot);
        return;
      case OPTION_EXERCISE:
        OptionExercise option_exercise = (OptionExercise)value_;
        option_exercise.write(oprot);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case EQUITY_BUY:
        return EQUITY_BUY_FIELD_DESC;
      case EQUITY_SELL:
        return EQUITY_SELL_FIELD_DESC;
      case EQUITY_POSITION_SNAPSHOT:
        return EQUITY_POSITION_SNAPSHOT_FIELD_DESC;
      case SLB:
        return SLB_FIELD_DESC;
      case SLBR:
        return SLBR_FIELD_DESC;
      case STOCK_COMMISSION_EXPENSE:
        return STOCK_COMMISSION_EXPENSE_FIELD_DESC;
      case TRANSFER:
        return TRANSFER_FIELD_DESC;
      case OPTION_EXERCISE:
        return OPTION_EXERCISE_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public EquityBuy getEquity_buy() {
    if (getSetField() == _Fields.EQUITY_BUY) {
      return (EquityBuy)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'equity_buy' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setEquity_buy(EquityBuy value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.EQUITY_BUY;
    value_ = value;
  }

  public EquitySell getEquity_sell() {
    if (getSetField() == _Fields.EQUITY_SELL) {
      return (EquitySell)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'equity_sell' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setEquity_sell(EquitySell value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.EQUITY_SELL;
    value_ = value;
  }

  public EquityPositionSnapshot getEquity_position_snapshot() {
    if (getSetField() == _Fields.EQUITY_POSITION_SNAPSHOT) {
      return (EquityPositionSnapshot)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'equity_position_snapshot' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setEquity_position_snapshot(EquityPositionSnapshot value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.EQUITY_POSITION_SNAPSHOT;
    value_ = value;
  }

  public SecurityLendingAndBorrowing getSlb() {
    if (getSetField() == _Fields.SLB) {
      return (SecurityLendingAndBorrowing)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'slb' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSlb(SecurityLendingAndBorrowing value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.SLB;
    value_ = value;
  }

  public SecurityLendingAndBorrowingReturning getSlbr() {
    if (getSetField() == _Fields.SLBR) {
      return (SecurityLendingAndBorrowingReturning)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'slbr' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setSlbr(SecurityLendingAndBorrowingReturning value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.SLBR;
    value_ = value;
  }

  public CommissionExpense getStock_commission_expense() {
    if (getSetField() == _Fields.STOCK_COMMISSION_EXPENSE) {
      return (CommissionExpense)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'stock_commission_expense' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setStock_commission_expense(CommissionExpense value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.STOCK_COMMISSION_EXPENSE;
    value_ = value;
  }

  public Transfer getTransfer() {
    if (getSetField() == _Fields.TRANSFER) {
      return (Transfer)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'transfer' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setTransfer(Transfer value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.TRANSFER;
    value_ = value;
  }

  public OptionExercise getOption_exercise() {
    if (getSetField() == _Fields.OPTION_EXERCISE) {
      return (OptionExercise)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'option_exercise' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setOption_exercise(OptionExercise value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.OPTION_EXERCISE;
    value_ = value;
  }

  public boolean isSetEquity_buy() {
    return setField_ == _Fields.EQUITY_BUY;
  }


  public boolean isSetEquity_sell() {
    return setField_ == _Fields.EQUITY_SELL;
  }


  public boolean isSetEquity_position_snapshot() {
    return setField_ == _Fields.EQUITY_POSITION_SNAPSHOT;
  }


  public boolean isSetSlb() {
    return setField_ == _Fields.SLB;
  }


  public boolean isSetSlbr() {
    return setField_ == _Fields.SLBR;
  }


  public boolean isSetStock_commission_expense() {
    return setField_ == _Fields.STOCK_COMMISSION_EXPENSE;
  }


  public boolean isSetTransfer() {
    return setField_ == _Fields.TRANSFER;
  }


  public boolean isSetOption_exercise() {
    return setField_ == _Fields.OPTION_EXERCISE;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof Transaction) {
      return equals((Transaction)other);
    } else {
      return false;
    }
  }

  public boolean equals(Transaction other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(Transaction other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}

/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.com.investtools.radar.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-4-7")
public class AnalyzerController {

  public interface Iface {

    /**
     * É chamado quando
     * 
     */
    public List<AnalyzerConfig> analyzers() throws org.apache.thrift.TException;

    /**
     * É chamado <i>n</i> vezes durante o processamento da carteira, sendo
     * <i>n</i> o número de dias processados.
     * 
     * <code>portfolio</code> Estado da carteira no dia que está sendo processado.
     * 
     * @param sessionid
     * @param portfolio
     */
    public void on_each_day(int sessionid, Portfolio portfolio) throws org.apache.thrift.TException;

    /**
     * É chamado ao final do processamento da carteira.
     * 
     * <code>portfolio</code> Estado da carteira no último dia de processamento.
     * 
     * @param session_id
     * @param portfolio
     */
    public void on_finish(int session_id, Portfolio portfolio) throws org.apache.thrift.TException;

    /**
     * É chamado antes do processamento para o Radar receber as configurações do analyzer.
     * 
     * @param session_id
     * @param analyzer_id
     */
    public AnalyzerConfig create_session(int session_id, String analyzer_id) throws org.apache.thrift.TException;

    /**
     * É chamado sempre que o Radar quiser gerar uma imagem do estado atual do serviço
     * para poder restaurar nos próximos processamentos.
     * 
     * O retorno pode ter qualquer formato, desde que seja compreendido pelo método
     * <code>resume()</code>, já que posteriormente o conteúdo do retorno será
     * passado como argumento para o método.
     * 
     * @param session_id
     */
    public ByteBuffer dump(int session_id) throws org.apache.thrift.TException;

    /**
     * É chamado sempre que o Radar quiser começar a processar uma carteira à partir de
     * uma imagem gerada pelo método <code>dump()</code>.
     * 
     * @param session_id
     * @param data
     */
    public void resume(int session_id, ByteBuffer data) throws org.apache.thrift.TException;

    /**
     * É chamado no fim do processamento para pegar o resultado do Analyzer.
     * 
     * @param session_id
     */
    public Result result(int session_id) throws org.apache.thrift.TException;

    public void destroy_session(int session_id) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void analyzers(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void on_each_day(int sessionid, Portfolio portfolio, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void on_finish(int session_id, Portfolio portfolio, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void create_session(int session_id, String analyzer_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void dump(int session_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void resume(int session_id, ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void result(int session_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void destroy_session(int session_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<AnalyzerConfig> analyzers() throws org.apache.thrift.TException
    {
      send_analyzers();
      return recv_analyzers();
    }

    public void send_analyzers() throws org.apache.thrift.TException
    {
      analyzers_args args = new analyzers_args();
      sendBase("analyzers", args);
    }

    public List<AnalyzerConfig> recv_analyzers() throws org.apache.thrift.TException
    {
      analyzers_result result = new analyzers_result();
      receiveBase(result, "analyzers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "analyzers failed: unknown result");
    }

    public void on_each_day(int sessionid, Portfolio portfolio) throws org.apache.thrift.TException
    {
      send_on_each_day(sessionid, portfolio);
    }

    public void send_on_each_day(int sessionid, Portfolio portfolio) throws org.apache.thrift.TException
    {
      on_each_day_args args = new on_each_day_args();
      args.setSessionid(sessionid);
      args.setPortfolio(portfolio);
      sendBase("on_each_day", args);
    }

    public void on_finish(int session_id, Portfolio portfolio) throws org.apache.thrift.TException
    {
      send_on_finish(session_id, portfolio);
    }

    public void send_on_finish(int session_id, Portfolio portfolio) throws org.apache.thrift.TException
    {
      on_finish_args args = new on_finish_args();
      args.setSession_id(session_id);
      args.setPortfolio(portfolio);
      sendBase("on_finish", args);
    }

    public AnalyzerConfig create_session(int session_id, String analyzer_id) throws org.apache.thrift.TException
    {
      send_create_session(session_id, analyzer_id);
      return recv_create_session();
    }

    public void send_create_session(int session_id, String analyzer_id) throws org.apache.thrift.TException
    {
      create_session_args args = new create_session_args();
      args.setSession_id(session_id);
      args.setAnalyzer_id(analyzer_id);
      sendBase("create_session", args);
    }

    public AnalyzerConfig recv_create_session() throws org.apache.thrift.TException
    {
      create_session_result result = new create_session_result();
      receiveBase(result, "create_session");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "create_session failed: unknown result");
    }

    public ByteBuffer dump(int session_id) throws org.apache.thrift.TException
    {
      send_dump(session_id);
      return recv_dump();
    }

    public void send_dump(int session_id) throws org.apache.thrift.TException
    {
      dump_args args = new dump_args();
      args.setSession_id(session_id);
      sendBase("dump", args);
    }

    public ByteBuffer recv_dump() throws org.apache.thrift.TException
    {
      dump_result result = new dump_result();
      receiveBase(result, "dump");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dump failed: unknown result");
    }

    public void resume(int session_id, ByteBuffer data) throws org.apache.thrift.TException
    {
      send_resume(session_id, data);
    }

    public void send_resume(int session_id, ByteBuffer data) throws org.apache.thrift.TException
    {
      resume_args args = new resume_args();
      args.setSession_id(session_id);
      args.setData(data);
      sendBase("resume", args);
    }

    public Result result(int session_id) throws org.apache.thrift.TException
    {
      send_result(session_id);
      return recv_result();
    }

    public void send_result(int session_id) throws org.apache.thrift.TException
    {
      result_args args = new result_args();
      args.setSession_id(session_id);
      sendBase("result", args);
    }

    public Result recv_result() throws org.apache.thrift.TException
    {
      result_result result = new result_result();
      receiveBase(result, "result");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "result failed: unknown result");
    }

    public void destroy_session(int session_id) throws org.apache.thrift.TException
    {
      send_destroy_session(session_id);
    }

    public void send_destroy_session(int session_id) throws org.apache.thrift.TException
    {
      destroy_session_args args = new destroy_session_args();
      args.setSession_id(session_id);
      sendBase("destroy_session", args);
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void analyzers(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      analyzers_call method_call = new analyzers_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class analyzers_call extends org.apache.thrift.async.TAsyncMethodCall {
      public analyzers_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("analyzers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        analyzers_args args = new analyzers_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<AnalyzerConfig> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_analyzers();
      }
    }

    public void on_each_day(int sessionid, Portfolio portfolio, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      on_each_day_call method_call = new on_each_day_call(sessionid, portfolio, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class on_each_day_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int sessionid;
      private Portfolio portfolio;
      public on_each_day_call(int sessionid, Portfolio portfolio, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.sessionid = sessionid;
        this.portfolio = portfolio;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("on_each_day", org.apache.thrift.protocol.TMessageType.CALL, 0));
        on_each_day_args args = new on_each_day_args();
        args.setSessionid(sessionid);
        args.setPortfolio(portfolio);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void on_finish(int session_id, Portfolio portfolio, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      on_finish_call method_call = new on_finish_call(session_id, portfolio, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class on_finish_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int session_id;
      private Portfolio portfolio;
      public on_finish_call(int session_id, Portfolio portfolio, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.session_id = session_id;
        this.portfolio = portfolio;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("on_finish", org.apache.thrift.protocol.TMessageType.CALL, 0));
        on_finish_args args = new on_finish_args();
        args.setSession_id(session_id);
        args.setPortfolio(portfolio);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void create_session(int session_id, String analyzer_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      create_session_call method_call = new create_session_call(session_id, analyzer_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class create_session_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int session_id;
      private String analyzer_id;
      public create_session_call(int session_id, String analyzer_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session_id = session_id;
        this.analyzer_id = analyzer_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("create_session", org.apache.thrift.protocol.TMessageType.CALL, 0));
        create_session_args args = new create_session_args();
        args.setSession_id(session_id);
        args.setAnalyzer_id(analyzer_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AnalyzerConfig getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_create_session();
      }
    }

    public void dump(int session_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dump_call method_call = new dump_call(session_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dump_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int session_id;
      public dump_call(int session_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session_id = session_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dump", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dump_args args = new dump_args();
        args.setSession_id(session_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ByteBuffer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dump();
      }
    }

    public void resume(int session_id, ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resume_call method_call = new resume_call(session_id, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resume_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int session_id;
      private ByteBuffer data;
      public resume_call(int session_id, ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.session_id = session_id;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resume", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resume_args args = new resume_args();
        args.setSession_id(session_id);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

    public void result(int session_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      result_call method_call = new result_call(session_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class result_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int session_id;
      public result_call(int session_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.session_id = session_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("result", org.apache.thrift.protocol.TMessageType.CALL, 0));
        result_args args = new result_args();
        args.setSession_id(session_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_result();
      }
    }

    public void destroy_session(int session_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      destroy_session_call method_call = new destroy_session_call(session_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class destroy_session_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int session_id;
      public destroy_session_call(int session_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, true);
        this.session_id = session_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("destroy_session", org.apache.thrift.protocol.TMessageType.CALL, 0));
        destroy_session_args args = new destroy_session_args();
        args.setSession_id(session_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("analyzers", new analyzers());
      processMap.put("on_each_day", new on_each_day());
      processMap.put("on_finish", new on_finish());
      processMap.put("create_session", new create_session());
      processMap.put("dump", new dump());
      processMap.put("resume", new resume());
      processMap.put("result", new result());
      processMap.put("destroy_session", new destroy_session());
      return processMap;
    }

    public static class analyzers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, analyzers_args> {
      public analyzers() {
        super("analyzers");
      }

      public analyzers_args getEmptyArgsInstance() {
        return new analyzers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public analyzers_result getResult(I iface, analyzers_args args) throws org.apache.thrift.TException {
        analyzers_result result = new analyzers_result();
        result.success = iface.analyzers();
        return result;
      }
    }

    public static class on_each_day<I extends Iface> extends org.apache.thrift.ProcessFunction<I, on_each_day_args> {
      public on_each_day() {
        super("on_each_day");
      }

      public on_each_day_args getEmptyArgsInstance() {
        return new on_each_day_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, on_each_day_args args) throws org.apache.thrift.TException {
        iface.on_each_day(args.sessionid, args.portfolio);
        return null;
      }
    }

    public static class on_finish<I extends Iface> extends org.apache.thrift.ProcessFunction<I, on_finish_args> {
      public on_finish() {
        super("on_finish");
      }

      public on_finish_args getEmptyArgsInstance() {
        return new on_finish_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, on_finish_args args) throws org.apache.thrift.TException {
        iface.on_finish(args.session_id, args.portfolio);
        return null;
      }
    }

    public static class create_session<I extends Iface> extends org.apache.thrift.ProcessFunction<I, create_session_args> {
      public create_session() {
        super("create_session");
      }

      public create_session_args getEmptyArgsInstance() {
        return new create_session_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public create_session_result getResult(I iface, create_session_args args) throws org.apache.thrift.TException {
        create_session_result result = new create_session_result();
        result.success = iface.create_session(args.session_id, args.analyzer_id);
        return result;
      }
    }

    public static class dump<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dump_args> {
      public dump() {
        super("dump");
      }

      public dump_args getEmptyArgsInstance() {
        return new dump_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public dump_result getResult(I iface, dump_args args) throws org.apache.thrift.TException {
        dump_result result = new dump_result();
        result.success = iface.dump(args.session_id);
        return result;
      }
    }

    public static class resume<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resume_args> {
      public resume() {
        super("resume");
      }

      public resume_args getEmptyArgsInstance() {
        return new resume_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, resume_args args) throws org.apache.thrift.TException {
        iface.resume(args.session_id, args.data);
        return null;
      }
    }

    public static class result<I extends Iface> extends org.apache.thrift.ProcessFunction<I, result_args> {
      public result() {
        super("result");
      }

      public result_args getEmptyArgsInstance() {
        return new result_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public result_result getResult(I iface, result_args args) throws org.apache.thrift.TException {
        result_result result = new result_result();
        result.success = iface.result(args.session_id);
        return result;
      }
    }

    public static class destroy_session<I extends Iface> extends org.apache.thrift.ProcessFunction<I, destroy_session_args> {
      public destroy_session() {
        super("destroy_session");
      }

      public destroy_session_args getEmptyArgsInstance() {
        return new destroy_session_args();
      }

      protected boolean isOneway() {
        return true;
      }

      public org.apache.thrift.TBase getResult(I iface, destroy_session_args args) throws org.apache.thrift.TException {
        iface.destroy_session(args.session_id);
        return null;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("analyzers", new analyzers());
      processMap.put("on_each_day", new on_each_day());
      processMap.put("on_finish", new on_finish());
      processMap.put("create_session", new create_session());
      processMap.put("dump", new dump());
      processMap.put("resume", new resume());
      processMap.put("result", new result());
      processMap.put("destroy_session", new destroy_session());
      return processMap;
    }

    public static class analyzers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, analyzers_args, List<AnalyzerConfig>> {
      public analyzers() {
        super("analyzers");
      }

      public analyzers_args getEmptyArgsInstance() {
        return new analyzers_args();
      }

      public AsyncMethodCallback<List<AnalyzerConfig>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<AnalyzerConfig>>() { 
          public void onComplete(List<AnalyzerConfig> o) {
            analyzers_result result = new analyzers_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            analyzers_result result = new analyzers_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, analyzers_args args, org.apache.thrift.async.AsyncMethodCallback<List<AnalyzerConfig>> resultHandler) throws TException {
        iface.analyzers(resultHandler);
      }
    }

    public static class on_each_day<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, on_each_day_args, Void> {
      public on_each_day() {
        super("on_each_day");
      }

      public on_each_day_args getEmptyArgsInstance() {
        return new on_each_day_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, on_each_day_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.on_each_day(args.sessionid, args.portfolio,resultHandler);
      }
    }

    public static class on_finish<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, on_finish_args, Void> {
      public on_finish() {
        super("on_finish");
      }

      public on_finish_args getEmptyArgsInstance() {
        return new on_finish_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, on_finish_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.on_finish(args.session_id, args.portfolio,resultHandler);
      }
    }

    public static class create_session<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, create_session_args, AnalyzerConfig> {
      public create_session() {
        super("create_session");
      }

      public create_session_args getEmptyArgsInstance() {
        return new create_session_args();
      }

      public AsyncMethodCallback<AnalyzerConfig> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AnalyzerConfig>() { 
          public void onComplete(AnalyzerConfig o) {
            create_session_result result = new create_session_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            create_session_result result = new create_session_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, create_session_args args, org.apache.thrift.async.AsyncMethodCallback<AnalyzerConfig> resultHandler) throws TException {
        iface.create_session(args.session_id, args.analyzer_id,resultHandler);
      }
    }

    public static class dump<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dump_args, ByteBuffer> {
      public dump() {
        super("dump");
      }

      public dump_args getEmptyArgsInstance() {
        return new dump_args();
      }

      public AsyncMethodCallback<ByteBuffer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ByteBuffer>() { 
          public void onComplete(ByteBuffer o) {
            dump_result result = new dump_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            dump_result result = new dump_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dump_args args, org.apache.thrift.async.AsyncMethodCallback<ByteBuffer> resultHandler) throws TException {
        iface.dump(args.session_id,resultHandler);
      }
    }

    public static class resume<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resume_args, Void> {
      public resume() {
        super("resume");
      }

      public resume_args getEmptyArgsInstance() {
        return new resume_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, resume_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.resume(args.session_id, args.data,resultHandler);
      }
    }

    public static class result<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, result_args, Result> {
      public result() {
        super("result");
      }

      public result_args getEmptyArgsInstance() {
        return new result_args();
      }

      public AsyncMethodCallback<Result> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            result_result result = new result_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            result_result result = new result_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, result_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws TException {
        iface.result(args.session_id,resultHandler);
      }
    }

    public static class destroy_session<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, destroy_session_args, Void> {
      public destroy_session() {
        super("destroy_session");
      }

      public destroy_session_args getEmptyArgsInstance() {
        return new destroy_session_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
          }
          public void onError(Exception e) {
          }
        };
      }

      protected boolean isOneway() {
        return true;
      }

      public void start(I iface, destroy_session_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.destroy_session(args.session_id,resultHandler);
      }
    }

  }

  public static class analyzers_args implements org.apache.thrift.TBase<analyzers_args, analyzers_args._Fields>, java.io.Serializable, Cloneable, Comparable<analyzers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("analyzers_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new analyzers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new analyzers_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(analyzers_args.class, metaDataMap);
    }

    public analyzers_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public analyzers_args(analyzers_args other) {
    }

    public analyzers_args deepCopy() {
      return new analyzers_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof analyzers_args)
        return this.equals((analyzers_args)that);
      return false;
    }

    public boolean equals(analyzers_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(analyzers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("analyzers_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class analyzers_argsStandardSchemeFactory implements SchemeFactory {
      public analyzers_argsStandardScheme getScheme() {
        return new analyzers_argsStandardScheme();
      }
    }

    private static class analyzers_argsStandardScheme extends StandardScheme<analyzers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, analyzers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, analyzers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class analyzers_argsTupleSchemeFactory implements SchemeFactory {
      public analyzers_argsTupleScheme getScheme() {
        return new analyzers_argsTupleScheme();
      }
    }

    private static class analyzers_argsTupleScheme extends TupleScheme<analyzers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, analyzers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, analyzers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class analyzers_result implements org.apache.thrift.TBase<analyzers_result, analyzers_result._Fields>, java.io.Serializable, Cloneable, Comparable<analyzers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("analyzers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new analyzers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new analyzers_resultTupleSchemeFactory());
    }

    public List<AnalyzerConfig> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AnalyzerConfig.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(analyzers_result.class, metaDataMap);
    }

    public analyzers_result() {
    }

    public analyzers_result(
      List<AnalyzerConfig> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public analyzers_result(analyzers_result other) {
      if (other.isSetSuccess()) {
        List<AnalyzerConfig> __this__success = new ArrayList<AnalyzerConfig>(other.success.size());
        for (AnalyzerConfig other_element : other.success) {
          __this__success.add(new AnalyzerConfig(other_element));
        }
        this.success = __this__success;
      }
    }

    public analyzers_result deepCopy() {
      return new analyzers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<AnalyzerConfig> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(AnalyzerConfig elem) {
      if (this.success == null) {
        this.success = new ArrayList<AnalyzerConfig>();
      }
      this.success.add(elem);
    }

    public List<AnalyzerConfig> getSuccess() {
      return this.success;
    }

    public analyzers_result setSuccess(List<AnalyzerConfig> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<AnalyzerConfig>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof analyzers_result)
        return this.equals((analyzers_result)that);
      return false;
    }

    public boolean equals(analyzers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(analyzers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("analyzers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class analyzers_resultStandardSchemeFactory implements SchemeFactory {
      public analyzers_resultStandardScheme getScheme() {
        return new analyzers_resultStandardScheme();
      }
    }

    private static class analyzers_resultStandardScheme extends StandardScheme<analyzers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, analyzers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                  struct.success = new ArrayList<AnalyzerConfig>(_list98.size);
                  for (int _i99 = 0; _i99 < _list98.size; ++_i99)
                  {
                    AnalyzerConfig _elem100;
                    _elem100 = new AnalyzerConfig();
                    _elem100.read(iprot);
                    struct.success.add(_elem100);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, analyzers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (AnalyzerConfig _iter101 : struct.success)
            {
              _iter101.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class analyzers_resultTupleSchemeFactory implements SchemeFactory {
      public analyzers_resultTupleScheme getScheme() {
        return new analyzers_resultTupleScheme();
      }
    }

    private static class analyzers_resultTupleScheme extends TupleScheme<analyzers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, analyzers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (AnalyzerConfig _iter102 : struct.success)
            {
              _iter102.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, analyzers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<AnalyzerConfig>(_list103.size);
            for (int _i104 = 0; _i104 < _list103.size; ++_i104)
            {
              AnalyzerConfig _elem105;
              _elem105 = new AnalyzerConfig();
              _elem105.read(iprot);
              struct.success.add(_elem105);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class on_each_day_args implements org.apache.thrift.TBase<on_each_day_args, on_each_day_args._Fields>, java.io.Serializable, Cloneable, Comparable<on_each_day_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("on_each_day_args");

    private static final org.apache.thrift.protocol.TField SESSIONID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionid", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PORTFOLIO_FIELD_DESC = new org.apache.thrift.protocol.TField("portfolio", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new on_each_day_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new on_each_day_argsTupleSchemeFactory());
    }

    public int sessionid; // required
    public Portfolio portfolio; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSIONID((short)1, "sessionid"),
      PORTFOLIO((short)2, "portfolio");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSIONID
            return SESSIONID;
          case 2: // PORTFOLIO
            return PORTFOLIO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SESSIONID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSIONID, new org.apache.thrift.meta_data.FieldMetaData("sessionid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "SessionId")));
      tmpMap.put(_Fields.PORTFOLIO, new org.apache.thrift.meta_data.FieldMetaData("portfolio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Portfolio.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(on_each_day_args.class, metaDataMap);
    }

    public on_each_day_args() {
    }

    public on_each_day_args(
      int sessionid,
      Portfolio portfolio)
    {
      this();
      this.sessionid = sessionid;
      setSessionidIsSet(true);
      this.portfolio = portfolio;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public on_each_day_args(on_each_day_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.sessionid = other.sessionid;
      if (other.isSetPortfolio()) {
        this.portfolio = new Portfolio(other.portfolio);
      }
    }

    public on_each_day_args deepCopy() {
      return new on_each_day_args(this);
    }

    @Override
    public void clear() {
      setSessionidIsSet(false);
      this.sessionid = 0;
      this.portfolio = null;
    }

    public int getSessionid() {
      return this.sessionid;
    }

    public on_each_day_args setSessionid(int sessionid) {
      this.sessionid = sessionid;
      setSessionidIsSet(true);
      return this;
    }

    public void unsetSessionid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    /** Returns true if field sessionid is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionid() {
      return EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    public void setSessionidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
    }

    public Portfolio getPortfolio() {
      return this.portfolio;
    }

    public on_each_day_args setPortfolio(Portfolio portfolio) {
      this.portfolio = portfolio;
      return this;
    }

    public void unsetPortfolio() {
      this.portfolio = null;
    }

    /** Returns true if field portfolio is set (has been assigned a value) and false otherwise */
    public boolean isSetPortfolio() {
      return this.portfolio != null;
    }

    public void setPortfolioIsSet(boolean value) {
      if (!value) {
        this.portfolio = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSIONID:
        if (value == null) {
          unsetSessionid();
        } else {
          setSessionid((Integer)value);
        }
        break;

      case PORTFOLIO:
        if (value == null) {
          unsetPortfolio();
        } else {
          setPortfolio((Portfolio)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSIONID:
        return Integer.valueOf(getSessionid());

      case PORTFOLIO:
        return getPortfolio();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSIONID:
        return isSetSessionid();
      case PORTFOLIO:
        return isSetPortfolio();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof on_each_day_args)
        return this.equals((on_each_day_args)that);
      return false;
    }

    public boolean equals(on_each_day_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionid = true;
      boolean that_present_sessionid = true;
      if (this_present_sessionid || that_present_sessionid) {
        if (!(this_present_sessionid && that_present_sessionid))
          return false;
        if (this.sessionid != that.sessionid)
          return false;
      }

      boolean this_present_portfolio = true && this.isSetPortfolio();
      boolean that_present_portfolio = true && that.isSetPortfolio();
      if (this_present_portfolio || that_present_portfolio) {
        if (!(this_present_portfolio && that_present_portfolio))
          return false;
        if (!this.portfolio.equals(that.portfolio))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_sessionid = true;
      list.add(present_sessionid);
      if (present_sessionid)
        list.add(sessionid);

      boolean present_portfolio = true && (isSetPortfolio());
      list.add(present_portfolio);
      if (present_portfolio)
        list.add(portfolio);

      return list.hashCode();
    }

    @Override
    public int compareTo(on_each_day_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionid()).compareTo(other.isSetSessionid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionid, other.sessionid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPortfolio()).compareTo(other.isSetPortfolio());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPortfolio()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portfolio, other.portfolio);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("on_each_day_args(");
      boolean first = true;

      sb.append("sessionid:");
      sb.append(this.sessionid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("portfolio:");
      if (this.portfolio == null) {
        sb.append("null");
      } else {
        sb.append(this.portfolio);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (portfolio != null) {
        portfolio.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class on_each_day_argsStandardSchemeFactory implements SchemeFactory {
      public on_each_day_argsStandardScheme getScheme() {
        return new on_each_day_argsStandardScheme();
      }
    }

    private static class on_each_day_argsStandardScheme extends StandardScheme<on_each_day_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, on_each_day_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSIONID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sessionid = iprot.readI32();
                struct.setSessionidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORTFOLIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.portfolio = new Portfolio();
                struct.portfolio.read(iprot);
                struct.setPortfolioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, on_each_day_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SESSIONID_FIELD_DESC);
        oprot.writeI32(struct.sessionid);
        oprot.writeFieldEnd();
        if (struct.portfolio != null) {
          oprot.writeFieldBegin(PORTFOLIO_FIELD_DESC);
          struct.portfolio.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class on_each_day_argsTupleSchemeFactory implements SchemeFactory {
      public on_each_day_argsTupleScheme getScheme() {
        return new on_each_day_argsTupleScheme();
      }
    }

    private static class on_each_day_argsTupleScheme extends TupleScheme<on_each_day_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, on_each_day_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionid()) {
          optionals.set(0);
        }
        if (struct.isSetPortfolio()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSessionid()) {
          oprot.writeI32(struct.sessionid);
        }
        if (struct.isSetPortfolio()) {
          struct.portfolio.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, on_each_day_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sessionid = iprot.readI32();
          struct.setSessionidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.portfolio = new Portfolio();
          struct.portfolio.read(iprot);
          struct.setPortfolioIsSet(true);
        }
      }
    }

  }

  public static class on_finish_args implements org.apache.thrift.TBase<on_finish_args, on_finish_args._Fields>, java.io.Serializable, Cloneable, Comparable<on_finish_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("on_finish_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("session_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField PORTFOLIO_FIELD_DESC = new org.apache.thrift.protocol.TField("portfolio", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new on_finish_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new on_finish_argsTupleSchemeFactory());
    }

    public int session_id; // required
    public Portfolio portfolio; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "session_id"),
      PORTFOLIO((short)2, "portfolio");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // PORTFOLIO
            return PORTFOLIO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SESSION_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("session_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "SessionId")));
      tmpMap.put(_Fields.PORTFOLIO, new org.apache.thrift.meta_data.FieldMetaData("portfolio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Portfolio.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(on_finish_args.class, metaDataMap);
    }

    public on_finish_args() {
    }

    public on_finish_args(
      int session_id,
      Portfolio portfolio)
    {
      this();
      this.session_id = session_id;
      setSession_idIsSet(true);
      this.portfolio = portfolio;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public on_finish_args(on_finish_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.session_id = other.session_id;
      if (other.isSetPortfolio()) {
        this.portfolio = new Portfolio(other.portfolio);
      }
    }

    public on_finish_args deepCopy() {
      return new on_finish_args(this);
    }

    @Override
    public void clear() {
      setSession_idIsSet(false);
      this.session_id = 0;
      this.portfolio = null;
    }

    public int getSession_id() {
      return this.session_id;
    }

    public on_finish_args setSession_id(int session_id) {
      this.session_id = session_id;
      setSession_idIsSet(true);
      return this;
    }

    public void unsetSession_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSION_ID_ISSET_ID);
    }

    /** Returns true if field session_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSession_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SESSION_ID_ISSET_ID);
    }

    public void setSession_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSION_ID_ISSET_ID, value);
    }

    public Portfolio getPortfolio() {
      return this.portfolio;
    }

    public on_finish_args setPortfolio(Portfolio portfolio) {
      this.portfolio = portfolio;
      return this;
    }

    public void unsetPortfolio() {
      this.portfolio = null;
    }

    /** Returns true if field portfolio is set (has been assigned a value) and false otherwise */
    public boolean isSetPortfolio() {
      return this.portfolio != null;
    }

    public void setPortfolioIsSet(boolean value) {
      if (!value) {
        this.portfolio = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSession_id();
        } else {
          setSession_id((Integer)value);
        }
        break;

      case PORTFOLIO:
        if (value == null) {
          unsetPortfolio();
        } else {
          setPortfolio((Portfolio)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return Integer.valueOf(getSession_id());

      case PORTFOLIO:
        return getPortfolio();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSession_id();
      case PORTFOLIO:
        return isSetPortfolio();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof on_finish_args)
        return this.equals((on_finish_args)that);
      return false;
    }

    public boolean equals(on_finish_args that) {
      if (that == null)
        return false;

      boolean this_present_session_id = true;
      boolean that_present_session_id = true;
      if (this_present_session_id || that_present_session_id) {
        if (!(this_present_session_id && that_present_session_id))
          return false;
        if (this.session_id != that.session_id)
          return false;
      }

      boolean this_present_portfolio = true && this.isSetPortfolio();
      boolean that_present_portfolio = true && that.isSetPortfolio();
      if (this_present_portfolio || that_present_portfolio) {
        if (!(this_present_portfolio && that_present_portfolio))
          return false;
        if (!this.portfolio.equals(that.portfolio))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_session_id = true;
      list.add(present_session_id);
      if (present_session_id)
        list.add(session_id);

      boolean present_portfolio = true && (isSetPortfolio());
      list.add(present_portfolio);
      if (present_portfolio)
        list.add(portfolio);

      return list.hashCode();
    }

    @Override
    public int compareTo(on_finish_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSession_id()).compareTo(other.isSetSession_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session_id, other.session_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPortfolio()).compareTo(other.isSetPortfolio());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPortfolio()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portfolio, other.portfolio);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("on_finish_args(");
      boolean first = true;

      sb.append("session_id:");
      sb.append(this.session_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("portfolio:");
      if (this.portfolio == null) {
        sb.append("null");
      } else {
        sb.append(this.portfolio);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (portfolio != null) {
        portfolio.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class on_finish_argsStandardSchemeFactory implements SchemeFactory {
      public on_finish_argsStandardScheme getScheme() {
        return new on_finish_argsStandardScheme();
      }
    }

    private static class on_finish_argsStandardScheme extends StandardScheme<on_finish_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, on_finish_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.session_id = iprot.readI32();
                struct.setSession_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORTFOLIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.portfolio = new Portfolio();
                struct.portfolio.read(iprot);
                struct.setPortfolioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, on_finish_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeI32(struct.session_id);
        oprot.writeFieldEnd();
        if (struct.portfolio != null) {
          oprot.writeFieldBegin(PORTFOLIO_FIELD_DESC);
          struct.portfolio.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class on_finish_argsTupleSchemeFactory implements SchemeFactory {
      public on_finish_argsTupleScheme getScheme() {
        return new on_finish_argsTupleScheme();
      }
    }

    private static class on_finish_argsTupleScheme extends TupleScheme<on_finish_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, on_finish_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSession_id()) {
          optionals.set(0);
        }
        if (struct.isSetPortfolio()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSession_id()) {
          oprot.writeI32(struct.session_id);
        }
        if (struct.isSetPortfolio()) {
          struct.portfolio.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, on_finish_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.session_id = iprot.readI32();
          struct.setSession_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.portfolio = new Portfolio();
          struct.portfolio.read(iprot);
          struct.setPortfolioIsSet(true);
        }
      }
    }

  }

  public static class create_session_args implements org.apache.thrift.TBase<create_session_args, create_session_args._Fields>, java.io.Serializable, Cloneable, Comparable<create_session_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_session_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("session_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ANALYZER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("analyzer_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_session_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_session_argsTupleSchemeFactory());
    }

    public int session_id; // required
    public String analyzer_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "session_id"),
      ANALYZER_ID((short)2, "analyzer_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // ANALYZER_ID
            return ANALYZER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SESSION_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("session_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "SessionId")));
      tmpMap.put(_Fields.ANALYZER_ID, new org.apache.thrift.meta_data.FieldMetaData("analyzer_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_session_args.class, metaDataMap);
    }

    public create_session_args() {
    }

    public create_session_args(
      int session_id,
      String analyzer_id)
    {
      this();
      this.session_id = session_id;
      setSession_idIsSet(true);
      this.analyzer_id = analyzer_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_session_args(create_session_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.session_id = other.session_id;
      if (other.isSetAnalyzer_id()) {
        this.analyzer_id = other.analyzer_id;
      }
    }

    public create_session_args deepCopy() {
      return new create_session_args(this);
    }

    @Override
    public void clear() {
      setSession_idIsSet(false);
      this.session_id = 0;
      this.analyzer_id = null;
    }

    public int getSession_id() {
      return this.session_id;
    }

    public create_session_args setSession_id(int session_id) {
      this.session_id = session_id;
      setSession_idIsSet(true);
      return this;
    }

    public void unsetSession_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSION_ID_ISSET_ID);
    }

    /** Returns true if field session_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSession_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SESSION_ID_ISSET_ID);
    }

    public void setSession_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSION_ID_ISSET_ID, value);
    }

    public String getAnalyzer_id() {
      return this.analyzer_id;
    }

    public create_session_args setAnalyzer_id(String analyzer_id) {
      this.analyzer_id = analyzer_id;
      return this;
    }

    public void unsetAnalyzer_id() {
      this.analyzer_id = null;
    }

    /** Returns true if field analyzer_id is set (has been assigned a value) and false otherwise */
    public boolean isSetAnalyzer_id() {
      return this.analyzer_id != null;
    }

    public void setAnalyzer_idIsSet(boolean value) {
      if (!value) {
        this.analyzer_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSession_id();
        } else {
          setSession_id((Integer)value);
        }
        break;

      case ANALYZER_ID:
        if (value == null) {
          unsetAnalyzer_id();
        } else {
          setAnalyzer_id((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return Integer.valueOf(getSession_id());

      case ANALYZER_ID:
        return getAnalyzer_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSession_id();
      case ANALYZER_ID:
        return isSetAnalyzer_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_session_args)
        return this.equals((create_session_args)that);
      return false;
    }

    public boolean equals(create_session_args that) {
      if (that == null)
        return false;

      boolean this_present_session_id = true;
      boolean that_present_session_id = true;
      if (this_present_session_id || that_present_session_id) {
        if (!(this_present_session_id && that_present_session_id))
          return false;
        if (this.session_id != that.session_id)
          return false;
      }

      boolean this_present_analyzer_id = true && this.isSetAnalyzer_id();
      boolean that_present_analyzer_id = true && that.isSetAnalyzer_id();
      if (this_present_analyzer_id || that_present_analyzer_id) {
        if (!(this_present_analyzer_id && that_present_analyzer_id))
          return false;
        if (!this.analyzer_id.equals(that.analyzer_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_session_id = true;
      list.add(present_session_id);
      if (present_session_id)
        list.add(session_id);

      boolean present_analyzer_id = true && (isSetAnalyzer_id());
      list.add(present_analyzer_id);
      if (present_analyzer_id)
        list.add(analyzer_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(create_session_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSession_id()).compareTo(other.isSetSession_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session_id, other.session_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetAnalyzer_id()).compareTo(other.isSetAnalyzer_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAnalyzer_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.analyzer_id, other.analyzer_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_session_args(");
      boolean first = true;

      sb.append("session_id:");
      sb.append(this.session_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("analyzer_id:");
      if (this.analyzer_id == null) {
        sb.append("null");
      } else {
        sb.append(this.analyzer_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_session_argsStandardSchemeFactory implements SchemeFactory {
      public create_session_argsStandardScheme getScheme() {
        return new create_session_argsStandardScheme();
      }
    }

    private static class create_session_argsStandardScheme extends StandardScheme<create_session_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_session_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.session_id = iprot.readI32();
                struct.setSession_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ANALYZER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.analyzer_id = iprot.readString();
                struct.setAnalyzer_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_session_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeI32(struct.session_id);
        oprot.writeFieldEnd();
        if (struct.analyzer_id != null) {
          oprot.writeFieldBegin(ANALYZER_ID_FIELD_DESC);
          oprot.writeString(struct.analyzer_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_session_argsTupleSchemeFactory implements SchemeFactory {
      public create_session_argsTupleScheme getScheme() {
        return new create_session_argsTupleScheme();
      }
    }

    private static class create_session_argsTupleScheme extends TupleScheme<create_session_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_session_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSession_id()) {
          optionals.set(0);
        }
        if (struct.isSetAnalyzer_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSession_id()) {
          oprot.writeI32(struct.session_id);
        }
        if (struct.isSetAnalyzer_id()) {
          oprot.writeString(struct.analyzer_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_session_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.session_id = iprot.readI32();
          struct.setSession_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.analyzer_id = iprot.readString();
          struct.setAnalyzer_idIsSet(true);
        }
      }
    }

  }

  public static class create_session_result implements org.apache.thrift.TBase<create_session_result, create_session_result._Fields>, java.io.Serializable, Cloneable, Comparable<create_session_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("create_session_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new create_session_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new create_session_resultTupleSchemeFactory());
    }

    public AnalyzerConfig success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AnalyzerConfig.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(create_session_result.class, metaDataMap);
    }

    public create_session_result() {
    }

    public create_session_result(
      AnalyzerConfig success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public create_session_result(create_session_result other) {
      if (other.isSetSuccess()) {
        this.success = new AnalyzerConfig(other.success);
      }
    }

    public create_session_result deepCopy() {
      return new create_session_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public AnalyzerConfig getSuccess() {
      return this.success;
    }

    public create_session_result setSuccess(AnalyzerConfig success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AnalyzerConfig)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof create_session_result)
        return this.equals((create_session_result)that);
      return false;
    }

    public boolean equals(create_session_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(create_session_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("create_session_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class create_session_resultStandardSchemeFactory implements SchemeFactory {
      public create_session_resultStandardScheme getScheme() {
        return new create_session_resultStandardScheme();
      }
    }

    private static class create_session_resultStandardScheme extends StandardScheme<create_session_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, create_session_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AnalyzerConfig();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, create_session_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class create_session_resultTupleSchemeFactory implements SchemeFactory {
      public create_session_resultTupleScheme getScheme() {
        return new create_session_resultTupleScheme();
      }
    }

    private static class create_session_resultTupleScheme extends TupleScheme<create_session_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, create_session_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, create_session_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new AnalyzerConfig();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class dump_args implements org.apache.thrift.TBase<dump_args, dump_args._Fields>, java.io.Serializable, Cloneable, Comparable<dump_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dump_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("session_id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dump_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dump_argsTupleSchemeFactory());
    }

    public int session_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "session_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SESSION_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("session_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "SessionId")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dump_args.class, metaDataMap);
    }

    public dump_args() {
    }

    public dump_args(
      int session_id)
    {
      this();
      this.session_id = session_id;
      setSession_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dump_args(dump_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.session_id = other.session_id;
    }

    public dump_args deepCopy() {
      return new dump_args(this);
    }

    @Override
    public void clear() {
      setSession_idIsSet(false);
      this.session_id = 0;
    }

    public int getSession_id() {
      return this.session_id;
    }

    public dump_args setSession_id(int session_id) {
      this.session_id = session_id;
      setSession_idIsSet(true);
      return this;
    }

    public void unsetSession_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSION_ID_ISSET_ID);
    }

    /** Returns true if field session_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSession_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SESSION_ID_ISSET_ID);
    }

    public void setSession_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSION_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSession_id();
        } else {
          setSession_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return Integer.valueOf(getSession_id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSession_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dump_args)
        return this.equals((dump_args)that);
      return false;
    }

    public boolean equals(dump_args that) {
      if (that == null)
        return false;

      boolean this_present_session_id = true;
      boolean that_present_session_id = true;
      if (this_present_session_id || that_present_session_id) {
        if (!(this_present_session_id && that_present_session_id))
          return false;
        if (this.session_id != that.session_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_session_id = true;
      list.add(present_session_id);
      if (present_session_id)
        list.add(session_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(dump_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSession_id()).compareTo(other.isSetSession_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session_id, other.session_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dump_args(");
      boolean first = true;

      sb.append("session_id:");
      sb.append(this.session_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dump_argsStandardSchemeFactory implements SchemeFactory {
      public dump_argsStandardScheme getScheme() {
        return new dump_argsStandardScheme();
      }
    }

    private static class dump_argsStandardScheme extends StandardScheme<dump_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dump_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.session_id = iprot.readI32();
                struct.setSession_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dump_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeI32(struct.session_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dump_argsTupleSchemeFactory implements SchemeFactory {
      public dump_argsTupleScheme getScheme() {
        return new dump_argsTupleScheme();
      }
    }

    private static class dump_argsTupleScheme extends TupleScheme<dump_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dump_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSession_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSession_id()) {
          oprot.writeI32(struct.session_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dump_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.session_id = iprot.readI32();
          struct.setSession_idIsSet(true);
        }
      }
    }

  }

  public static class dump_result implements org.apache.thrift.TBase<dump_result, dump_result._Fields>, java.io.Serializable, Cloneable, Comparable<dump_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dump_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new dump_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new dump_resultTupleSchemeFactory());
    }

    public ByteBuffer success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dump_result.class, metaDataMap);
    }

    public dump_result() {
    }

    public dump_result(
      ByteBuffer success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dump_result(dump_result other) {
      if (other.isSetSuccess()) {
        this.success = org.apache.thrift.TBaseHelper.copyBinary(other.success);
      }
    }

    public dump_result deepCopy() {
      return new dump_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public byte[] getSuccess() {
      setSuccess(org.apache.thrift.TBaseHelper.rightSize(success));
      return success == null ? null : success.array();
    }

    public ByteBuffer bufferForSuccess() {
      return success;
    }

    public dump_result setSuccess(byte[] success) {
      setSuccess(success == null ? (ByteBuffer)null : ByteBuffer.wrap(success));
      return this;
    }

    public dump_result setSuccess(ByteBuffer success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dump_result)
        return this.equals((dump_result)that);
      return false;
    }

    public boolean equals(dump_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(dump_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("dump_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.success, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dump_resultStandardSchemeFactory implements SchemeFactory {
      public dump_resultStandardScheme getScheme() {
        return new dump_resultStandardScheme();
      }
    }

    private static class dump_resultStandardScheme extends StandardScheme<dump_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dump_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readBinary();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dump_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBinary(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dump_resultTupleSchemeFactory implements SchemeFactory {
      public dump_resultTupleScheme getScheme() {
        return new dump_resultTupleScheme();
      }
    }

    private static class dump_resultTupleScheme extends TupleScheme<dump_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dump_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBinary(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dump_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBinary();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class resume_args implements org.apache.thrift.TBase<resume_args, resume_args._Fields>, java.io.Serializable, Cloneable, Comparable<resume_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resume_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("session_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new resume_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new resume_argsTupleSchemeFactory());
    }

    public int session_id; // required
    public ByteBuffer data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "session_id"),
      DATA((short)2, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          case 2: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SESSION_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("session_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "SessionId")));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resume_args.class, metaDataMap);
    }

    public resume_args() {
    }

    public resume_args(
      int session_id,
      ByteBuffer data)
    {
      this();
      this.session_id = session_id;
      setSession_idIsSet(true);
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resume_args(resume_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.session_id = other.session_id;
      if (other.isSetData()) {
        this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
      }
    }

    public resume_args deepCopy() {
      return new resume_args(this);
    }

    @Override
    public void clear() {
      setSession_idIsSet(false);
      this.session_id = 0;
      this.data = null;
    }

    public int getSession_id() {
      return this.session_id;
    }

    public resume_args setSession_id(int session_id) {
      this.session_id = session_id;
      setSession_idIsSet(true);
      return this;
    }

    public void unsetSession_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSION_ID_ISSET_ID);
    }

    /** Returns true if field session_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSession_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SESSION_ID_ISSET_ID);
    }

    public void setSession_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSION_ID_ISSET_ID, value);
    }

    public byte[] getData() {
      setData(org.apache.thrift.TBaseHelper.rightSize(data));
      return data == null ? null : data.array();
    }

    public ByteBuffer bufferForData() {
      return data;
    }

    public resume_args setData(byte[] data) {
      setData(data == null ? (ByteBuffer)null : ByteBuffer.wrap(data));
      return this;
    }

    public resume_args setData(ByteBuffer data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSession_id();
        } else {
          setSession_id((Integer)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return Integer.valueOf(getSession_id());

      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSession_id();
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resume_args)
        return this.equals((resume_args)that);
      return false;
    }

    public boolean equals(resume_args that) {
      if (that == null)
        return false;

      boolean this_present_session_id = true;
      boolean that_present_session_id = true;
      if (this_present_session_id || that_present_session_id) {
        if (!(this_present_session_id && that_present_session_id))
          return false;
        if (this.session_id != that.session_id)
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_session_id = true;
      list.add(present_session_id);
      if (present_session_id)
        list.add(session_id);

      boolean present_data = true && (isSetData());
      list.add(present_data);
      if (present_data)
        list.add(data);

      return list.hashCode();
    }

    @Override
    public int compareTo(resume_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSession_id()).compareTo(other.isSetSession_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session_id, other.session_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("resume_args(");
      boolean first = true;

      sb.append("session_id:");
      sb.append(this.session_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.data, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resume_argsStandardSchemeFactory implements SchemeFactory {
      public resume_argsStandardScheme getScheme() {
        return new resume_argsStandardScheme();
      }
    }

    private static class resume_argsStandardScheme extends StandardScheme<resume_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resume_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.session_id = iprot.readI32();
                struct.setSession_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readBinary();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resume_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeI32(struct.session_id);
        oprot.writeFieldEnd();
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeBinary(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resume_argsTupleSchemeFactory implements SchemeFactory {
      public resume_argsTupleScheme getScheme() {
        return new resume_argsTupleScheme();
      }
    }

    private static class resume_argsTupleScheme extends TupleScheme<resume_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resume_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSession_id()) {
          optionals.set(0);
        }
        if (struct.isSetData()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSession_id()) {
          oprot.writeI32(struct.session_id);
        }
        if (struct.isSetData()) {
          oprot.writeBinary(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resume_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.session_id = iprot.readI32();
          struct.setSession_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.data = iprot.readBinary();
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class result_args implements org.apache.thrift.TBase<result_args, result_args._Fields>, java.io.Serializable, Cloneable, Comparable<result_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("result_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("session_id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new result_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new result_argsTupleSchemeFactory());
    }

    public int session_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "session_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SESSION_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("session_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "SessionId")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(result_args.class, metaDataMap);
    }

    public result_args() {
    }

    public result_args(
      int session_id)
    {
      this();
      this.session_id = session_id;
      setSession_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public result_args(result_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.session_id = other.session_id;
    }

    public result_args deepCopy() {
      return new result_args(this);
    }

    @Override
    public void clear() {
      setSession_idIsSet(false);
      this.session_id = 0;
    }

    public int getSession_id() {
      return this.session_id;
    }

    public result_args setSession_id(int session_id) {
      this.session_id = session_id;
      setSession_idIsSet(true);
      return this;
    }

    public void unsetSession_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSION_ID_ISSET_ID);
    }

    /** Returns true if field session_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSession_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SESSION_ID_ISSET_ID);
    }

    public void setSession_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSION_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSession_id();
        } else {
          setSession_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return Integer.valueOf(getSession_id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSession_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof result_args)
        return this.equals((result_args)that);
      return false;
    }

    public boolean equals(result_args that) {
      if (that == null)
        return false;

      boolean this_present_session_id = true;
      boolean that_present_session_id = true;
      if (this_present_session_id || that_present_session_id) {
        if (!(this_present_session_id && that_present_session_id))
          return false;
        if (this.session_id != that.session_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_session_id = true;
      list.add(present_session_id);
      if (present_session_id)
        list.add(session_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(result_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSession_id()).compareTo(other.isSetSession_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session_id, other.session_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("result_args(");
      boolean first = true;

      sb.append("session_id:");
      sb.append(this.session_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class result_argsStandardSchemeFactory implements SchemeFactory {
      public result_argsStandardScheme getScheme() {
        return new result_argsStandardScheme();
      }
    }

    private static class result_argsStandardScheme extends StandardScheme<result_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, result_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.session_id = iprot.readI32();
                struct.setSession_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, result_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeI32(struct.session_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class result_argsTupleSchemeFactory implements SchemeFactory {
      public result_argsTupleScheme getScheme() {
        return new result_argsTupleScheme();
      }
    }

    private static class result_argsTupleScheme extends TupleScheme<result_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, result_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSession_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSession_id()) {
          oprot.writeI32(struct.session_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, result_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.session_id = iprot.readI32();
          struct.setSession_idIsSet(true);
        }
      }
    }

  }

  public static class result_result implements org.apache.thrift.TBase<result_result, result_result._Fields>, java.io.Serializable, Cloneable, Comparable<result_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("result_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new result_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new result_resultTupleSchemeFactory());
    }

    public Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(result_result.class, metaDataMap);
    }

    public result_result() {
    }

    public result_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public result_result(result_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public result_result deepCopy() {
      return new result_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public Result getSuccess() {
      return this.success;
    }

    public result_result setSuccess(Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof result_result)
        return this.equals((result_result)that);
      return false;
    }

    public boolean equals(result_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(result_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("result_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class result_resultStandardSchemeFactory implements SchemeFactory {
      public result_resultStandardScheme getScheme() {
        return new result_resultStandardScheme();
      }
    }

    private static class result_resultStandardScheme extends StandardScheme<result_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, result_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, result_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class result_resultTupleSchemeFactory implements SchemeFactory {
      public result_resultTupleScheme getScheme() {
        return new result_resultTupleScheme();
      }
    }

    private static class result_resultTupleScheme extends TupleScheme<result_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, result_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, result_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class destroy_session_args implements org.apache.thrift.TBase<destroy_session_args, destroy_session_args._Fields>, java.io.Serializable, Cloneable, Comparable<destroy_session_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("destroy_session_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("session_id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new destroy_session_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new destroy_session_argsTupleSchemeFactory());
    }

    public int session_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "session_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SESSION_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("session_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "SessionId")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(destroy_session_args.class, metaDataMap);
    }

    public destroy_session_args() {
    }

    public destroy_session_args(
      int session_id)
    {
      this();
      this.session_id = session_id;
      setSession_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public destroy_session_args(destroy_session_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.session_id = other.session_id;
    }

    public destroy_session_args deepCopy() {
      return new destroy_session_args(this);
    }

    @Override
    public void clear() {
      setSession_idIsSet(false);
      this.session_id = 0;
    }

    public int getSession_id() {
      return this.session_id;
    }

    public destroy_session_args setSession_id(int session_id) {
      this.session_id = session_id;
      setSession_idIsSet(true);
      return this;
    }

    public void unsetSession_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SESSION_ID_ISSET_ID);
    }

    /** Returns true if field session_id is set (has been assigned a value) and false otherwise */
    public boolean isSetSession_id() {
      return EncodingUtils.testBit(__isset_bitfield, __SESSION_ID_ISSET_ID);
    }

    public void setSession_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SESSION_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSession_id();
        } else {
          setSession_id((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return Integer.valueOf(getSession_id());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSession_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof destroy_session_args)
        return this.equals((destroy_session_args)that);
      return false;
    }

    public boolean equals(destroy_session_args that) {
      if (that == null)
        return false;

      boolean this_present_session_id = true;
      boolean that_present_session_id = true;
      if (this_present_session_id || that_present_session_id) {
        if (!(this_present_session_id && that_present_session_id))
          return false;
        if (this.session_id != that.session_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_session_id = true;
      list.add(present_session_id);
      if (present_session_id)
        list.add(session_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(destroy_session_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSession_id()).compareTo(other.isSetSession_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSession_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.session_id, other.session_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("destroy_session_args(");
      boolean first = true;

      sb.append("session_id:");
      sb.append(this.session_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class destroy_session_argsStandardSchemeFactory implements SchemeFactory {
      public destroy_session_argsStandardScheme getScheme() {
        return new destroy_session_argsStandardScheme();
      }
    }

    private static class destroy_session_argsStandardScheme extends StandardScheme<destroy_session_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, destroy_session_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.session_id = iprot.readI32();
                struct.setSession_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, destroy_session_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeI32(struct.session_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class destroy_session_argsTupleSchemeFactory implements SchemeFactory {
      public destroy_session_argsTupleScheme getScheme() {
        return new destroy_session_argsTupleScheme();
      }
    }

    private static class destroy_session_argsTupleScheme extends TupleScheme<destroy_session_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, destroy_session_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSession_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSession_id()) {
          oprot.writeI32(struct.session_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, destroy_session_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.session_id = iprot.readI32();
          struct.setSession_idIsSet(true);
        }
      }
    }

  }

}

/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.com.investtools.radar.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (1.0.0-dev)", date = "2014-9-27")
public class BarSeries implements org.apache.thrift.TBase<BarSeries, BarSeries._Fields>, java.io.Serializable, Cloneable, Comparable<BarSeries> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BarSeries");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField STACK_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("stack_name", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BarSeriesStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BarSeriesTupleSchemeFactory());
  }

  public String name; // required
  public List<Double> data; // required
  /**
   * Criado na versão 0.2.2.
   * 
   * Só é necessário se <code>BarChart.options.stacked = true</code> e a intenção for agrupar as pilhas.
   */
  public String stack_name; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    DATA((short)2, "data"),
    /**
     * Criado na versão 0.2.2.
     * 
     * Só é necessário se <code>BarChart.options.stacked = true</code> e a intenção for agrupar as pilhas.
     */
    STACK_NAME((short)3, "stack_name");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // DATA
          return DATA;
        case 3: // STACK_NAME
          return STACK_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.STACK_NAME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.STACK_NAME, new org.apache.thrift.meta_data.FieldMetaData("stack_name", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BarSeries.class, metaDataMap);
  }

  public BarSeries() {
  }

  public BarSeries(
    String name,
    List<Double> data)
  {
    this();
    this.name = name;
    this.data = data;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BarSeries(BarSeries other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetData()) {
      List<Double> __this__data = new ArrayList<Double>(other.data);
      this.data = __this__data;
    }
    if (other.isSetStack_name()) {
      this.stack_name = other.stack_name;
    }
  }

  public BarSeries deepCopy() {
    return new BarSeries(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.data = null;
    this.stack_name = null;
  }

  public String getName() {
    return this.name;
  }

  public BarSeries setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getDataSize() {
    return (this.data == null) ? 0 : this.data.size();
  }

  public java.util.Iterator<Double> getDataIterator() {
    return (this.data == null) ? null : this.data.iterator();
  }

  public void addToData(double elem) {
    if (this.data == null) {
      this.data = new ArrayList<Double>();
    }
    this.data.add(elem);
  }

  public List<Double> getData() {
    return this.data;
  }

  public BarSeries setData(List<Double> data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  /**
   * Criado na versão 0.2.2.
   * 
   * Só é necessário se <code>BarChart.options.stacked = true</code> e a intenção for agrupar as pilhas.
   */
  public String getStack_name() {
    return this.stack_name;
  }

  /**
   * Criado na versão 0.2.2.
   * 
   * Só é necessário se <code>BarChart.options.stacked = true</code> e a intenção for agrupar as pilhas.
   */
  public BarSeries setStack_name(String stack_name) {
    this.stack_name = stack_name;
    return this;
  }

  public void unsetStack_name() {
    this.stack_name = null;
  }

  /** Returns true if field stack_name is set (has been assigned a value) and false otherwise */
  public boolean isSetStack_name() {
    return this.stack_name != null;
  }

  public void setStack_nameIsSet(boolean value) {
    if (!value) {
      this.stack_name = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((List<Double>)value);
      }
      break;

    case STACK_NAME:
      if (value == null) {
        unsetStack_name();
      } else {
        setStack_name((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case DATA:
      return getData();

    case STACK_NAME:
      return getStack_name();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case DATA:
      return isSetData();
    case STACK_NAME:
      return isSetStack_name();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BarSeries)
      return this.equals((BarSeries)that);
    return false;
  }

  public boolean equals(BarSeries that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_stack_name = true && this.isSetStack_name();
    boolean that_present_stack_name = true && that.isSetStack_name();
    if (this_present_stack_name || that_present_stack_name) {
      if (!(this_present_stack_name && that_present_stack_name))
        return false;
      if (!this.stack_name.equals(that.stack_name))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_data = true && (isSetData());
    list.add(present_data);
    if (present_data)
      list.add(data);

    boolean present_stack_name = true && (isSetStack_name());
    list.add(present_stack_name);
    if (present_stack_name)
      list.add(stack_name);

    return list.hashCode();
  }

  @Override
  public int compareTo(BarSeries other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStack_name()).compareTo(other.isSetStack_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStack_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stack_name, other.stack_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BarSeries(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      sb.append(this.data);
    }
    first = false;
    if (isSetStack_name()) {
      if (!first) sb.append(", ");
      sb.append("stack_name:");
      if (this.stack_name == null) {
        sb.append("null");
      } else {
        sb.append(this.stack_name);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BarSeriesStandardSchemeFactory implements SchemeFactory {
    public BarSeriesStandardScheme getScheme() {
      return new BarSeriesStandardScheme();
    }
  }

  private static class BarSeriesStandardScheme extends StandardScheme<BarSeries> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BarSeries struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.data = new ArrayList<Double>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  double _elem26;
                  _elem26 = iprot.readDouble();
                  struct.data.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STACK_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stack_name = iprot.readString();
              struct.setStack_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BarSeries struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, struct.data.size()));
          for (double _iter27 : struct.data)
          {
            oprot.writeDouble(_iter27);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.stack_name != null) {
        if (struct.isSetStack_name()) {
          oprot.writeFieldBegin(STACK_NAME_FIELD_DESC);
          oprot.writeString(struct.stack_name);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BarSeriesTupleSchemeFactory implements SchemeFactory {
    public BarSeriesTupleScheme getScheme() {
      return new BarSeriesTupleScheme();
    }
  }

  private static class BarSeriesTupleScheme extends TupleScheme<BarSeries> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BarSeries struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetData()) {
        optionals.set(1);
      }
      if (struct.isSetStack_name()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetData()) {
        {
          oprot.writeI32(struct.data.size());
          for (double _iter28 : struct.data)
          {
            oprot.writeDouble(_iter28);
          }
        }
      }
      if (struct.isSetStack_name()) {
        oprot.writeString(struct.stack_name);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BarSeries struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.data = new ArrayList<Double>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            double _elem31;
            _elem31 = iprot.readDouble();
            struct.data.add(_elem31);
          }
        }
        struct.setDataIsSet(true);
      }
      if (incoming.get(2)) {
        struct.stack_name = iprot.readString();
        struct.setStack_nameIsSet(true);
      }
    }
  }

}


/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.com.investtools.radar.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class IndexService {

  public interface Iface {

    public java.util.List<Price> prices(java.lang.String symbol, long start_date, long end_date) throws org.apache.thrift.TException;

    public double price(java.lang.String symbol, long date) throws org.apache.thrift.TException;

    public double price_change(java.lang.String symbol, long start_date, long end_date) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void prices(java.lang.String symbol, long start_date, long end_date, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Price>> resultHandler) throws org.apache.thrift.TException;

    public void price(java.lang.String symbol, long date, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException;

    public void price_change(java.lang.String symbol, long start_date, long end_date, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.List<Price> prices(java.lang.String symbol, long start_date, long end_date) throws org.apache.thrift.TException
    {
      send_prices(symbol, start_date, end_date);
      return recv_prices();
    }

    public void send_prices(java.lang.String symbol, long start_date, long end_date) throws org.apache.thrift.TException
    {
      prices_args args = new prices_args();
      args.setSymbol(symbol);
      args.setStart_date(start_date);
      args.setEnd_date(end_date);
      sendBase("prices", args);
    }

    public java.util.List<Price> recv_prices() throws org.apache.thrift.TException
    {
      prices_result result = new prices_result();
      receiveBase(result, "prices");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "prices failed: unknown result");
    }

    public double price(java.lang.String symbol, long date) throws org.apache.thrift.TException
    {
      send_price(symbol, date);
      return recv_price();
    }

    public void send_price(java.lang.String symbol, long date) throws org.apache.thrift.TException
    {
      price_args args = new price_args();
      args.setSymbol(symbol);
      args.setDate(date);
      sendBase("price", args);
    }

    public double recv_price() throws org.apache.thrift.TException
    {
      price_result result = new price_result();
      receiveBase(result, "price");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "price failed: unknown result");
    }

    public double price_change(java.lang.String symbol, long start_date, long end_date) throws org.apache.thrift.TException
    {
      send_price_change(symbol, start_date, end_date);
      return recv_price_change();
    }

    public void send_price_change(java.lang.String symbol, long start_date, long end_date) throws org.apache.thrift.TException
    {
      price_change_args args = new price_change_args();
      args.setSymbol(symbol);
      args.setStart_date(start_date);
      args.setEnd_date(end_date);
      sendBase("price_change", args);
    }

    public double recv_price_change() throws org.apache.thrift.TException
    {
      price_change_result result = new price_change_result();
      receiveBase(result, "price_change");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "price_change failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void prices(java.lang.String symbol, long start_date, long end_date, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Price>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      prices_call method_call = new prices_call(symbol, start_date, end_date, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class prices_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<Price>> {
      private java.lang.String symbol;
      private long start_date;
      private long end_date;
      public prices_call(java.lang.String symbol, long start_date, long end_date, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Price>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.symbol = symbol;
        this.start_date = start_date;
        this.end_date = end_date;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("prices", org.apache.thrift.protocol.TMessageType.CALL, 0));
        prices_args args = new prices_args();
        args.setSymbol(symbol);
        args.setStart_date(start_date);
        args.setEnd_date(end_date);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<Price> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_prices();
      }
    }

    public void price(java.lang.String symbol, long date, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      price_call method_call = new price_call(symbol, date, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class price_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Double> {
      private java.lang.String symbol;
      private long date;
      public price_call(java.lang.String symbol, long date, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.symbol = symbol;
        this.date = date;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("price", org.apache.thrift.protocol.TMessageType.CALL, 0));
        price_args args = new price_args();
        args.setSymbol(symbol);
        args.setDate(date);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_price();
      }
    }

    public void price_change(java.lang.String symbol, long start_date, long end_date, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      price_change_call method_call = new price_change_call(symbol, start_date, end_date, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class price_change_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Double> {
      private java.lang.String symbol;
      private long start_date;
      private long end_date;
      public price_change_call(java.lang.String symbol, long start_date, long end_date, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.symbol = symbol;
        this.start_date = start_date;
        this.end_date = end_date;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("price_change", org.apache.thrift.protocol.TMessageType.CALL, 0));
        price_change_args args = new price_change_args();
        args.setSymbol(symbol);
        args.setStart_date(start_date);
        args.setEnd_date(end_date);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_price_change();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("prices", new prices());
      processMap.put("price", new price());
      processMap.put("price_change", new price_change());
      return processMap;
    }

    public static class prices<I extends Iface> extends org.apache.thrift.ProcessFunction<I, prices_args> {
      public prices() {
        super("prices");
      }

      public prices_args getEmptyArgsInstance() {
        return new prices_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public prices_result getResult(I iface, prices_args args) throws org.apache.thrift.TException {
        prices_result result = new prices_result();
        result.success = iface.prices(args.symbol, args.start_date, args.end_date);
        return result;
      }
    }

    public static class price<I extends Iface> extends org.apache.thrift.ProcessFunction<I, price_args> {
      public price() {
        super("price");
      }

      public price_args getEmptyArgsInstance() {
        return new price_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public price_result getResult(I iface, price_args args) throws org.apache.thrift.TException {
        price_result result = new price_result();
        result.success = iface.price(args.symbol, args.date);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class price_change<I extends Iface> extends org.apache.thrift.ProcessFunction<I, price_change_args> {
      public price_change() {
        super("price_change");
      }

      public price_change_args getEmptyArgsInstance() {
        return new price_change_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public price_change_result getResult(I iface, price_change_args args) throws org.apache.thrift.TException {
        price_change_result result = new price_change_result();
        result.success = iface.price_change(args.symbol, args.start_date, args.end_date);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("prices", new prices());
      processMap.put("price", new price());
      processMap.put("price_change", new price_change());
      return processMap;
    }

    public static class prices<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, prices_args, java.util.List<Price>> {
      public prices() {
        super("prices");
      }

      public prices_args getEmptyArgsInstance() {
        return new prices_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<Price>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<Price>>() { 
          public void onComplete(java.util.List<Price> o) {
            prices_result result = new prices_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            prices_result result = new prices_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, prices_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<Price>> resultHandler) throws org.apache.thrift.TException {
        iface.prices(args.symbol, args.start_date, args.end_date,resultHandler);
      }
    }

    public static class price<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, price_args, java.lang.Double> {
      public price() {
        super("price");
      }

      public price_args getEmptyArgsInstance() {
        return new price_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Double>() { 
          public void onComplete(java.lang.Double o) {
            price_result result = new price_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            price_result result = new price_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, price_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
        iface.price(args.symbol, args.date,resultHandler);
      }
    }

    public static class price_change<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, price_change_args, java.lang.Double> {
      public price_change() {
        super("price_change");
      }

      public price_change_args getEmptyArgsInstance() {
        return new price_change_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Double>() { 
          public void onComplete(java.lang.Double o) {
            price_change_result result = new price_change_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            price_change_result result = new price_change_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, price_change_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
        iface.price_change(args.symbol, args.start_date, args.end_date,resultHandler);
      }
    }

  }

  public static class prices_args implements org.apache.thrift.TBase<prices_args, prices_args._Fields>, java.io.Serializable, Cloneable, Comparable<prices_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prices_args");

    private static final org.apache.thrift.protocol.TField SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("symbol", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("start_date", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("end_date", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new prices_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new prices_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String symbol; // required
    public long start_date; // required
    public long end_date; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYMBOL((short)1, "symbol"),
      START_DATE((short)2, "start_date"),
      END_DATE((short)3, "end_date");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYMBOL
            return SYMBOL;
          case 2: // START_DATE
            return START_DATE;
          case 3: // END_DATE
            return END_DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_DATE_ISSET_ID = 0;
    private static final int __END_DATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("symbol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("start_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Date")));
      tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("end_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Date")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prices_args.class, metaDataMap);
    }

    public prices_args() {
    }

    public prices_args(
      java.lang.String symbol,
      long start_date,
      long end_date)
    {
      this();
      this.symbol = symbol;
      this.start_date = start_date;
      setStart_dateIsSet(true);
      this.end_date = end_date;
      setEnd_dateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prices_args(prices_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSymbol()) {
        this.symbol = other.symbol;
      }
      this.start_date = other.start_date;
      this.end_date = other.end_date;
    }

    public prices_args deepCopy() {
      return new prices_args(this);
    }

    @Override
    public void clear() {
      this.symbol = null;
      setStart_dateIsSet(false);
      this.start_date = 0;
      setEnd_dateIsSet(false);
      this.end_date = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSymbol() {
      return this.symbol;
    }

    public prices_args setSymbol(@org.apache.thrift.annotation.Nullable java.lang.String symbol) {
      this.symbol = symbol;
      return this;
    }

    public void unsetSymbol() {
      this.symbol = null;
    }

    /** Returns true if field symbol is set (has been assigned a value) and false otherwise */
    public boolean isSetSymbol() {
      return this.symbol != null;
    }

    public void setSymbolIsSet(boolean value) {
      if (!value) {
        this.symbol = null;
      }
    }

    public long getStart_date() {
      return this.start_date;
    }

    public prices_args setStart_date(long start_date) {
      this.start_date = start_date;
      setStart_dateIsSet(true);
      return this;
    }

    public void unsetStart_date() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_DATE_ISSET_ID);
    }

    /** Returns true if field start_date is set (has been assigned a value) and false otherwise */
    public boolean isSetStart_date() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_DATE_ISSET_ID);
    }

    public void setStart_dateIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_DATE_ISSET_ID, value);
    }

    public long getEnd_date() {
      return this.end_date;
    }

    public prices_args setEnd_date(long end_date) {
      this.end_date = end_date;
      setEnd_dateIsSet(true);
      return this;
    }

    public void unsetEnd_date() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __END_DATE_ISSET_ID);
    }

    /** Returns true if field end_date is set (has been assigned a value) and false otherwise */
    public boolean isSetEnd_date() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __END_DATE_ISSET_ID);
    }

    public void setEnd_dateIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __END_DATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SYMBOL:
        if (value == null) {
          unsetSymbol();
        } else {
          setSymbol((java.lang.String)value);
        }
        break;

      case START_DATE:
        if (value == null) {
          unsetStart_date();
        } else {
          setStart_date((java.lang.Long)value);
        }
        break;

      case END_DATE:
        if (value == null) {
          unsetEnd_date();
        } else {
          setEnd_date((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SYMBOL:
        return getSymbol();

      case START_DATE:
        return getStart_date();

      case END_DATE:
        return getEnd_date();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SYMBOL:
        return isSetSymbol();
      case START_DATE:
        return isSetStart_date();
      case END_DATE:
        return isSetEnd_date();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof prices_args)
        return this.equals((prices_args)that);
      return false;
    }

    public boolean equals(prices_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_symbol = true && this.isSetSymbol();
      boolean that_present_symbol = true && that.isSetSymbol();
      if (this_present_symbol || that_present_symbol) {
        if (!(this_present_symbol && that_present_symbol))
          return false;
        if (!this.symbol.equals(that.symbol))
          return false;
      }

      boolean this_present_start_date = true;
      boolean that_present_start_date = true;
      if (this_present_start_date || that_present_start_date) {
        if (!(this_present_start_date && that_present_start_date))
          return false;
        if (this.start_date != that.start_date)
          return false;
      }

      boolean this_present_end_date = true;
      boolean that_present_end_date = true;
      if (this_present_end_date || that_present_end_date) {
        if (!(this_present_end_date && that_present_end_date))
          return false;
        if (this.end_date != that.end_date)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSymbol()) ? 131071 : 524287);
      if (isSetSymbol())
        hashCode = hashCode * 8191 + symbol.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(start_date);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(end_date);

      return hashCode;
    }

    @Override
    public int compareTo(prices_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSymbol()).compareTo(other.isSetSymbol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSymbol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symbol, other.symbol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStart_date()).compareTo(other.isSetStart_date());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart_date()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_date, other.start_date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEnd_date()).compareTo(other.isSetEnd_date());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnd_date()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_date, other.end_date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("prices_args(");
      boolean first = true;

      sb.append("symbol:");
      if (this.symbol == null) {
        sb.append("null");
      } else {
        sb.append(this.symbol);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start_date:");
      sb.append(this.start_date);
      first = false;
      if (!first) sb.append(", ");
      sb.append("end_date:");
      sb.append(this.end_date);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class prices_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public prices_argsStandardScheme getScheme() {
        return new prices_argsStandardScheme();
      }
    }

    private static class prices_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<prices_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, prices_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYMBOL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.symbol = iprot.readString();
                struct.setSymbolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start_date = iprot.readI64();
                struct.setStart_dateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.end_date = iprot.readI64();
                struct.setEnd_dateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, prices_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.symbol != null) {
          oprot.writeFieldBegin(SYMBOL_FIELD_DESC);
          oprot.writeString(struct.symbol);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeI64(struct.start_date);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeI64(struct.end_date);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class prices_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public prices_argsTupleScheme getScheme() {
        return new prices_argsTupleScheme();
      }
    }

    private static class prices_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<prices_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, prices_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSymbol()) {
          optionals.set(0);
        }
        if (struct.isSetStart_date()) {
          optionals.set(1);
        }
        if (struct.isSetEnd_date()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSymbol()) {
          oprot.writeString(struct.symbol);
        }
        if (struct.isSetStart_date()) {
          oprot.writeI64(struct.start_date);
        }
        if (struct.isSetEnd_date()) {
          oprot.writeI64(struct.end_date);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, prices_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.symbol = iprot.readString();
          struct.setSymbolIsSet(true);
        }
        if (incoming.get(1)) {
          struct.start_date = iprot.readI64();
          struct.setStart_dateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.end_date = iprot.readI64();
          struct.setEnd_dateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class prices_result implements org.apache.thrift.TBase<prices_result, prices_result._Fields>, java.io.Serializable, Cloneable, Comparable<prices_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prices_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new prices_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new prices_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.util.List<Price> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Price.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prices_result.class, metaDataMap);
    }

    public prices_result() {
    }

    public prices_result(
      java.util.List<Price> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public prices_result(prices_result other) {
      if (other.isSetSuccess()) {
        java.util.List<Price> __this__success = new java.util.ArrayList<Price>(other.success.size());
        for (Price other_element : other.success) {
          __this__success.add(new Price(other_element));
        }
        this.success = __this__success;
      }
    }

    public prices_result deepCopy() {
      return new prices_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<Price> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Price elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<Price>();
      }
      this.success.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<Price> getSuccess() {
      return this.success;
    }

    public prices_result setSuccess(@org.apache.thrift.annotation.Nullable java.util.List<Price> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<Price>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof prices_result)
        return this.equals((prices_result)that);
      return false;
    }

    public boolean equals(prices_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(prices_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("prices_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class prices_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public prices_resultStandardScheme getScheme() {
        return new prices_resultStandardScheme();
      }
    }

    private static class prices_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<prices_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, prices_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<Price>(_list56.size);
                  @org.apache.thrift.annotation.Nullable Price _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new Price();
                    _elem57.read(iprot);
                    struct.success.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, prices_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Price _iter59 : struct.success)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class prices_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public prices_resultTupleScheme getScheme() {
        return new prices_resultTupleScheme();
      }
    }

    private static class prices_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<prices_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, prices_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Price _iter60 : struct.success)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, prices_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<Price>(_list61.size);
            @org.apache.thrift.annotation.Nullable Price _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new Price();
              _elem62.read(iprot);
              struct.success.add(_elem62);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class price_args implements org.apache.thrift.TBase<price_args, price_args._Fields>, java.io.Serializable, Cloneable, Comparable<price_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("price_args");

    private static final org.apache.thrift.protocol.TField SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("symbol", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new price_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new price_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String symbol; // required
    public long date; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYMBOL((short)1, "symbol"),
      DATE((short)2, "date");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYMBOL
            return SYMBOL;
          case 2: // DATE
            return DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("symbol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Date")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(price_args.class, metaDataMap);
    }

    public price_args() {
    }

    public price_args(
      java.lang.String symbol,
      long date)
    {
      this();
      this.symbol = symbol;
      this.date = date;
      setDateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public price_args(price_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSymbol()) {
        this.symbol = other.symbol;
      }
      this.date = other.date;
    }

    public price_args deepCopy() {
      return new price_args(this);
    }

    @Override
    public void clear() {
      this.symbol = null;
      setDateIsSet(false);
      this.date = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSymbol() {
      return this.symbol;
    }

    public price_args setSymbol(@org.apache.thrift.annotation.Nullable java.lang.String symbol) {
      this.symbol = symbol;
      return this;
    }

    public void unsetSymbol() {
      this.symbol = null;
    }

    /** Returns true if field symbol is set (has been assigned a value) and false otherwise */
    public boolean isSetSymbol() {
      return this.symbol != null;
    }

    public void setSymbolIsSet(boolean value) {
      if (!value) {
        this.symbol = null;
      }
    }

    public long getDate() {
      return this.date;
    }

    public price_args setDate(long date) {
      this.date = date;
      setDateIsSet(true);
      return this;
    }

    public void unsetDate() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    public void setDateIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SYMBOL:
        if (value == null) {
          unsetSymbol();
        } else {
          setSymbol((java.lang.String)value);
        }
        break;

      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SYMBOL:
        return getSymbol();

      case DATE:
        return getDate();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SYMBOL:
        return isSetSymbol();
      case DATE:
        return isSetDate();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof price_args)
        return this.equals((price_args)that);
      return false;
    }

    public boolean equals(price_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_symbol = true && this.isSetSymbol();
      boolean that_present_symbol = true && that.isSetSymbol();
      if (this_present_symbol || that_present_symbol) {
        if (!(this_present_symbol && that_present_symbol))
          return false;
        if (!this.symbol.equals(that.symbol))
          return false;
      }

      boolean this_present_date = true;
      boolean that_present_date = true;
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (this.date != that.date)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSymbol()) ? 131071 : 524287);
      if (isSetSymbol())
        hashCode = hashCode * 8191 + symbol.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(date);

      return hashCode;
    }

    @Override
    public int compareTo(price_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSymbol()).compareTo(other.isSetSymbol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSymbol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symbol, other.symbol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("price_args(");
      boolean first = true;

      sb.append("symbol:");
      if (this.symbol == null) {
        sb.append("null");
      } else {
        sb.append(this.symbol);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("date:");
      sb.append(this.date);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class price_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public price_argsStandardScheme getScheme() {
        return new price_argsStandardScheme();
      }
    }

    private static class price_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<price_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, price_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYMBOL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.symbol = iprot.readString();
                struct.setSymbolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.date = iprot.readI64();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, price_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.symbol != null) {
          oprot.writeFieldBegin(SYMBOL_FIELD_DESC);
          oprot.writeString(struct.symbol);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeI64(struct.date);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class price_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public price_argsTupleScheme getScheme() {
        return new price_argsTupleScheme();
      }
    }

    private static class price_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<price_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, price_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSymbol()) {
          optionals.set(0);
        }
        if (struct.isSetDate()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSymbol()) {
          oprot.writeString(struct.symbol);
        }
        if (struct.isSetDate()) {
          oprot.writeI64(struct.date);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, price_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.symbol = iprot.readString();
          struct.setSymbolIsSet(true);
        }
        if (incoming.get(1)) {
          struct.date = iprot.readI64();
          struct.setDateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class price_result implements org.apache.thrift.TBase<price_result, price_result._Fields>, java.io.Serializable, Cloneable, Comparable<price_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("price_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new price_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new price_resultTupleSchemeFactory();

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(price_result.class, metaDataMap);
    }

    public price_result() {
    }

    public price_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public price_result(price_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public price_result deepCopy() {
      return new price_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public price_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Double)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof price_result)
        return this.equals((price_result)that);
      return false;
    }

    public boolean equals(price_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(price_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("price_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class price_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public price_resultStandardScheme getScheme() {
        return new price_resultStandardScheme();
      }
    }

    private static class price_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<price_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, price_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, price_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class price_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public price_resultTupleScheme getScheme() {
        return new price_resultTupleScheme();
      }
    }

    private static class price_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<price_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, price_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, price_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class price_change_args implements org.apache.thrift.TBase<price_change_args, price_change_args._Fields>, java.io.Serializable, Cloneable, Comparable<price_change_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("price_change_args");

    private static final org.apache.thrift.protocol.TField SYMBOL_FIELD_DESC = new org.apache.thrift.protocol.TField("symbol", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("start_date", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("end_date", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new price_change_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new price_change_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String symbol; // required
    public long start_date; // required
    public long end_date; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYMBOL((short)1, "symbol"),
      START_DATE((short)2, "start_date"),
      END_DATE((short)3, "end_date");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYMBOL
            return SYMBOL;
          case 2: // START_DATE
            return START_DATE;
          case 3: // END_DATE
            return END_DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __START_DATE_ISSET_ID = 0;
    private static final int __END_DATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYMBOL, new org.apache.thrift.meta_data.FieldMetaData("symbol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_DATE, new org.apache.thrift.meta_data.FieldMetaData("start_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Date")));
      tmpMap.put(_Fields.END_DATE, new org.apache.thrift.meta_data.FieldMetaData("end_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "Date")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(price_change_args.class, metaDataMap);
    }

    public price_change_args() {
    }

    public price_change_args(
      java.lang.String symbol,
      long start_date,
      long end_date)
    {
      this();
      this.symbol = symbol;
      this.start_date = start_date;
      setStart_dateIsSet(true);
      this.end_date = end_date;
      setEnd_dateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public price_change_args(price_change_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSymbol()) {
        this.symbol = other.symbol;
      }
      this.start_date = other.start_date;
      this.end_date = other.end_date;
    }

    public price_change_args deepCopy() {
      return new price_change_args(this);
    }

    @Override
    public void clear() {
      this.symbol = null;
      setStart_dateIsSet(false);
      this.start_date = 0;
      setEnd_dateIsSet(false);
      this.end_date = 0;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSymbol() {
      return this.symbol;
    }

    public price_change_args setSymbol(@org.apache.thrift.annotation.Nullable java.lang.String symbol) {
      this.symbol = symbol;
      return this;
    }

    public void unsetSymbol() {
      this.symbol = null;
    }

    /** Returns true if field symbol is set (has been assigned a value) and false otherwise */
    public boolean isSetSymbol() {
      return this.symbol != null;
    }

    public void setSymbolIsSet(boolean value) {
      if (!value) {
        this.symbol = null;
      }
    }

    public long getStart_date() {
      return this.start_date;
    }

    public price_change_args setStart_date(long start_date) {
      this.start_date = start_date;
      setStart_dateIsSet(true);
      return this;
    }

    public void unsetStart_date() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_DATE_ISSET_ID);
    }

    /** Returns true if field start_date is set (has been assigned a value) and false otherwise */
    public boolean isSetStart_date() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_DATE_ISSET_ID);
    }

    public void setStart_dateIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_DATE_ISSET_ID, value);
    }

    public long getEnd_date() {
      return this.end_date;
    }

    public price_change_args setEnd_date(long end_date) {
      this.end_date = end_date;
      setEnd_dateIsSet(true);
      return this;
    }

    public void unsetEnd_date() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __END_DATE_ISSET_ID);
    }

    /** Returns true if field end_date is set (has been assigned a value) and false otherwise */
    public boolean isSetEnd_date() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __END_DATE_ISSET_ID);
    }

    public void setEnd_dateIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __END_DATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SYMBOL:
        if (value == null) {
          unsetSymbol();
        } else {
          setSymbol((java.lang.String)value);
        }
        break;

      case START_DATE:
        if (value == null) {
          unsetStart_date();
        } else {
          setStart_date((java.lang.Long)value);
        }
        break;

      case END_DATE:
        if (value == null) {
          unsetEnd_date();
        } else {
          setEnd_date((java.lang.Long)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SYMBOL:
        return getSymbol();

      case START_DATE:
        return getStart_date();

      case END_DATE:
        return getEnd_date();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SYMBOL:
        return isSetSymbol();
      case START_DATE:
        return isSetStart_date();
      case END_DATE:
        return isSetEnd_date();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof price_change_args)
        return this.equals((price_change_args)that);
      return false;
    }

    public boolean equals(price_change_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_symbol = true && this.isSetSymbol();
      boolean that_present_symbol = true && that.isSetSymbol();
      if (this_present_symbol || that_present_symbol) {
        if (!(this_present_symbol && that_present_symbol))
          return false;
        if (!this.symbol.equals(that.symbol))
          return false;
      }

      boolean this_present_start_date = true;
      boolean that_present_start_date = true;
      if (this_present_start_date || that_present_start_date) {
        if (!(this_present_start_date && that_present_start_date))
          return false;
        if (this.start_date != that.start_date)
          return false;
      }

      boolean this_present_end_date = true;
      boolean that_present_end_date = true;
      if (this_present_end_date || that_present_end_date) {
        if (!(this_present_end_date && that_present_end_date))
          return false;
        if (this.end_date != that.end_date)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSymbol()) ? 131071 : 524287);
      if (isSetSymbol())
        hashCode = hashCode * 8191 + symbol.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(start_date);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(end_date);

      return hashCode;
    }

    @Override
    public int compareTo(price_change_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSymbol()).compareTo(other.isSetSymbol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSymbol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.symbol, other.symbol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStart_date()).compareTo(other.isSetStart_date());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart_date()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start_date, other.start_date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEnd_date()).compareTo(other.isSetEnd_date());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnd_date()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_date, other.end_date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("price_change_args(");
      boolean first = true;

      sb.append("symbol:");
      if (this.symbol == null) {
        sb.append("null");
      } else {
        sb.append(this.symbol);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start_date:");
      sb.append(this.start_date);
      first = false;
      if (!first) sb.append(", ");
      sb.append("end_date:");
      sb.append(this.end_date);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class price_change_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public price_change_argsStandardScheme getScheme() {
        return new price_change_argsStandardScheme();
      }
    }

    private static class price_change_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<price_change_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, price_change_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYMBOL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.symbol = iprot.readString();
                struct.setSymbolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.start_date = iprot.readI64();
                struct.setStart_dateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // END_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.end_date = iprot.readI64();
                struct.setEnd_dateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, price_change_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.symbol != null) {
          oprot.writeFieldBegin(SYMBOL_FIELD_DESC);
          oprot.writeString(struct.symbol);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_DATE_FIELD_DESC);
        oprot.writeI64(struct.start_date);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_DATE_FIELD_DESC);
        oprot.writeI64(struct.end_date);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class price_change_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public price_change_argsTupleScheme getScheme() {
        return new price_change_argsTupleScheme();
      }
    }

    private static class price_change_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<price_change_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, price_change_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSymbol()) {
          optionals.set(0);
        }
        if (struct.isSetStart_date()) {
          optionals.set(1);
        }
        if (struct.isSetEnd_date()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSymbol()) {
          oprot.writeString(struct.symbol);
        }
        if (struct.isSetStart_date()) {
          oprot.writeI64(struct.start_date);
        }
        if (struct.isSetEnd_date()) {
          oprot.writeI64(struct.end_date);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, price_change_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.symbol = iprot.readString();
          struct.setSymbolIsSet(true);
        }
        if (incoming.get(1)) {
          struct.start_date = iprot.readI64();
          struct.setStart_dateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.end_date = iprot.readI64();
          struct.setEnd_dateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class price_change_result implements org.apache.thrift.TBase<price_change_result, price_change_result._Fields>, java.io.Serializable, Cloneable, Comparable<price_change_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("price_change_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new price_change_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new price_change_resultTupleSchemeFactory();

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(price_change_result.class, metaDataMap);
    }

    public price_change_result() {
    }

    public price_change_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public price_change_result(price_change_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public price_change_result deepCopy() {
      return new price_change_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public price_change_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Double)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof price_change_result)
        return this.equals((price_change_result)that);
      return false;
    }

    public boolean equals(price_change_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(price_change_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("price_change_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class price_change_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public price_change_resultStandardScheme getScheme() {
        return new price_change_resultStandardScheme();
      }
    }

    private static class price_change_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<price_change_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, price_change_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, price_change_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class price_change_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public price_change_resultTupleScheme getScheme() {
        return new price_change_resultTupleScheme();
      }
    }

    private static class price_change_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<price_change_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, price_change_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, price_change_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}

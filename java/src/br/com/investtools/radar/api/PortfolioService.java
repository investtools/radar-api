/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.com.investtools.radar.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class PortfolioService {

  public interface Iface {

    public java.util.List<MonthlyPosition> run_portfolio(java.util.List<br.com.investtools.radar.api.Transaction> trxs, java.util.List<java.lang.Long> reports_dates, java.lang.String user, java.lang.String portfolio) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void run_portfolio(java.util.List<br.com.investtools.radar.api.Transaction> trxs, java.util.List<java.lang.Long> reports_dates, java.lang.String user, java.lang.String portfolio, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MonthlyPosition>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.List<MonthlyPosition> run_portfolio(java.util.List<br.com.investtools.radar.api.Transaction> trxs, java.util.List<java.lang.Long> reports_dates, java.lang.String user, java.lang.String portfolio) throws org.apache.thrift.TException
    {
      send_run_portfolio(trxs, reports_dates, user, portfolio);
      return recv_run_portfolio();
    }

    public void send_run_portfolio(java.util.List<br.com.investtools.radar.api.Transaction> trxs, java.util.List<java.lang.Long> reports_dates, java.lang.String user, java.lang.String portfolio) throws org.apache.thrift.TException
    {
      run_portfolio_args args = new run_portfolio_args();
      args.setTrxs(trxs);
      args.setReports_dates(reports_dates);
      args.setUser(user);
      args.setPortfolio(portfolio);
      sendBase("run_portfolio", args);
    }

    public java.util.List<MonthlyPosition> recv_run_portfolio() throws org.apache.thrift.TException
    {
      run_portfolio_result result = new run_portfolio_result();
      receiveBase(result, "run_portfolio");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "run_portfolio failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void run_portfolio(java.util.List<br.com.investtools.radar.api.Transaction> trxs, java.util.List<java.lang.Long> reports_dates, java.lang.String user, java.lang.String portfolio, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MonthlyPosition>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      run_portfolio_call method_call = new run_portfolio_call(trxs, reports_dates, user, portfolio, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class run_portfolio_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<MonthlyPosition>> {
      private java.util.List<br.com.investtools.radar.api.Transaction> trxs;
      private java.util.List<java.lang.Long> reports_dates;
      private java.lang.String user;
      private java.lang.String portfolio;
      public run_portfolio_call(java.util.List<br.com.investtools.radar.api.Transaction> trxs, java.util.List<java.lang.Long> reports_dates, java.lang.String user, java.lang.String portfolio, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MonthlyPosition>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.trxs = trxs;
        this.reports_dates = reports_dates;
        this.user = user;
        this.portfolio = portfolio;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("run_portfolio", org.apache.thrift.protocol.TMessageType.CALL, 0));
        run_portfolio_args args = new run_portfolio_args();
        args.setTrxs(trxs);
        args.setReports_dates(reports_dates);
        args.setUser(user);
        args.setPortfolio(portfolio);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<MonthlyPosition> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_run_portfolio();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("run_portfolio", new run_portfolio());
      return processMap;
    }

    public static class run_portfolio<I extends Iface> extends org.apache.thrift.ProcessFunction<I, run_portfolio_args> {
      public run_portfolio() {
        super("run_portfolio");
      }

      public run_portfolio_args getEmptyArgsInstance() {
        return new run_portfolio_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public run_portfolio_result getResult(I iface, run_portfolio_args args) throws org.apache.thrift.TException {
        run_portfolio_result result = new run_portfolio_result();
        result.success = iface.run_portfolio(args.trxs, args.reports_dates, args.user, args.portfolio);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("run_portfolio", new run_portfolio());
      return processMap;
    }

    public static class run_portfolio<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, run_portfolio_args, java.util.List<MonthlyPosition>> {
      public run_portfolio() {
        super("run_portfolio");
      }

      public run_portfolio_args getEmptyArgsInstance() {
        return new run_portfolio_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<MonthlyPosition>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<MonthlyPosition>>() { 
          public void onComplete(java.util.List<MonthlyPosition> o) {
            run_portfolio_result result = new run_portfolio_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            run_portfolio_result result = new run_portfolio_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, run_portfolio_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<MonthlyPosition>> resultHandler) throws org.apache.thrift.TException {
        iface.run_portfolio(args.trxs, args.reports_dates, args.user, args.portfolio,resultHandler);
      }
    }

  }

  public static class run_portfolio_args implements org.apache.thrift.TBase<run_portfolio_args, run_portfolio_args._Fields>, java.io.Serializable, Cloneable, Comparable<run_portfolio_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("run_portfolio_args");

    private static final org.apache.thrift.protocol.TField TRXS_FIELD_DESC = new org.apache.thrift.protocol.TField("trxs", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField REPORTS_DATES_FIELD_DESC = new org.apache.thrift.protocol.TField("reports_dates", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PORTFOLIO_FIELD_DESC = new org.apache.thrift.protocol.TField("portfolio", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new run_portfolio_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new run_portfolio_argsTupleSchemeFactory();

    public java.util.List<br.com.investtools.radar.api.Transaction> trxs; // required
    public java.util.List<java.lang.Long> reports_dates; // required
    public java.lang.String user; // required
    public java.lang.String portfolio; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRXS((short)1, "trxs"),
      REPORTS_DATES((short)2, "reports_dates"),
      USER((short)3, "user"),
      PORTFOLIO((short)4, "portfolio");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRXS
            return TRXS;
          case 2: // REPORTS_DATES
            return REPORTS_DATES;
          case 3: // USER
            return USER;
          case 4: // PORTFOLIO
            return PORTFOLIO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRXS, new org.apache.thrift.meta_data.FieldMetaData("trxs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, br.com.investtools.radar.api.Transaction.class))));
      tmpMap.put(_Fields.REPORTS_DATES, new org.apache.thrift.meta_data.FieldMetaData("reports_dates", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64              , "Date"))));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORTFOLIO, new org.apache.thrift.meta_data.FieldMetaData("portfolio", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(run_portfolio_args.class, metaDataMap);
    }

    public run_portfolio_args() {
    }

    public run_portfolio_args(
      java.util.List<br.com.investtools.radar.api.Transaction> trxs,
      java.util.List<java.lang.Long> reports_dates,
      java.lang.String user,
      java.lang.String portfolio)
    {
      this();
      this.trxs = trxs;
      this.reports_dates = reports_dates;
      this.user = user;
      this.portfolio = portfolio;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public run_portfolio_args(run_portfolio_args other) {
      if (other.isSetTrxs()) {
        java.util.List<br.com.investtools.radar.api.Transaction> __this__trxs = new java.util.ArrayList<br.com.investtools.radar.api.Transaction>(other.trxs.size());
        for (br.com.investtools.radar.api.Transaction other_element : other.trxs) {
          __this__trxs.add(new br.com.investtools.radar.api.Transaction(other_element));
        }
        this.trxs = __this__trxs;
      }
      if (other.isSetReports_dates()) {
        java.util.List<java.lang.Long> __this__reports_dates = new java.util.ArrayList<java.lang.Long>(other.reports_dates.size());
        for (java.lang.Long other_element : other.reports_dates) {
          __this__reports_dates.add(other_element);
        }
        this.reports_dates = __this__reports_dates;
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetPortfolio()) {
        this.portfolio = other.portfolio;
      }
    }

    public run_portfolio_args deepCopy() {
      return new run_portfolio_args(this);
    }

    @Override
    public void clear() {
      this.trxs = null;
      this.reports_dates = null;
      this.user = null;
      this.portfolio = null;
    }

    public int getTrxsSize() {
      return (this.trxs == null) ? 0 : this.trxs.size();
    }

    public java.util.Iterator<br.com.investtools.radar.api.Transaction> getTrxsIterator() {
      return (this.trxs == null) ? null : this.trxs.iterator();
    }

    public void addToTrxs(br.com.investtools.radar.api.Transaction elem) {
      if (this.trxs == null) {
        this.trxs = new java.util.ArrayList<br.com.investtools.radar.api.Transaction>();
      }
      this.trxs.add(elem);
    }

    public java.util.List<br.com.investtools.radar.api.Transaction> getTrxs() {
      return this.trxs;
    }

    public run_portfolio_args setTrxs(java.util.List<br.com.investtools.radar.api.Transaction> trxs) {
      this.trxs = trxs;
      return this;
    }

    public void unsetTrxs() {
      this.trxs = null;
    }

    /** Returns true if field trxs is set (has been assigned a value) and false otherwise */
    public boolean isSetTrxs() {
      return this.trxs != null;
    }

    public void setTrxsIsSet(boolean value) {
      if (!value) {
        this.trxs = null;
      }
    }

    public int getReports_datesSize() {
      return (this.reports_dates == null) ? 0 : this.reports_dates.size();
    }

    public java.util.Iterator<java.lang.Long> getReports_datesIterator() {
      return (this.reports_dates == null) ? null : this.reports_dates.iterator();
    }

    public void addToReports_dates(long elem) {
      if (this.reports_dates == null) {
        this.reports_dates = new java.util.ArrayList<java.lang.Long>();
      }
      this.reports_dates.add(elem);
    }

    public java.util.List<java.lang.Long> getReports_dates() {
      return this.reports_dates;
    }

    public run_portfolio_args setReports_dates(java.util.List<java.lang.Long> reports_dates) {
      this.reports_dates = reports_dates;
      return this;
    }

    public void unsetReports_dates() {
      this.reports_dates = null;
    }

    /** Returns true if field reports_dates is set (has been assigned a value) and false otherwise */
    public boolean isSetReports_dates() {
      return this.reports_dates != null;
    }

    public void setReports_datesIsSet(boolean value) {
      if (!value) {
        this.reports_dates = null;
      }
    }

    public java.lang.String getUser() {
      return this.user;
    }

    public run_portfolio_args setUser(java.lang.String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public java.lang.String getPortfolio() {
      return this.portfolio;
    }

    public run_portfolio_args setPortfolio(java.lang.String portfolio) {
      this.portfolio = portfolio;
      return this;
    }

    public void unsetPortfolio() {
      this.portfolio = null;
    }

    /** Returns true if field portfolio is set (has been assigned a value) and false otherwise */
    public boolean isSetPortfolio() {
      return this.portfolio != null;
    }

    public void setPortfolioIsSet(boolean value) {
      if (!value) {
        this.portfolio = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TRXS:
        if (value == null) {
          unsetTrxs();
        } else {
          setTrxs((java.util.List<br.com.investtools.radar.api.Transaction>)value);
        }
        break;

      case REPORTS_DATES:
        if (value == null) {
          unsetReports_dates();
        } else {
          setReports_dates((java.util.List<java.lang.Long>)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((java.lang.String)value);
        }
        break;

      case PORTFOLIO:
        if (value == null) {
          unsetPortfolio();
        } else {
          setPortfolio((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TRXS:
        return getTrxs();

      case REPORTS_DATES:
        return getReports_dates();

      case USER:
        return getUser();

      case PORTFOLIO:
        return getPortfolio();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TRXS:
        return isSetTrxs();
      case REPORTS_DATES:
        return isSetReports_dates();
      case USER:
        return isSetUser();
      case PORTFOLIO:
        return isSetPortfolio();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof run_portfolio_args)
        return this.equals((run_portfolio_args)that);
      return false;
    }

    public boolean equals(run_portfolio_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_trxs = true && this.isSetTrxs();
      boolean that_present_trxs = true && that.isSetTrxs();
      if (this_present_trxs || that_present_trxs) {
        if (!(this_present_trxs && that_present_trxs))
          return false;
        if (!this.trxs.equals(that.trxs))
          return false;
      }

      boolean this_present_reports_dates = true && this.isSetReports_dates();
      boolean that_present_reports_dates = true && that.isSetReports_dates();
      if (this_present_reports_dates || that_present_reports_dates) {
        if (!(this_present_reports_dates && that_present_reports_dates))
          return false;
        if (!this.reports_dates.equals(that.reports_dates))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_portfolio = true && this.isSetPortfolio();
      boolean that_present_portfolio = true && that.isSetPortfolio();
      if (this_present_portfolio || that_present_portfolio) {
        if (!(this_present_portfolio && that_present_portfolio))
          return false;
        if (!this.portfolio.equals(that.portfolio))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTrxs()) ? 131071 : 524287);
      if (isSetTrxs())
        hashCode = hashCode * 8191 + trxs.hashCode();

      hashCode = hashCode * 8191 + ((isSetReports_dates()) ? 131071 : 524287);
      if (isSetReports_dates())
        hashCode = hashCode * 8191 + reports_dates.hashCode();

      hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
      if (isSetUser())
        hashCode = hashCode * 8191 + user.hashCode();

      hashCode = hashCode * 8191 + ((isSetPortfolio()) ? 131071 : 524287);
      if (isSetPortfolio())
        hashCode = hashCode * 8191 + portfolio.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(run_portfolio_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTrxs()).compareTo(other.isSetTrxs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTrxs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trxs, other.trxs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReports_dates()).compareTo(other.isSetReports_dates());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReports_dates()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reports_dates, other.reports_dates);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPortfolio()).compareTo(other.isSetPortfolio());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPortfolio()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.portfolio, other.portfolio);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("run_portfolio_args(");
      boolean first = true;

      sb.append("trxs:");
      if (this.trxs == null) {
        sb.append("null");
      } else {
        sb.append(this.trxs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reports_dates:");
      if (this.reports_dates == null) {
        sb.append("null");
      } else {
        sb.append(this.reports_dates);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("portfolio:");
      if (this.portfolio == null) {
        sb.append("null");
      } else {
        sb.append(this.portfolio);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class run_portfolio_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public run_portfolio_argsStandardScheme getScheme() {
        return new run_portfolio_argsStandardScheme();
      }
    }

    private static class run_portfolio_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<run_portfolio_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, run_portfolio_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRXS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.trxs = new java.util.ArrayList<br.com.investtools.radar.api.Transaction>(_list8.size);
                  br.com.investtools.radar.api.Transaction _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new br.com.investtools.radar.api.Transaction();
                    _elem9.read(iprot);
                    struct.trxs.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setTrxsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REPORTS_DATES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list11 = iprot.readListBegin();
                  struct.reports_dates = new java.util.ArrayList<java.lang.Long>(_list11.size);
                  long _elem12;
                  for (int _i13 = 0; _i13 < _list11.size; ++_i13)
                  {
                    _elem12 = iprot.readI64();
                    struct.reports_dates.add(_elem12);
                  }
                  iprot.readListEnd();
                }
                struct.setReports_datesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PORTFOLIO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.portfolio = iprot.readString();
                struct.setPortfolioIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, run_portfolio_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.trxs != null) {
          oprot.writeFieldBegin(TRXS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.trxs.size()));
            for (br.com.investtools.radar.api.Transaction _iter14 : struct.trxs)
            {
              _iter14.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.reports_dates != null) {
          oprot.writeFieldBegin(REPORTS_DATES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.reports_dates.size()));
            for (long _iter15 : struct.reports_dates)
            {
              oprot.writeI64(_iter15);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.portfolio != null) {
          oprot.writeFieldBegin(PORTFOLIO_FIELD_DESC);
          oprot.writeString(struct.portfolio);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class run_portfolio_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public run_portfolio_argsTupleScheme getScheme() {
        return new run_portfolio_argsTupleScheme();
      }
    }

    private static class run_portfolio_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<run_portfolio_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, run_portfolio_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTrxs()) {
          optionals.set(0);
        }
        if (struct.isSetReports_dates()) {
          optionals.set(1);
        }
        if (struct.isSetUser()) {
          optionals.set(2);
        }
        if (struct.isSetPortfolio()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTrxs()) {
          {
            oprot.writeI32(struct.trxs.size());
            for (br.com.investtools.radar.api.Transaction _iter16 : struct.trxs)
            {
              _iter16.write(oprot);
            }
          }
        }
        if (struct.isSetReports_dates()) {
          {
            oprot.writeI32(struct.reports_dates.size());
            for (long _iter17 : struct.reports_dates)
            {
              oprot.writeI64(_iter17);
            }
          }
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetPortfolio()) {
          oprot.writeString(struct.portfolio);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, run_portfolio_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list18 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.trxs = new java.util.ArrayList<br.com.investtools.radar.api.Transaction>(_list18.size);
            br.com.investtools.radar.api.Transaction _elem19;
            for (int _i20 = 0; _i20 < _list18.size; ++_i20)
            {
              _elem19 = new br.com.investtools.radar.api.Transaction();
              _elem19.read(iprot);
              struct.trxs.add(_elem19);
            }
          }
          struct.setTrxsIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.reports_dates = new java.util.ArrayList<java.lang.Long>(_list21.size);
            long _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = iprot.readI64();
              struct.reports_dates.add(_elem22);
            }
          }
          struct.setReports_datesIsSet(true);
        }
        if (incoming.get(2)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(3)) {
          struct.portfolio = iprot.readString();
          struct.setPortfolioIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class run_portfolio_result implements org.apache.thrift.TBase<run_portfolio_result, run_portfolio_result._Fields>, java.io.Serializable, Cloneable, Comparable<run_portfolio_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("run_portfolio_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new run_portfolio_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new run_portfolio_resultTupleSchemeFactory();

    public java.util.List<MonthlyPosition> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MonthlyPosition.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(run_portfolio_result.class, metaDataMap);
    }

    public run_portfolio_result() {
    }

    public run_portfolio_result(
      java.util.List<MonthlyPosition> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public run_portfolio_result(run_portfolio_result other) {
      if (other.isSetSuccess()) {
        java.util.List<MonthlyPosition> __this__success = new java.util.ArrayList<MonthlyPosition>(other.success.size());
        for (MonthlyPosition other_element : other.success) {
          __this__success.add(new MonthlyPosition(other_element));
        }
        this.success = __this__success;
      }
    }

    public run_portfolio_result deepCopy() {
      return new run_portfolio_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<MonthlyPosition> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MonthlyPosition elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<MonthlyPosition>();
      }
      this.success.add(elem);
    }

    public java.util.List<MonthlyPosition> getSuccess() {
      return this.success;
    }

    public run_portfolio_result setSuccess(java.util.List<MonthlyPosition> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<MonthlyPosition>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof run_portfolio_result)
        return this.equals((run_portfolio_result)that);
      return false;
    }

    public boolean equals(run_portfolio_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(run_portfolio_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("run_portfolio_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class run_portfolio_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public run_portfolio_resultStandardScheme getScheme() {
        return new run_portfolio_resultStandardScheme();
      }
    }

    private static class run_portfolio_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<run_portfolio_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, run_portfolio_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<MonthlyPosition>(_list24.size);
                  MonthlyPosition _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new MonthlyPosition();
                    _elem25.read(iprot);
                    struct.success.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, run_portfolio_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MonthlyPosition _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class run_portfolio_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public run_portfolio_resultTupleScheme getScheme() {
        return new run_portfolio_resultTupleScheme();
      }
    }

    private static class run_portfolio_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<run_portfolio_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, run_portfolio_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MonthlyPosition _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, run_portfolio_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<MonthlyPosition>(_list29.size);
            MonthlyPosition _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new MonthlyPosition();
              _elem30.read(iprot);
              struct.success.add(_elem30);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package br.com.investtools.radar.api;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
public class TableCellTypes extends org.apache.thrift.TUnion<TableCellTypes, TableCellTypes._Fields> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TableCellTypes");
  private static final org.apache.thrift.protocol.TField TEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("text", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PERCENT_FIELD_DESC = new org.apache.thrift.protocol.TField("percent", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField CURRENCY_FIELD_DESC = new org.apache.thrift.protocol.TField("currency", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("number", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
  private static final org.apache.thrift.protocol.TField PERCENTAGE_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("percentage_point", org.apache.thrift.protocol.TType.DOUBLE, (short)5);

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TEXT((short)1, "text"),
    PERCENT((short)2, "percent"),
    CURRENCY((short)3, "currency"),
    NUMBER((short)4, "number"),
    PERCENTAGE_POINT((short)5, "percentage_point");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TEXT
          return TEXT;
        case 2: // PERCENT
          return PERCENT;
        case 3: // CURRENCY
          return CURRENCY;
        case 4: // NUMBER
          return NUMBER;
        case 5: // PERCENTAGE_POINT
          return PERCENTAGE_POINT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TEXT, new org.apache.thrift.meta_data.FieldMetaData("text", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PERCENT, new org.apache.thrift.meta_data.FieldMetaData("percent", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.CURRENCY, new org.apache.thrift.meta_data.FieldMetaData("currency", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUMBER, new org.apache.thrift.meta_data.FieldMetaData("number", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.PERCENTAGE_POINT, new org.apache.thrift.meta_data.FieldMetaData("percentage_point", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TableCellTypes.class, metaDataMap);
  }

  public TableCellTypes() {
    super();
  }

  public TableCellTypes(_Fields setField, java.lang.Object value) {
    super(setField, value);
  }

  public TableCellTypes(TableCellTypes other) {
    super(other);
  }
  public TableCellTypes deepCopy() {
    return new TableCellTypes(this);
  }

  public static TableCellTypes text(java.lang.String value) {
    TableCellTypes x = new TableCellTypes();
    x.setText(value);
    return x;
  }

  public static TableCellTypes percent(double value) {
    TableCellTypes x = new TableCellTypes();
    x.setPercent(value);
    return x;
  }

  public static TableCellTypes currency(double value) {
    TableCellTypes x = new TableCellTypes();
    x.setCurrency(value);
    return x;
  }

  public static TableCellTypes number(double value) {
    TableCellTypes x = new TableCellTypes();
    x.setNumber(value);
    return x;
  }

  public static TableCellTypes percentage_point(double value) {
    TableCellTypes x = new TableCellTypes();
    x.setPercentage_point(value);
    return x;
  }


  @Override
  protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
    switch (setField) {
      case TEXT:
        if (value instanceof java.lang.String) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.String for field 'text', but got " + value.getClass().getSimpleName());
      case PERCENT:
        if (value instanceof java.lang.Double) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Double for field 'percent', but got " + value.getClass().getSimpleName());
      case CURRENCY:
        if (value instanceof java.lang.Double) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Double for field 'currency', but got " + value.getClass().getSimpleName());
      case NUMBER:
        if (value instanceof java.lang.Double) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Double for field 'number', but got " + value.getClass().getSimpleName());
      case PERCENTAGE_POINT:
        if (value instanceof java.lang.Double) {
          break;
        }
        throw new java.lang.ClassCastException("Was expecting value of type java.lang.Double for field 'percentage_point', but got " + value.getClass().getSimpleName());
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(field.id);
    if (setField != null) {
      switch (setField) {
        case TEXT:
          if (field.type == TEXT_FIELD_DESC.type) {
            java.lang.String text;
            text = iprot.readString();
            return text;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PERCENT:
          if (field.type == PERCENT_FIELD_DESC.type) {
            java.lang.Double percent;
            percent = iprot.readDouble();
            return percent;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case CURRENCY:
          if (field.type == CURRENCY_FIELD_DESC.type) {
            java.lang.Double currency;
            currency = iprot.readDouble();
            return currency;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case NUMBER:
          if (field.type == NUMBER_FIELD_DESC.type) {
            java.lang.Double number;
            number = iprot.readDouble();
            return number;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        case PERCENTAGE_POINT:
          if (field.type == PERCENTAGE_POINT_FIELD_DESC.type) {
            java.lang.Double percentage_point;
            percentage_point = iprot.readDouble();
            return percentage_point;
          } else {
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            return null;
          }
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
      return null;
    }
  }

  @Override
  protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TEXT:
        java.lang.String text = (java.lang.String)value_;
        oprot.writeString(text);
        return;
      case PERCENT:
        java.lang.Double percent = (java.lang.Double)value_;
        oprot.writeDouble(percent);
        return;
      case CURRENCY:
        java.lang.Double currency = (java.lang.Double)value_;
        oprot.writeDouble(currency);
        return;
      case NUMBER:
        java.lang.Double number = (java.lang.Double)value_;
        oprot.writeDouble(number);
        return;
      case PERCENTAGE_POINT:
        java.lang.Double percentage_point = (java.lang.Double)value_;
        oprot.writeDouble(percentage_point);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID) throws org.apache.thrift.TException {
    _Fields setField = _Fields.findByThriftId(fieldID);
    if (setField != null) {
      switch (setField) {
        case TEXT:
          java.lang.String text;
          text = iprot.readString();
          return text;
        case PERCENT:
          java.lang.Double percent;
          percent = iprot.readDouble();
          return percent;
        case CURRENCY:
          java.lang.Double currency;
          currency = iprot.readDouble();
          return currency;
        case NUMBER:
          java.lang.Double number;
          number = iprot.readDouble();
          return number;
        case PERCENTAGE_POINT:
          java.lang.Double percentage_point;
          percentage_point = iprot.readDouble();
          return percentage_point;
        default:
          throw new java.lang.IllegalStateException("setField wasn't null, but didn't match any of the case statements!");
      }
    } else {
      throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
    }
  }

  @Override
  protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    switch (setField_) {
      case TEXT:
        java.lang.String text = (java.lang.String)value_;
        oprot.writeString(text);
        return;
      case PERCENT:
        java.lang.Double percent = (java.lang.Double)value_;
        oprot.writeDouble(percent);
        return;
      case CURRENCY:
        java.lang.Double currency = (java.lang.Double)value_;
        oprot.writeDouble(currency);
        return;
      case NUMBER:
        java.lang.Double number = (java.lang.Double)value_;
        oprot.writeDouble(number);
        return;
      case PERCENTAGE_POINT:
        java.lang.Double percentage_point = (java.lang.Double)value_;
        oprot.writeDouble(percentage_point);
        return;
      default:
        throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
    switch (setField) {
      case TEXT:
        return TEXT_FIELD_DESC;
      case PERCENT:
        return PERCENT_FIELD_DESC;
      case CURRENCY:
        return CURRENCY_FIELD_DESC;
      case NUMBER:
        return NUMBER_FIELD_DESC;
      case PERCENTAGE_POINT:
        return PERCENTAGE_POINT_FIELD_DESC;
      default:
        throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
    }
  }

  @Override
  protected org.apache.thrift.protocol.TStruct getStructDesc() {
    return STRUCT_DESC;
  }

  @Override
  protected _Fields enumForId(short id) {
    return _Fields.findByThriftIdOrThrow(id);
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }


  public java.lang.String getText() {
    if (getSetField() == _Fields.TEXT) {
      return (java.lang.String)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'text' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setText(java.lang.String value) {
    if (value == null) throw new java.lang.NullPointerException();
    setField_ = _Fields.TEXT;
    value_ = value;
  }

  public double getPercent() {
    if (getSetField() == _Fields.PERCENT) {
      return (java.lang.Double)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'percent' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPercent(double value) {
    setField_ = _Fields.PERCENT;
    value_ = value;
  }

  public double getCurrency() {
    if (getSetField() == _Fields.CURRENCY) {
      return (java.lang.Double)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'currency' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setCurrency(double value) {
    setField_ = _Fields.CURRENCY;
    value_ = value;
  }

  public double getNumber() {
    if (getSetField() == _Fields.NUMBER) {
      return (java.lang.Double)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'number' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setNumber(double value) {
    setField_ = _Fields.NUMBER;
    value_ = value;
  }

  public double getPercentage_point() {
    if (getSetField() == _Fields.PERCENTAGE_POINT) {
      return (java.lang.Double)getFieldValue();
    } else {
      throw new java.lang.RuntimeException("Cannot get field 'percentage_point' because union is currently set to " + getFieldDesc(getSetField()).name);
    }
  }

  public void setPercentage_point(double value) {
    setField_ = _Fields.PERCENTAGE_POINT;
    value_ = value;
  }

  public boolean isSetText() {
    return setField_ == _Fields.TEXT;
  }


  public boolean isSetPercent() {
    return setField_ == _Fields.PERCENT;
  }


  public boolean isSetCurrency() {
    return setField_ == _Fields.CURRENCY;
  }


  public boolean isSetNumber() {
    return setField_ == _Fields.NUMBER;
  }


  public boolean isSetPercentage_point() {
    return setField_ == _Fields.PERCENTAGE_POINT;
  }


  public boolean equals(java.lang.Object other) {
    if (other instanceof TableCellTypes) {
      return equals((TableCellTypes)other);
    } else {
      return false;
    }
  }

  public boolean equals(TableCellTypes other) {
    return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
  }

  @Override
  public int compareTo(TableCellTypes other) {
    int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
    if (lastComparison == 0) {
      return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
    }
    return lastComparison;
  }


  @Override
  public int hashCode() {
    java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
    list.add(this.getClass().getName());
    org.apache.thrift.TFieldIdEnum setField = getSetField();
    if (setField != null) {
      list.add(setField.getThriftFieldId());
      java.lang.Object value = getFieldValue();
      if (value instanceof org.apache.thrift.TEnum) {
        list.add(((org.apache.thrift.TEnum)getFieldValue()).getValue());
      } else {
        list.add(value);
      }
    }
    return list.hashCode();
  }
  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }


}

#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'radar_types'

module Radar
  module API
    module Analyzer
      class Client
        include ::Thrift::Client

        def on_each_day(portfolio)
          send_on_each_day(portfolio)
        end

        def send_on_each_day(portfolio)
          send_message('on_each_day', On_each_day_args, :portfolio => portfolio)
        end
        def dump()
          send_dump()
          return recv_dump()
        end

        def send_dump()
          send_message('dump', Dump_args)
        end

        def recv_dump()
          result = receive_message(Dump_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'dump failed: unknown result')
        end

        def resume(data)
          send_resume(data)
        end

        def send_resume(data)
          send_message('resume', Resume_args, :data => data)
        end
        def id()
          send_id()
          return recv_id()
        end

        def send_id()
          send_message('id', Id_args)
        end

        def recv_id()
          result = receive_message(Id_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'id failed: unknown result')
        end

        def result()
          send_result()
          return recv_result()
        end

        def send_result()
          send_message('result', Result_args)
        end

        def recv_result()
          result = receive_message(Result_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'result failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_on_each_day(seqid, iprot, oprot)
          args = read_args(iprot, On_each_day_args)
          @handler.on_each_day(args.portfolio)
          return
        end

        def process_dump(seqid, iprot, oprot)
          args = read_args(iprot, Dump_args)
          result = Dump_result.new()
          result.success = @handler.dump()
          write_result(result, oprot, 'dump', seqid)
        end

        def process_resume(seqid, iprot, oprot)
          args = read_args(iprot, Resume_args)
          @handler.resume(args.data)
          return
        end

        def process_id(seqid, iprot, oprot)
          args = read_args(iprot, Id_args)
          result = Id_result.new()
          result.success = @handler.id()
          write_result(result, oprot, 'id', seqid)
        end

        def process_result(seqid, iprot, oprot)
          args = read_args(iprot, Result_args)
          result = Result_result.new()
          result.success = @handler.result()
          write_result(result, oprot, 'result', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class On_each_day_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        PORTFOLIO = 1

        FIELDS = {
          PORTFOLIO => {:type => ::Thrift::Types::STRUCT, :name => 'portfolio', :class => ::Radar::API::Portfolio}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class On_each_day_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Dump_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Dump_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success', :binary => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Resume_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        DATA = 1

        FIELDS = {
          DATA => {:type => ::Thrift::Types::STRING, :name => 'data', :binary => true}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Resume_result
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Id_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Id_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Result_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Result_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Radar::API::LineChart}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end

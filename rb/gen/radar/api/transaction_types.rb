#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'radar/api/common_types'


module Radar
  module Api
    module SecurityLendingAndBorrowingType
      LENDER = 1
      BORROWER = 2
      VALUE_MAP = {1 => "LENDER", 2 => "BORROWER"}
      VALID_VALUES = Set.new([LENDER, BORROWER]).freeze
    end

    module TransferType
      IN = 1
      OUT = 2
      VALUE_MAP = {1 => "IN", 2 => "OUT"}
      VALID_VALUES = Set.new([IN, OUT]).freeze
    end

    class EquityBuy; end

    class EquitySell; end

    class EquityPositionSnapshot; end

    class SecurityLendingAndBorrowing; end

    class SecurityLendingAndBorrowingReturning; end

    class CommissionExpense; end

    class Transfer; end

    class OptionExercise; end

    class Transaction < ::Thrift::Union; end

    class EquityBuy
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DATE = 1
      EQUITY = 2
      SHARES = 3
      PRICE = 4

      FIELDS = {
        DATE => {:type => ::Thrift::Types::I64, :name => 'date'},
        EQUITY => {:type => ::Thrift::Types::STRUCT, :name => 'equity', :class => ::Radar::Api::EquityId},
        SHARES => {:type => ::Thrift::Types::I32, :name => 'shares'},
        PRICE => {:type => ::Thrift::Types::DOUBLE, :name => 'price'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class EquitySell
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DATE = 1
      EQUITY = 2
      SHARES = 3
      PRICE = 4

      FIELDS = {
        DATE => {:type => ::Thrift::Types::I64, :name => 'date'},
        EQUITY => {:type => ::Thrift::Types::STRUCT, :name => 'equity', :class => ::Radar::Api::EquityId},
        SHARES => {:type => ::Thrift::Types::I32, :name => 'shares'},
        PRICE => {:type => ::Thrift::Types::DOUBLE, :name => 'price'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class EquityPositionSnapshot
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DATE = 1
      EQUITY = 2
      SHARES = 3
      PRICE = 4

      FIELDS = {
        DATE => {:type => ::Thrift::Types::I64, :name => 'date'},
        EQUITY => {:type => ::Thrift::Types::STRUCT, :name => 'equity', :class => ::Radar::Api::EquityId},
        SHARES => {:type => ::Thrift::Types::I32, :name => 'shares'},
        PRICE => {:type => ::Thrift::Types::DOUBLE, :name => 'price'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SecurityLendingAndBorrowing
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DATE = 1
      STOCK = 2
      SHARES = 3
      RATE = 4
      DUE = 5
      TYPE = 6
      CONTRACT = 7

      FIELDS = {
        DATE => {:type => ::Thrift::Types::I64, :name => 'date'},
        STOCK => {:type => ::Thrift::Types::STRUCT, :name => 'stock', :class => ::Radar::Api::EquityId},
        SHARES => {:type => ::Thrift::Types::I32, :name => 'shares'},
        RATE => {:type => ::Thrift::Types::DOUBLE, :name => 'rate'},
        DUE => {:type => ::Thrift::Types::I64, :name => 'due'},
        TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::Radar::Api::SecurityLendingAndBorrowingType},
        CONTRACT => {:type => ::Thrift::Types::STRING, :name => 'contract'}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @type.nil? || ::Radar::Api::SecurityLendingAndBorrowingType::VALID_VALUES.include?(@type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SecurityLendingAndBorrowingReturning
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DATE = 1
      STOCK = 2
      SHARES = 3
      VALUE = 4
      TYPE = 5

      FIELDS = {
        DATE => {:type => ::Thrift::Types::I64, :name => 'date'},
        STOCK => {:type => ::Thrift::Types::STRUCT, :name => 'stock', :class => ::Radar::Api::EquityId},
        SHARES => {:type => ::Thrift::Types::I32, :name => 'shares'},
        VALUE => {:type => ::Thrift::Types::DOUBLE, :name => 'value'},
        TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::Radar::Api::SecurityLendingAndBorrowingType}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @type.nil? || ::Radar::Api::SecurityLendingAndBorrowingType::VALID_VALUES.include?(@type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class CommissionExpense
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DATE = 1
      AMOUNT = 2
      DESCRIPTION = 3

      FIELDS = {
        DATE => {:type => ::Thrift::Types::I64, :name => 'date'},
        AMOUNT => {:type => ::Thrift::Types::DOUBLE, :name => 'amount'},
        DESCRIPTION => {:type => ::Thrift::Types::STRING, :name => 'description'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Transfer
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DATE = 1
      STOCK = 2
      SHARES = 3
      TYPE = 4

      FIELDS = {
        DATE => {:type => ::Thrift::Types::I64, :name => 'date'},
        STOCK => {:type => ::Thrift::Types::STRUCT, :name => 'stock', :class => ::Radar::Api::EquityId},
        SHARES => {:type => ::Thrift::Types::I32, :name => 'shares'},
        TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => ::Radar::Api::TransferType}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @type.nil? || ::Radar::Api::TransferType::VALID_VALUES.include?(@type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class OptionExercise
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DATE = 1
      OPTION = 2
      SHARES = 3
      STRIKE = 4

      FIELDS = {
        DATE => {:type => ::Thrift::Types::I64, :name => 'date'},
        OPTION => {:type => ::Thrift::Types::STRUCT, :name => 'option', :class => ::Radar::Api::EquityId},
        SHARES => {:type => ::Thrift::Types::I32, :name => 'shares'},
        STRIKE => {:type => ::Thrift::Types::DOUBLE, :name => 'strike'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Transaction < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def equity_buy(val)
          Transaction.new(:equity_buy, val)
        end

        def equity_sell(val)
          Transaction.new(:equity_sell, val)
        end

        def equity_position_snapshot(val)
          Transaction.new(:equity_position_snapshot, val)
        end

        def slb(val)
          Transaction.new(:slb, val)
        end

        def slbr(val)
          Transaction.new(:slbr, val)
        end

        def stock_commission_expense(val)
          Transaction.new(:stock_commission_expense, val)
        end

        def transfer(val)
          Transaction.new(:transfer, val)
        end

        def option_exercise(val)
          Transaction.new(:option_exercise, val)
        end
      end

      EQUITY_BUY = 1
      EQUITY_SELL = 2
      EQUITY_POSITION_SNAPSHOT = 3
      SLB = 4
      SLBR = 5
      STOCK_COMMISSION_EXPENSE = 6
      TRANSFER = 7
      OPTION_EXERCISE = 8

      FIELDS = {
        EQUITY_BUY => {:type => ::Thrift::Types::STRUCT, :name => 'equity_buy', :class => ::Radar::Api::EquityBuy, :optional => true},
        EQUITY_SELL => {:type => ::Thrift::Types::STRUCT, :name => 'equity_sell', :class => ::Radar::Api::EquitySell, :optional => true},
        EQUITY_POSITION_SNAPSHOT => {:type => ::Thrift::Types::STRUCT, :name => 'equity_position_snapshot', :class => ::Radar::Api::EquityPositionSnapshot, :optional => true},
        SLB => {:type => ::Thrift::Types::STRUCT, :name => 'slb', :class => ::Radar::Api::SecurityLendingAndBorrowing, :optional => true},
        SLBR => {:type => ::Thrift::Types::STRUCT, :name => 'slbr', :class => ::Radar::Api::SecurityLendingAndBorrowingReturning, :optional => true},
        STOCK_COMMISSION_EXPENSE => {:type => ::Thrift::Types::STRUCT, :name => 'stock_commission_expense', :class => ::Radar::Api::CommissionExpense, :optional => true},
        TRANSFER => {:type => ::Thrift::Types::STRUCT, :name => 'transfer', :class => ::Radar::Api::Transfer, :optional => true},
        OPTION_EXERCISE => {:type => ::Thrift::Types::STRUCT, :name => 'option_exercise', :class => ::Radar::Api::OptionExercise, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

  end
end

#
# Autogenerated by Thrift Compiler (0.12.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'radar/api/healthz_types'

module Radar
  module Api
    module Healthz
      class Client
        include ::Thrift::Client

        def status()
          send_status()
          return recv_status()
        end

        def send_status()
          send_message('status', Status_args)
        end

        def recv_status()
          result = receive_message(Status_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'status failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_status(seqid, iprot, oprot)
          args = read_args(iprot, Status_args)
          result = Status_result.new()
          result.success = @handler.status()
          write_result(result, oprot, 'status', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Status_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Status_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I32, :name => 'success', :enum_class => ::Radar::Api::HealthStatus}
        }

        def struct_fields; FIELDS; end

        def validate
          unless @success.nil? || ::Radar::Api::HealthStatus::VALID_VALUES.include?(@success)
            raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field success!')
          end
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end

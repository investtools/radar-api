#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'radar/api/data_server_types'

module Radar
  module Api
    module SecurityService
      class Client
        include ::Thrift::Client

        def short_name(id)
          send_short_name(id)
          return recv_short_name()
        end

        def send_short_name(id)
          send_message('short_name', Short_name_args, :id => id)
        end

        def recv_short_name()
          result = receive_message(Short_name_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'short_name failed: unknown result')
        end

        def prices(id, start_date, end_date)
          send_prices(id, start_date, end_date)
          return recv_prices()
        end

        def send_prices(id, start_date, end_date)
          send_message('prices', Prices_args, :id => id, :start_date => start_date, :end_date => end_date)
        end

        def recv_prices()
          result = receive_message(Prices_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'prices failed: unknown result')
        end

        def price(id, date)
          send_price(id, date)
          return recv_price()
        end

        def send_price(id, date)
          send_message('price', Price_args, :id => id, :date => date)
        end

        def recv_price()
          result = receive_message(Price_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'price failed: unknown result')
        end

        def price_change(id, start_date, end_date)
          send_price_change(id, start_date, end_date)
          return recv_price_change()
        end

        def send_price_change(id, start_date, end_date)
          send_message('price_change', Price_change_args, :id => id, :start_date => start_date, :end_date => end_date)
        end

        def recv_price_change()
          result = receive_message(Price_change_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'price_change failed: unknown result')
        end

        def price_changes(id, start_date, end_date)
          send_price_changes(id, start_date, end_date)
          return recv_price_changes()
        end

        def send_price_changes(id, start_date, end_date)
          send_message('price_changes', Price_changes_args, :id => id, :start_date => start_date, :end_date => end_date)
        end

        def recv_price_changes()
          result = receive_message(Price_changes_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'price_changes failed: unknown result')
        end

        def price_volatility(id, start_date, end_date)
          send_price_volatility(id, start_date, end_date)
          return recv_price_volatility()
        end

        def send_price_volatility(id, start_date, end_date)
          send_message('price_volatility', Price_volatility_args, :id => id, :start_date => start_date, :end_date => end_date)
        end

        def recv_price_volatility()
          result = receive_message(Price_volatility_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'price_volatility failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_short_name(seqid, iprot, oprot)
          args = read_args(iprot, Short_name_args)
          result = Short_name_result.new()
          result.success = @handler.short_name(args.id)
          write_result(result, oprot, 'short_name', seqid)
        end

        def process_prices(seqid, iprot, oprot)
          args = read_args(iprot, Prices_args)
          result = Prices_result.new()
          result.success = @handler.prices(args.id, args.start_date, args.end_date)
          write_result(result, oprot, 'prices', seqid)
        end

        def process_price(seqid, iprot, oprot)
          args = read_args(iprot, Price_args)
          result = Price_result.new()
          result.success = @handler.price(args.id, args.date)
          write_result(result, oprot, 'price', seqid)
        end

        def process_price_change(seqid, iprot, oprot)
          args = read_args(iprot, Price_change_args)
          result = Price_change_result.new()
          result.success = @handler.price_change(args.id, args.start_date, args.end_date)
          write_result(result, oprot, 'price_change', seqid)
        end

        def process_price_changes(seqid, iprot, oprot)
          args = read_args(iprot, Price_changes_args)
          result = Price_changes_result.new()
          result.success = @handler.price_changes(args.id, args.start_date, args.end_date)
          write_result(result, oprot, 'price_changes', seqid)
        end

        def process_price_volatility(seqid, iprot, oprot)
          args = read_args(iprot, Price_volatility_args)
          result = Price_volatility_result.new()
          result.success = @handler.price_volatility(args.id, args.start_date, args.end_date)
          write_result(result, oprot, 'price_volatility', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Short_name_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ID = 1

        FIELDS = {
          ID => {:type => ::Thrift::Types::STRUCT, :name => 'id', :class => ::Radar::Api::SecurityId}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Short_name_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Prices_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ID = 1
        START_DATE = 2
        END_DATE = 3

        FIELDS = {
          ID => {:type => ::Thrift::Types::STRUCT, :name => 'id', :class => ::Radar::Api::SecurityId},
          START_DATE => {:type => ::Thrift::Types::I64, :name => 'start_date'},
          END_DATE => {:type => ::Thrift::Types::I64, :name => 'end_date'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Prices_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Radar::Api::Price}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Price_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ID = 1
        DATE = 2

        FIELDS = {
          ID => {:type => ::Thrift::Types::STRUCT, :name => 'id', :class => ::Radar::Api::SecurityId},
          DATE => {:type => ::Thrift::Types::I64, :name => 'date'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Price_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Price_change_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ID = 1
        START_DATE = 2
        END_DATE = 3

        FIELDS = {
          ID => {:type => ::Thrift::Types::STRUCT, :name => 'id', :class => ::Radar::Api::SecurityId},
          START_DATE => {:type => ::Thrift::Types::I64, :name => 'start_date'},
          END_DATE => {:type => ::Thrift::Types::I64, :name => 'end_date'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Price_change_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Price_changes_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ID = 1
        START_DATE = 2
        END_DATE = 3

        FIELDS = {
          ID => {:type => ::Thrift::Types::STRUCT, :name => 'id', :class => ::Radar::Api::SecurityId},
          START_DATE => {:type => ::Thrift::Types::I64, :name => 'start_date'},
          END_DATE => {:type => ::Thrift::Types::I64, :name => 'end_date'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Price_changes_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::DOUBLE}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Price_volatility_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        ID = 1
        START_DATE = 2
        END_DATE = 3

        FIELDS = {
          ID => {:type => ::Thrift::Types::STRUCT, :name => 'id', :class => ::Radar::Api::SecurityId},
          START_DATE => {:type => ::Thrift::Types::I64, :name => 'start_date'},
          END_DATE => {:type => ::Thrift::Types::I64, :name => 'end_date'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Price_volatility_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::DOUBLE, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end

#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'radar/api/common_types'


module Radar
  module Api
    class Security
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STOCK = 1
      SHARES = 2

      FIELDS = {
        STOCK => {:type => ::Thrift::Types::STRUCT, :name => 'stock', :class => ::Radar::Api::StockId},
        SHARES => {:type => ::Thrift::Types::I32, :name => 'shares'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Lending
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STOCK = 1
      SHARES = 2

      FIELDS = {
        STOCK => {:type => ::Thrift::Types::STRUCT, :name => 'stock', :class => ::Radar::Api::StockId},
        SHARES => {:type => ::Thrift::Types::I32, :name => 'shares'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Borrowing
      include ::Thrift::Struct, ::Thrift::Struct_Union
      STOCK = 1
      SHARES = 2

      FIELDS = {
        STOCK => {:type => ::Thrift::Types::STRUCT, :name => 'stock', :class => ::Radar::Api::StockId},
        SHARES => {:type => ::Thrift::Types::I32, :name => 'shares'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class SimplePosition < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def security(val)
          SimplePosition.new(:security, val)
        end

        def lending(val)
          SimplePosition.new(:lending, val)
        end

        def borrowing(val)
          SimplePosition.new(:borrowing, val)
        end
      end

      SECURITY = 1
      LENDING = 2
      BORROWING = 3

      FIELDS = {
        SECURITY => {:type => ::Thrift::Types::STRUCT, :name => 'security', :class => ::Radar::Api::Security, :optional => true},
        LENDING => {:type => ::Thrift::Types::STRUCT, :name => 'lending', :class => ::Radar::Api::Lending, :optional => true},
        BORROWING => {:type => ::Thrift::Types::STRUCT, :name => 'borrowing', :class => ::Radar::Api::Borrowing, :optional => true}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

  end
end

#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'radar/api/common_types'


module Radar
  module Api
    module StockBuyTransactionType
      REGULAR = 1
      IPO = 2
      VALUE_MAP = {1 => "REGULAR", 2 => "IPO"}
      VALID_VALUES = Set.new([REGULAR, IPO]).freeze
    end

    class StockSellTransaction
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DATE = 1
      STOCK = 2
      SHARES = 3
      PRICE = 4

      FIELDS = {
        DATE => {:type => ::Thrift::Types::I32, :name => 'date'},
        STOCK => {:type => ::Thrift::Types::STRUCT, :name => 'stock', :class => ::Radar::Api::StockId},
        SHARES => {:type => ::Thrift::Types::I32, :name => 'shares'},
        PRICE => {:type => ::Thrift::Types::DOUBLE, :name => 'price'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

    class StockBuyTransaction
      include ::Thrift::Struct, ::Thrift::Struct_Union
      DATE = 1
      STOCK = 2
      SHARES = 3
      PRICE = 4
      TYPE = 5

      FIELDS = {
        DATE => {:type => ::Thrift::Types::I32, :name => 'date'},
        STOCK => {:type => ::Thrift::Types::STRUCT, :name => 'stock', :class => ::Radar::Api::StockId},
        SHARES => {:type => ::Thrift::Types::I32, :name => 'shares'},
        PRICE => {:type => ::Thrift::Types::DOUBLE, :name => 'price'},
        TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :default =>         1, :enum_class => ::Radar::Api::StockBuyTransactionType}
      }

      def struct_fields; FIELDS; end

      def validate
        unless @type.nil? || ::Radar::Api::StockBuyTransactionType::VALID_VALUES.include?(@type)
          raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
        end
      end

      ::Thrift::Struct.generate_accessors self
    end

    class Transaction < ::Thrift::Union
      include ::Thrift::Struct_Union
      class << self
        def stock_buy(val)
          Transaction.new(:stock_buy, val)
        end

        def stock_sell(val)
          Transaction.new(:stock_sell, val)
        end
      end

      STOCK_BUY = 1
      STOCK_SELL = 2

      FIELDS = {
        STOCK_BUY => {:type => ::Thrift::Types::STRUCT, :name => 'stock_buy', :class => ::Radar::Api::StockBuyTransaction},
        STOCK_SELL => {:type => ::Thrift::Types::STRUCT, :name => 'stock_sell', :class => ::Radar::Api::StockSellTransaction}
      }

      def struct_fields; FIELDS; end

      def validate
        raise(StandardError, 'Union fields are not set.') if get_set_field.nil? || get_value.nil?
      end

      ::Thrift::Union.generate_accessors self
    end

    class TransactionSynchronizerConfig
      include ::Thrift::Struct, ::Thrift::Struct_Union
      ID = 1
      NAME = 2

      FIELDS = {
        ID => {:type => ::Thrift::Types::STRING, :name => 'id'},
        NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
      }

      def struct_fields; FIELDS; end

      def validate
      end

      ::Thrift::Struct.generate_accessors self
    end

  end
end

#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'radar/api/transaction_importer_types'

module Radar
  module Api
    module TransactionImporter
      class Client
        include ::Thrift::Client

        def name()
          send_name()
          return recv_name()
        end

        def send_name()
          send_message('name', Name_args)
        end

        def recv_name()
          result = receive_message(Name_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'name failed: unknown result')
        end

        def accounts(username, password)
          send_accounts(username, password)
          return recv_accounts()
        end

        def send_accounts(username, password)
          send_message('accounts', Accounts_args, :username => username, :password => password)
        end

        def recv_accounts()
          result = receive_message(Accounts_result)
          return result.success unless result.success.nil?
          raise result.auth_error unless result.auth_error.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'accounts failed: unknown result')
        end

        def fetch(username, password, accounts)
          send_fetch(username, password, accounts)
          return recv_fetch()
        end

        def send_fetch(username, password, accounts)
          send_message('fetch', Fetch_args, :username => username, :password => password, :accounts => accounts)
        end

        def recv_fetch()
          result = receive_message(Fetch_result)
          return result.success unless result.success.nil?
          raise result.auth_error unless result.auth_error.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'fetch failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_name(seqid, iprot, oprot)
          args = read_args(iprot, Name_args)
          result = Name_result.new()
          result.success = @handler.name()
          write_result(result, oprot, 'name', seqid)
        end

        def process_accounts(seqid, iprot, oprot)
          args = read_args(iprot, Accounts_args)
          result = Accounts_result.new()
          begin
            result.success = @handler.accounts(args.username, args.password)
          rescue ::Radar::Api::AuthenticationError => auth_error
            result.auth_error = auth_error
          end
          write_result(result, oprot, 'accounts', seqid)
        end

        def process_fetch(seqid, iprot, oprot)
          args = read_args(iprot, Fetch_args)
          result = Fetch_result.new()
          begin
            result.success = @handler.fetch(args.username, args.password, args.accounts)
          rescue ::Radar::Api::AuthenticationError => auth_error
            result.auth_error = auth_error
          end
          write_result(result, oprot, 'fetch', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Name_args
        include ::Thrift::Struct, ::Thrift::Struct_Union

        FIELDS = {

        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Name_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::STRING, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Accounts_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        USERNAME = 1
        PASSWORD = 2

        FIELDS = {
          USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
          PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Accounts_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        AUTH_ERROR = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::MAP, :name => 'success', :key => {:type => ::Thrift::Types::STRING}, :value => {:type => ::Thrift::Types::STRING}},
          AUTH_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'auth_error', :class => ::Radar::Api::AuthenticationError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Fetch_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        USERNAME = 1
        PASSWORD = 2
        ACCOUNTS = 3

        FIELDS = {
          USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
          PASSWORD => {:type => ::Thrift::Types::STRING, :name => 'password'},
          ACCOUNTS => {:type => ::Thrift::Types::LIST, :name => 'accounts', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Radar::Api::Account}}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Fetch_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0
        AUTH_ERROR = 1

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Radar::Api::Transaction}},
          AUTH_ERROR => {:type => ::Thrift::Types::STRUCT, :name => 'auth_error', :class => ::Radar::Api::AuthenticationError}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end

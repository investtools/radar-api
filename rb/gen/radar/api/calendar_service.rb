#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'radar/api/data_server_types'

module Radar
  module Api
    module CalendarService
      class Client
        include ::Thrift::Client

        def advance(calendar, date, n)
          send_advance(calendar, date, n)
          return recv_advance()
        end

        def send_advance(calendar, date, n)
          send_message('advance', Advance_args, :calendar => calendar, :date => date, :n => n)
        end

        def recv_advance()
          result = receive_message(Advance_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'advance failed: unknown result')
        end

        def back(calendar, date, n)
          send_back(calendar, date, n)
          return recv_back()
        end

        def send_back(calendar, date, n)
          send_message('back', Back_args, :calendar => calendar, :date => date, :n => n)
        end

        def recv_back()
          result = receive_message(Back_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'back failed: unknown result')
        end

        def first_business_day(calendar, date)
          send_first_business_day(calendar, date)
          return recv_first_business_day()
        end

        def send_first_business_day(calendar, date)
          send_message('first_business_day', First_business_day_args, :calendar => calendar, :date => date)
        end

        def recv_first_business_day()
          result = receive_message(First_business_day_result)
          return result.success unless result.success.nil?
          raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'first_business_day failed: unknown result')
        end

      end

      class Processor
        include ::Thrift::Processor

        def process_advance(seqid, iprot, oprot)
          args = read_args(iprot, Advance_args)
          result = Advance_result.new()
          result.success = @handler.advance(args.calendar, args.date, args.n)
          write_result(result, oprot, 'advance', seqid)
        end

        def process_back(seqid, iprot, oprot)
          args = read_args(iprot, Back_args)
          result = Back_result.new()
          result.success = @handler.back(args.calendar, args.date, args.n)
          write_result(result, oprot, 'back', seqid)
        end

        def process_first_business_day(seqid, iprot, oprot)
          args = read_args(iprot, First_business_day_args)
          result = First_business_day_result.new()
          result.success = @handler.first_business_day(args.calendar, args.date)
          write_result(result, oprot, 'first_business_day', seqid)
        end

      end

      # HELPER FUNCTIONS AND STRUCTURES

      class Advance_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        CALENDAR = 1
        DATE = 2
        N = 3

        FIELDS = {
          CALENDAR => {:type => ::Thrift::Types::STRING, :name => 'calendar'},
          DATE => {:type => ::Thrift::Types::I64, :name => 'date'},
          N => {:type => ::Thrift::Types::I16, :name => 'n'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Advance_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Back_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        CALENDAR = 1
        DATE = 2
        N = 3

        FIELDS = {
          CALENDAR => {:type => ::Thrift::Types::STRING, :name => 'calendar'},
          DATE => {:type => ::Thrift::Types::I64, :name => 'date'},
          N => {:type => ::Thrift::Types::I16, :name => 'n'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class Back_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class First_business_day_args
        include ::Thrift::Struct, ::Thrift::Struct_Union
        CALENDAR = 1
        DATE = 2

        FIELDS = {
          CALENDAR => {:type => ::Thrift::Types::STRING, :name => 'calendar'},
          DATE => {:type => ::Thrift::Types::I64, :name => 'date'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

      class First_business_day_result
        include ::Thrift::Struct, ::Thrift::Struct_Union
        SUCCESS = 0

        FIELDS = {
          SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'}
        }

        def struct_fields; FIELDS; end

        def validate
        end

        ::Thrift::Struct.generate_accessors self
      end

    end

  end
end

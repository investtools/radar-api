//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

RadarAPI.IndexService_prices_args = function(args) {
  this.symbol = null;
  this.start_date = null;
  this.end_date = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
    if (args.start_date !== undefined) {
      this.start_date = args.start_date;
    }
    if (args.end_date !== undefined) {
      this.end_date = args.end_date;
    }
  }
};
RadarAPI.IndexService_prices_args.prototype = {};
RadarAPI.IndexService_prices_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.start_date = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.end_date = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RadarAPI.IndexService_prices_args.prototype.write = function(output) {
  output.writeStructBegin('IndexService_prices_args');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  if (this.start_date !== null && this.start_date !== undefined) {
    output.writeFieldBegin('start_date', Thrift.Type.I32, 2);
    output.writeI32(this.start_date);
    output.writeFieldEnd();
  }
  if (this.end_date !== null && this.end_date !== undefined) {
    output.writeFieldBegin('end_date', Thrift.Type.I32, 3);
    output.writeI32(this.end_date);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RadarAPI.IndexService_prices_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
RadarAPI.IndexService_prices_result.prototype = {};
RadarAPI.IndexService_prices_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.success = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new RadarAPI.Price();
          elem126.read(input);
          this.success.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RadarAPI.IndexService_prices_result.prototype.write = function(output) {
  output.writeStructBegin('IndexService_prices_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter127 in this.success)
    {
      if (this.success.hasOwnProperty(iter127))
      {
        iter127 = this.success[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RadarAPI.IndexService_price_args = function(args) {
  this.symbol = null;
  this.date = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
    if (args.date !== undefined) {
      this.date = args.date;
    }
  }
};
RadarAPI.IndexService_price_args.prototype = {};
RadarAPI.IndexService_price_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.date = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RadarAPI.IndexService_price_args.prototype.write = function(output) {
  output.writeStructBegin('IndexService_price_args');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I32, 2);
    output.writeI32(this.date);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RadarAPI.IndexService_price_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
RadarAPI.IndexService_price_result.prototype = {};
RadarAPI.IndexService_price_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.DOUBLE) {
        this.success = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RadarAPI.IndexService_price_result.prototype.write = function(output) {
  output.writeStructBegin('IndexService_price_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.DOUBLE, 0);
    output.writeDouble(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RadarAPI.IndexService_price_change_args = function(args) {
  this.symbol = null;
  this.start_date = null;
  this.end_date = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
    if (args.start_date !== undefined) {
      this.start_date = args.start_date;
    }
    if (args.end_date !== undefined) {
      this.end_date = args.end_date;
    }
  }
};
RadarAPI.IndexService_price_change_args.prototype = {};
RadarAPI.IndexService_price_change_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.start_date = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.end_date = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RadarAPI.IndexService_price_change_args.prototype.write = function(output) {
  output.writeStructBegin('IndexService_price_change_args');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  if (this.start_date !== null && this.start_date !== undefined) {
    output.writeFieldBegin('start_date', Thrift.Type.I32, 2);
    output.writeI32(this.start_date);
    output.writeFieldEnd();
  }
  if (this.end_date !== null && this.end_date !== undefined) {
    output.writeFieldBegin('end_date', Thrift.Type.I32, 3);
    output.writeI32(this.end_date);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RadarAPI.IndexService_price_change_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
RadarAPI.IndexService_price_change_result.prototype = {};
RadarAPI.IndexService_price_change_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.DOUBLE) {
        this.success = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RadarAPI.IndexService_price_change_result.prototype.write = function(output) {
  output.writeStructBegin('IndexService_price_change_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.DOUBLE, 0);
    output.writeDouble(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

RadarAPI.IndexServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
RadarAPI.IndexServiceClient.prototype = {};
RadarAPI.IndexServiceClient.prototype.prices = function(symbol, start_date, end_date, callback) {
  this.send_prices(symbol, start_date, end_date, callback); 
  if (!callback) {
    return this.recv_prices();
  }
};

RadarAPI.IndexServiceClient.prototype.send_prices = function(symbol, start_date, end_date, callback) {
  this.output.writeMessageBegin('prices', Thrift.MessageType.CALL, this.seqid);
  var args = new RadarAPI.IndexService_prices_args();
  args.symbol = symbol;
  args.start_date = start_date;
  args.end_date = end_date;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_prices();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

RadarAPI.IndexServiceClient.prototype.recv_prices = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new RadarAPI.IndexService_prices_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'prices failed: unknown result';
};
RadarAPI.IndexServiceClient.prototype.price = function(symbol, date, callback) {
  this.send_price(symbol, date, callback); 
  if (!callback) {
    return this.recv_price();
  }
};

RadarAPI.IndexServiceClient.prototype.send_price = function(symbol, date, callback) {
  this.output.writeMessageBegin('price', Thrift.MessageType.CALL, this.seqid);
  var args = new RadarAPI.IndexService_price_args();
  args.symbol = symbol;
  args.date = date;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_price();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

RadarAPI.IndexServiceClient.prototype.recv_price = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new RadarAPI.IndexService_price_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'price failed: unknown result';
};
RadarAPI.IndexServiceClient.prototype.price_change = function(symbol, start_date, end_date, callback) {
  this.send_price_change(symbol, start_date, end_date, callback); 
  if (!callback) {
    return this.recv_price_change();
  }
};

RadarAPI.IndexServiceClient.prototype.send_price_change = function(symbol, start_date, end_date, callback) {
  this.output.writeMessageBegin('price_change', Thrift.MessageType.CALL, this.seqid);
  var args = new RadarAPI.IndexService_price_change_args();
  args.symbol = symbol;
  args.start_date = start_date;
  args.end_date = end_date;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_price_change();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

RadarAPI.IndexServiceClient.prototype.recv_price_change = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new RadarAPI.IndexService_price_change_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'price_change failed: unknown result';
};

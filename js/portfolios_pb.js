/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.Radar.EquitySource', null, global);
goog.exportSymbol('proto.Radar.Event', null, global);
goog.exportSymbol('proto.Radar.Event.AccumulatedTaxCredit', null, global);
goog.exportSymbol('proto.Radar.Event.CashFlow', null, global);
goog.exportSymbol('proto.Radar.Event.CashFlow.Type', null, global);
goog.exportSymbol('proto.Radar.Event.EquitySource', null, global);
goog.exportSymbol('proto.Radar.Event.EquityType', null, global);
goog.exportSymbol('proto.Radar.Event.MonthlySell', null, global);
goog.exportSymbol('proto.Radar.Event.MonthlyStockExemptionPeriodProfit', null, global);
goog.exportSymbol('proto.Radar.Event.Portfolio', null, global);
goog.exportSymbol('proto.Radar.Event.Portfolio.Position', null, global);
goog.exportSymbol('proto.Radar.Event.Portfolio.Provision', null, global);
goog.exportSymbol('proto.Radar.Event.PositionMonthTax', null, global);
goog.exportSymbol('proto.Radar.Event.PositionType', null, global);
goog.exportSymbol('proto.Radar.Event.Source', null, global);
goog.exportSymbol('proto.Radar.Event.StockExemptMonthTax', null, global);
goog.exportSymbol('proto.Radar.InterestOnOwnCapital', null, global);
goog.exportSymbol('proto.Radar.RunReq', null, global);
goog.exportSymbol('proto.Radar.RunReq.Event', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Radar.EquitySource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Radar.EquitySource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Radar.EquitySource.displayName = 'proto.Radar.EquitySource';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Radar.EquitySource.prototype.toObject = function(opt_includeInstance) {
  return proto.Radar.EquitySource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Radar.EquitySource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.EquitySource.toObject = function(includeInstance, msg) {
  var f, obj = {
    equity: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Radar.EquitySource}
 */
proto.Radar.EquitySource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Radar.EquitySource;
  return proto.Radar.EquitySource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Radar.EquitySource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Radar.EquitySource}
 */
proto.Radar.EquitySource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEquity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Radar.EquitySource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Radar.EquitySource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Radar.EquitySource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.EquitySource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEquity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string equity = 1;
 * @return {string}
 */
proto.Radar.EquitySource.prototype.getEquity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Radar.EquitySource.prototype.setEquity = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Radar.InterestOnOwnCapital = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Radar.InterestOnOwnCapital, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Radar.InterestOnOwnCapital.displayName = 'proto.Radar.InterestOnOwnCapital';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Radar.InterestOnOwnCapital.prototype.toObject = function(opt_includeInstance) {
  return proto.Radar.InterestOnOwnCapital.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Radar.InterestOnOwnCapital} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.InterestOnOwnCapital.toObject = function(includeInstance, msg) {
  var f, obj = {
    equity: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Radar.InterestOnOwnCapital}
 */
proto.Radar.InterestOnOwnCapital.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Radar.InterestOnOwnCapital;
  return proto.Radar.InterestOnOwnCapital.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Radar.InterestOnOwnCapital} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Radar.InterestOnOwnCapital}
 */
proto.Radar.InterestOnOwnCapital.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEquity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Radar.InterestOnOwnCapital.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Radar.InterestOnOwnCapital.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Radar.InterestOnOwnCapital} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.InterestOnOwnCapital.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEquity();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string equity = 1;
 * @return {string}
 */
proto.Radar.InterestOnOwnCapital.prototype.getEquity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Radar.InterestOnOwnCapital.prototype.setEquity = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Radar.Event = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Radar.Event.oneofGroups_);
};
goog.inherits(proto.Radar.Event, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Radar.Event.displayName = 'proto.Radar.Event';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Radar.Event.oneofGroups_ = [[20,21,22,23,24,25,26]];

/**
 * @enum {number}
 */
proto.Radar.Event.TypeCase = {
  TYPE_NOT_SET: 0,
  CASH_FLOW: 20,
  PORTFOLIO: 21,
  POSITION_MONTH_TAX: 22,
  STOCK_EXEMPT_MONTH_TAX: 23,
  ACCUMULATED_TAX_CREDIT: 24,
  MONTHLY_SELL: 25,
  MONTHLY_STOCK_EXEMPTION_PERIOD_PROFIT: 26
};

/**
 * @return {proto.Radar.Event.TypeCase}
 */
proto.Radar.Event.prototype.getTypeCase = function() {
  return /** @type {proto.Radar.Event.TypeCase} */(jspb.Message.computeOneofCase(this, proto.Radar.Event.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Radar.Event.prototype.toObject = function(opt_includeInstance) {
  return proto.Radar.Event.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Radar.Event} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.toObject = function(includeInstance, msg) {
  var f, obj = {
    date: (f = msg.getDate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    cashFlow: (f = msg.getCashFlow()) && proto.Radar.Event.CashFlow.toObject(includeInstance, f),
    portfolio: (f = msg.getPortfolio()) && proto.Radar.Event.Portfolio.toObject(includeInstance, f),
    positionMonthTax: (f = msg.getPositionMonthTax()) && proto.Radar.Event.PositionMonthTax.toObject(includeInstance, f),
    stockExemptMonthTax: (f = msg.getStockExemptMonthTax()) && proto.Radar.Event.StockExemptMonthTax.toObject(includeInstance, f),
    accumulatedTaxCredit: (f = msg.getAccumulatedTaxCredit()) && proto.Radar.Event.AccumulatedTaxCredit.toObject(includeInstance, f),
    monthlySell: (f = msg.getMonthlySell()) && proto.Radar.Event.MonthlySell.toObject(includeInstance, f),
    monthlyStockExemptionPeriodProfit: (f = msg.getMonthlyStockExemptionPeriodProfit()) && proto.Radar.Event.MonthlyStockExemptionPeriodProfit.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Radar.Event}
 */
proto.Radar.Event.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Radar.Event;
  return proto.Radar.Event.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Radar.Event} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Radar.Event}
 */
proto.Radar.Event.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setDate(value);
      break;
    case 20:
      var value = new proto.Radar.Event.CashFlow;
      reader.readMessage(value,proto.Radar.Event.CashFlow.deserializeBinaryFromReader);
      msg.setCashFlow(value);
      break;
    case 21:
      var value = new proto.Radar.Event.Portfolio;
      reader.readMessage(value,proto.Radar.Event.Portfolio.deserializeBinaryFromReader);
      msg.setPortfolio(value);
      break;
    case 22:
      var value = new proto.Radar.Event.PositionMonthTax;
      reader.readMessage(value,proto.Radar.Event.PositionMonthTax.deserializeBinaryFromReader);
      msg.setPositionMonthTax(value);
      break;
    case 23:
      var value = new proto.Radar.Event.StockExemptMonthTax;
      reader.readMessage(value,proto.Radar.Event.StockExemptMonthTax.deserializeBinaryFromReader);
      msg.setStockExemptMonthTax(value);
      break;
    case 24:
      var value = new proto.Radar.Event.AccumulatedTaxCredit;
      reader.readMessage(value,proto.Radar.Event.AccumulatedTaxCredit.deserializeBinaryFromReader);
      msg.setAccumulatedTaxCredit(value);
      break;
    case 25:
      var value = new proto.Radar.Event.MonthlySell;
      reader.readMessage(value,proto.Radar.Event.MonthlySell.deserializeBinaryFromReader);
      msg.setMonthlySell(value);
      break;
    case 26:
      var value = new proto.Radar.Event.MonthlyStockExemptionPeriodProfit;
      reader.readMessage(value,proto.Radar.Event.MonthlyStockExemptionPeriodProfit.deserializeBinaryFromReader);
      msg.setMonthlyStockExemptionPeriodProfit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Radar.Event.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Radar.Event.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Radar.Event} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCashFlow();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.Radar.Event.CashFlow.serializeBinaryToWriter
    );
  }
  f = message.getPortfolio();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.Radar.Event.Portfolio.serializeBinaryToWriter
    );
  }
  f = message.getPositionMonthTax();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.Radar.Event.PositionMonthTax.serializeBinaryToWriter
    );
  }
  f = message.getStockExemptMonthTax();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.Radar.Event.StockExemptMonthTax.serializeBinaryToWriter
    );
  }
  f = message.getAccumulatedTaxCredit();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.Radar.Event.AccumulatedTaxCredit.serializeBinaryToWriter
    );
  }
  f = message.getMonthlySell();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.Radar.Event.MonthlySell.serializeBinaryToWriter
    );
  }
  f = message.getMonthlyStockExemptionPeriodProfit();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.Radar.Event.MonthlyStockExemptionPeriodProfit.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Radar.Event.PositionType = {
  SWING_TRADE: 0,
  DAY_TRADE: 1
};

/**
 * @enum {number}
 */
proto.Radar.Event.EquityType = {
  OTHER: 0,
  STOCK: 1,
  OPTION: 2,
  REIT: 3,
  SUBSCRIPTION_RIGHT: 4
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Radar.Event.EquitySource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Radar.Event.EquitySource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Radar.Event.EquitySource.displayName = 'proto.Radar.Event.EquitySource';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Radar.Event.EquitySource.prototype.toObject = function(opt_includeInstance) {
  return proto.Radar.Event.EquitySource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Radar.Event.EquitySource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.EquitySource.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Radar.Event.EquitySource}
 */
proto.Radar.Event.EquitySource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Radar.Event.EquitySource;
  return proto.Radar.Event.EquitySource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Radar.Event.EquitySource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Radar.Event.EquitySource}
 */
proto.Radar.Event.EquitySource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {!proto.Radar.Event.EquityType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Radar.Event.EquitySource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Radar.Event.EquitySource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Radar.Event.EquitySource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.EquitySource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.Radar.Event.EquitySource.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Radar.Event.EquitySource.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional EquityType type = 2;
 * @return {!proto.Radar.Event.EquityType}
 */
proto.Radar.Event.EquitySource.prototype.getType = function() {
  return /** @type {!proto.Radar.Event.EquityType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Radar.Event.EquityType} value */
proto.Radar.Event.EquitySource.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Radar.Event.Source = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Radar.Event.Source.oneofGroups_);
};
goog.inherits(proto.Radar.Event.Source, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Radar.Event.Source.displayName = 'proto.Radar.Event.Source';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Radar.Event.Source.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.Radar.Event.Source.TypeCase = {
  TYPE_NOT_SET: 0,
  OTHER: 1,
  EQUITY: 2
};

/**
 * @return {proto.Radar.Event.Source.TypeCase}
 */
proto.Radar.Event.Source.prototype.getTypeCase = function() {
  return /** @type {proto.Radar.Event.Source.TypeCase} */(jspb.Message.computeOneofCase(this, proto.Radar.Event.Source.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Radar.Event.Source.prototype.toObject = function(opt_includeInstance) {
  return proto.Radar.Event.Source.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Radar.Event.Source} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.Source.toObject = function(includeInstance, msg) {
  var f, obj = {
    other: jspb.Message.getFieldWithDefault(msg, 1, ""),
    equity: (f = msg.getEquity()) && proto.Radar.Event.EquitySource.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Radar.Event.Source}
 */
proto.Radar.Event.Source.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Radar.Event.Source;
  return proto.Radar.Event.Source.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Radar.Event.Source} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Radar.Event.Source}
 */
proto.Radar.Event.Source.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setOther(value);
      break;
    case 2:
      var value = new proto.Radar.Event.EquitySource;
      reader.readMessage(value,proto.Radar.Event.EquitySource.deserializeBinaryFromReader);
      msg.setEquity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Radar.Event.Source.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Radar.Event.Source.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Radar.Event.Source} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.Source.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getEquity();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Radar.Event.EquitySource.serializeBinaryToWriter
    );
  }
};


/**
 * optional string other = 1;
 * @return {string}
 */
proto.Radar.Event.Source.prototype.getOther = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Radar.Event.Source.prototype.setOther = function(value) {
  jspb.Message.setOneofField(this, 1, proto.Radar.Event.Source.oneofGroups_[0], value);
};


proto.Radar.Event.Source.prototype.clearOther = function() {
  jspb.Message.setOneofField(this, 1, proto.Radar.Event.Source.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Radar.Event.Source.prototype.hasOther = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional EquitySource equity = 2;
 * @return {?proto.Radar.Event.EquitySource}
 */
proto.Radar.Event.Source.prototype.getEquity = function() {
  return /** @type{?proto.Radar.Event.EquitySource} */ (
    jspb.Message.getWrapperField(this, proto.Radar.Event.EquitySource, 2));
};


/** @param {?proto.Radar.Event.EquitySource|undefined} value */
proto.Radar.Event.Source.prototype.setEquity = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.Radar.Event.Source.oneofGroups_[0], value);
};


proto.Radar.Event.Source.prototype.clearEquity = function() {
  this.setEquity(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Radar.Event.Source.prototype.hasEquity = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Radar.Event.CashFlow = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Radar.Event.CashFlow, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Radar.Event.CashFlow.displayName = 'proto.Radar.Event.CashFlow';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Radar.Event.CashFlow.prototype.toObject = function(opt_includeInstance) {
  return proto.Radar.Event.CashFlow.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Radar.Event.CashFlow} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.CashFlow.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    value: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    source: (f = msg.getSource()) && proto.Radar.Event.Source.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Radar.Event.CashFlow}
 */
proto.Radar.Event.CashFlow.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Radar.Event.CashFlow;
  return proto.Radar.Event.CashFlow.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Radar.Event.CashFlow} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Radar.Event.CashFlow}
 */
proto.Radar.Event.CashFlow.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Radar.Event.CashFlow.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 3:
      var value = new proto.Radar.Event.Source;
      reader.readMessage(value,proto.Radar.Event.Source.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Radar.Event.CashFlow.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Radar.Event.CashFlow.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Radar.Event.CashFlow} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.CashFlow.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Radar.Event.Source.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Radar.Event.CashFlow.Type = {
  OTHER: 0,
  DIVIDEND: 1,
  INTEREST_ON_OWN_CAPITAL: 2,
  BONUS: 3
};

/**
 * optional Type type = 1;
 * @return {!proto.Radar.Event.CashFlow.Type}
 */
proto.Radar.Event.CashFlow.prototype.getType = function() {
  return /** @type {!proto.Radar.Event.CashFlow.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Radar.Event.CashFlow.Type} value */
proto.Radar.Event.CashFlow.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional double value = 2;
 * @return {number}
 */
proto.Radar.Event.CashFlow.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Radar.Event.CashFlow.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional Source source = 3;
 * @return {?proto.Radar.Event.Source}
 */
proto.Radar.Event.CashFlow.prototype.getSource = function() {
  return /** @type{?proto.Radar.Event.Source} */ (
    jspb.Message.getWrapperField(this, proto.Radar.Event.Source, 3));
};


/** @param {?proto.Radar.Event.Source|undefined} value */
proto.Radar.Event.CashFlow.prototype.setSource = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.Radar.Event.CashFlow.prototype.clearSource = function() {
  this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Radar.Event.CashFlow.prototype.hasSource = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Radar.Event.Portfolio = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Radar.Event.Portfolio.repeatedFields_, null);
};
goog.inherits(proto.Radar.Event.Portfolio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Radar.Event.Portfolio.displayName = 'proto.Radar.Event.Portfolio';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Radar.Event.Portfolio.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Radar.Event.Portfolio.prototype.toObject = function(opt_includeInstance) {
  return proto.Radar.Event.Portfolio.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Radar.Event.Portfolio} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.Portfolio.toObject = function(includeInstance, msg) {
  var f, obj = {
    positionList: jspb.Message.toObjectList(msg.getPositionList(),
    proto.Radar.Event.Portfolio.Position.toObject, includeInstance),
    provisionList: jspb.Message.toObjectList(msg.getProvisionList(),
    proto.Radar.Event.Portfolio.Provision.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Radar.Event.Portfolio}
 */
proto.Radar.Event.Portfolio.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Radar.Event.Portfolio;
  return proto.Radar.Event.Portfolio.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Radar.Event.Portfolio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Radar.Event.Portfolio}
 */
proto.Radar.Event.Portfolio.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Radar.Event.Portfolio.Position;
      reader.readMessage(value,proto.Radar.Event.Portfolio.Position.deserializeBinaryFromReader);
      msg.addPosition(value);
      break;
    case 2:
      var value = new proto.Radar.Event.Portfolio.Provision;
      reader.readMessage(value,proto.Radar.Event.Portfolio.Provision.deserializeBinaryFromReader);
      msg.addProvision(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Radar.Event.Portfolio.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Radar.Event.Portfolio.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Radar.Event.Portfolio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.Portfolio.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Radar.Event.Portfolio.Position.serializeBinaryToWriter
    );
  }
  f = message.getProvisionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Radar.Event.Portfolio.Provision.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Radar.Event.Portfolio.Position = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Radar.Event.Portfolio.Position, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Radar.Event.Portfolio.Position.displayName = 'proto.Radar.Event.Portfolio.Position';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Radar.Event.Portfolio.Position.prototype.toObject = function(opt_includeInstance) {
  return proto.Radar.Event.Portfolio.Position.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Radar.Event.Portfolio.Position} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.Portfolio.Position.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    shares: jspb.Message.getFieldWithDefault(msg, 2, 0),
    value: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    avgPrice: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    equityType: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Radar.Event.Portfolio.Position}
 */
proto.Radar.Event.Portfolio.Position.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Radar.Event.Portfolio.Position;
  return proto.Radar.Event.Portfolio.Position.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Radar.Event.Portfolio.Position} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Radar.Event.Portfolio.Position}
 */
proto.Radar.Event.Portfolio.Position.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setShares(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAvgPrice(value);
      break;
    case 5:
      var value = /** @type {!proto.Radar.Event.EquityType} */ (reader.readEnum());
      msg.setEquityType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Radar.Event.Portfolio.Position.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Radar.Event.Portfolio.Position.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Radar.Event.Portfolio.Position} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.Portfolio.Position.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getShares();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getAvgPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getEquityType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.Radar.Event.Portfolio.Position.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Radar.Event.Portfolio.Position.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 shares = 2;
 * @return {number}
 */
proto.Radar.Event.Portfolio.Position.prototype.getShares = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Radar.Event.Portfolio.Position.prototype.setShares = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double value = 3;
 * @return {number}
 */
proto.Radar.Event.Portfolio.Position.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.Radar.Event.Portfolio.Position.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double avg_price = 4;
 * @return {number}
 */
proto.Radar.Event.Portfolio.Position.prototype.getAvgPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.Radar.Event.Portfolio.Position.prototype.setAvgPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional EquityType equity_type = 5;
 * @return {!proto.Radar.Event.EquityType}
 */
proto.Radar.Event.Portfolio.Position.prototype.getEquityType = function() {
  return /** @type {!proto.Radar.Event.EquityType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.Radar.Event.EquityType} value */
proto.Radar.Event.Portfolio.Position.prototype.setEquityType = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Radar.Event.Portfolio.Provision = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Radar.Event.Portfolio.Provision, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Radar.Event.Portfolio.Provision.displayName = 'proto.Radar.Event.Portfolio.Provision';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Radar.Event.Portfolio.Provision.prototype.toObject = function(opt_includeInstance) {
  return proto.Radar.Event.Portfolio.Provision.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Radar.Event.Portfolio.Provision} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.Portfolio.Provision.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    source: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Radar.Event.Portfolio.Provision}
 */
proto.Radar.Event.Portfolio.Provision.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Radar.Event.Portfolio.Provision;
  return proto.Radar.Event.Portfolio.Provision.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Radar.Event.Portfolio.Provision} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Radar.Event.Portfolio.Provision}
 */
proto.Radar.Event.Portfolio.Provision.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Radar.Event.Portfolio.Provision.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Radar.Event.Portfolio.Provision.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Radar.Event.Portfolio.Provision} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.Portfolio.Provision.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional double value = 1;
 * @return {number}
 */
proto.Radar.Event.Portfolio.Provision.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.Radar.Event.Portfolio.Provision.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional string source = 2;
 * @return {string}
 */
proto.Radar.Event.Portfolio.Provision.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Radar.Event.Portfolio.Provision.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Position position = 1;
 * @return {!Array<!proto.Radar.Event.Portfolio.Position>}
 */
proto.Radar.Event.Portfolio.prototype.getPositionList = function() {
  return /** @type{!Array<!proto.Radar.Event.Portfolio.Position>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Radar.Event.Portfolio.Position, 1));
};


/** @param {!Array<!proto.Radar.Event.Portfolio.Position>} value */
proto.Radar.Event.Portfolio.prototype.setPositionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Radar.Event.Portfolio.Position=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Radar.Event.Portfolio.Position}
 */
proto.Radar.Event.Portfolio.prototype.addPosition = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Radar.Event.Portfolio.Position, opt_index);
};


proto.Radar.Event.Portfolio.prototype.clearPositionList = function() {
  this.setPositionList([]);
};


/**
 * repeated Provision provision = 2;
 * @return {!Array<!proto.Radar.Event.Portfolio.Provision>}
 */
proto.Radar.Event.Portfolio.prototype.getProvisionList = function() {
  return /** @type{!Array<!proto.Radar.Event.Portfolio.Provision>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Radar.Event.Portfolio.Provision, 2));
};


/** @param {!Array<!proto.Radar.Event.Portfolio.Provision>} value */
proto.Radar.Event.Portfolio.prototype.setProvisionList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Radar.Event.Portfolio.Provision=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Radar.Event.Portfolio.Provision}
 */
proto.Radar.Event.Portfolio.prototype.addProvision = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Radar.Event.Portfolio.Provision, opt_index);
};


proto.Radar.Event.Portfolio.prototype.clearProvisionList = function() {
  this.setProvisionList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Radar.Event.PositionMonthTax = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Radar.Event.PositionMonthTax, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Radar.Event.PositionMonthTax.displayName = 'proto.Radar.Event.PositionMonthTax';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Radar.Event.PositionMonthTax.prototype.toObject = function(opt_includeInstance) {
  return proto.Radar.Event.PositionMonthTax.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Radar.Event.PositionMonthTax} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.PositionMonthTax.toObject = function(includeInstance, msg) {
  var f, obj = {
    positionType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    equityType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    value: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Radar.Event.PositionMonthTax}
 */
proto.Radar.Event.PositionMonthTax.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Radar.Event.PositionMonthTax;
  return proto.Radar.Event.PositionMonthTax.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Radar.Event.PositionMonthTax} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Radar.Event.PositionMonthTax}
 */
proto.Radar.Event.PositionMonthTax.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Radar.Event.PositionType} */ (reader.readEnum());
      msg.setPositionType(value);
      break;
    case 2:
      var value = /** @type {!proto.Radar.Event.EquityType} */ (reader.readEnum());
      msg.setEquityType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Radar.Event.PositionMonthTax.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Radar.Event.PositionMonthTax.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Radar.Event.PositionMonthTax} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.PositionMonthTax.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPositionType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEquityType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional PositionType position_type = 1;
 * @return {!proto.Radar.Event.PositionType}
 */
proto.Radar.Event.PositionMonthTax.prototype.getPositionType = function() {
  return /** @type {!proto.Radar.Event.PositionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.Radar.Event.PositionType} value */
proto.Radar.Event.PositionMonthTax.prototype.setPositionType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional EquityType equity_type = 2;
 * @return {!proto.Radar.Event.EquityType}
 */
proto.Radar.Event.PositionMonthTax.prototype.getEquityType = function() {
  return /** @type {!proto.Radar.Event.EquityType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Radar.Event.EquityType} value */
proto.Radar.Event.PositionMonthTax.prototype.setEquityType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional double value = 3;
 * @return {number}
 */
proto.Radar.Event.PositionMonthTax.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.Radar.Event.PositionMonthTax.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Radar.Event.StockExemptMonthTax = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Radar.Event.StockExemptMonthTax, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Radar.Event.StockExemptMonthTax.displayName = 'proto.Radar.Event.StockExemptMonthTax';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Radar.Event.StockExemptMonthTax.prototype.toObject = function(opt_includeInstance) {
  return proto.Radar.Event.StockExemptMonthTax.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Radar.Event.StockExemptMonthTax} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.StockExemptMonthTax.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: +jspb.Message.getFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Radar.Event.StockExemptMonthTax}
 */
proto.Radar.Event.StockExemptMonthTax.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Radar.Event.StockExemptMonthTax;
  return proto.Radar.Event.StockExemptMonthTax.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Radar.Event.StockExemptMonthTax} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Radar.Event.StockExemptMonthTax}
 */
proto.Radar.Event.StockExemptMonthTax.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Radar.Event.StockExemptMonthTax.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Radar.Event.StockExemptMonthTax.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Radar.Event.StockExemptMonthTax} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.StockExemptMonthTax.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * optional double value = 1;
 * @return {number}
 */
proto.Radar.Event.StockExemptMonthTax.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.Radar.Event.StockExemptMonthTax.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Radar.Event.AccumulatedTaxCredit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Radar.Event.AccumulatedTaxCredit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Radar.Event.AccumulatedTaxCredit.displayName = 'proto.Radar.Event.AccumulatedTaxCredit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Radar.Event.AccumulatedTaxCredit.prototype.toObject = function(opt_includeInstance) {
  return proto.Radar.Event.AccumulatedTaxCredit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Radar.Event.AccumulatedTaxCredit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.AccumulatedTaxCredit.toObject = function(includeInstance, msg) {
  var f, obj = {
    swingTrade: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    dayTrade: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    reit: +jspb.Message.getFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Radar.Event.AccumulatedTaxCredit}
 */
proto.Radar.Event.AccumulatedTaxCredit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Radar.Event.AccumulatedTaxCredit;
  return proto.Radar.Event.AccumulatedTaxCredit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Radar.Event.AccumulatedTaxCredit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Radar.Event.AccumulatedTaxCredit}
 */
proto.Radar.Event.AccumulatedTaxCredit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSwingTrade(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDayTrade(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setReit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Radar.Event.AccumulatedTaxCredit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Radar.Event.AccumulatedTaxCredit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Radar.Event.AccumulatedTaxCredit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.AccumulatedTaxCredit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSwingTrade();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getDayTrade();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getReit();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * optional double swing_trade = 1;
 * @return {number}
 */
proto.Radar.Event.AccumulatedTaxCredit.prototype.getSwingTrade = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.Radar.Event.AccumulatedTaxCredit.prototype.setSwingTrade = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double day_trade = 2;
 * @return {number}
 */
proto.Radar.Event.AccumulatedTaxCredit.prototype.getDayTrade = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Radar.Event.AccumulatedTaxCredit.prototype.setDayTrade = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double reit = 3;
 * @return {number}
 */
proto.Radar.Event.AccumulatedTaxCredit.prototype.getReit = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.Radar.Event.AccumulatedTaxCredit.prototype.setReit = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Radar.Event.MonthlySell = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Radar.Event.MonthlySell, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Radar.Event.MonthlySell.displayName = 'proto.Radar.Event.MonthlySell';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Radar.Event.MonthlySell.prototype.toObject = function(opt_includeInstance) {
  return proto.Radar.Event.MonthlySell.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Radar.Event.MonthlySell} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.MonthlySell.toObject = function(includeInstance, msg) {
  var f, obj = {
    swingTrade: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    reit: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Radar.Event.MonthlySell}
 */
proto.Radar.Event.MonthlySell.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Radar.Event.MonthlySell;
  return proto.Radar.Event.MonthlySell.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Radar.Event.MonthlySell} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Radar.Event.MonthlySell}
 */
proto.Radar.Event.MonthlySell.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSwingTrade(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setReit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Radar.Event.MonthlySell.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Radar.Event.MonthlySell.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Radar.Event.MonthlySell} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.MonthlySell.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSwingTrade();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getReit();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double swing_trade = 1;
 * @return {number}
 */
proto.Radar.Event.MonthlySell.prototype.getSwingTrade = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.Radar.Event.MonthlySell.prototype.setSwingTrade = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double reit = 2;
 * @return {number}
 */
proto.Radar.Event.MonthlySell.prototype.getReit = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.Radar.Event.MonthlySell.prototype.setReit = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Radar.Event.MonthlyStockExemptionPeriodProfit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Radar.Event.MonthlyStockExemptionPeriodProfit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Radar.Event.MonthlyStockExemptionPeriodProfit.displayName = 'proto.Radar.Event.MonthlyStockExemptionPeriodProfit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Radar.Event.MonthlyStockExemptionPeriodProfit.prototype.toObject = function(opt_includeInstance) {
  return proto.Radar.Event.MonthlyStockExemptionPeriodProfit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Radar.Event.MonthlyStockExemptionPeriodProfit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.MonthlyStockExemptionPeriodProfit.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    source: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Radar.Event.MonthlyStockExemptionPeriodProfit}
 */
proto.Radar.Event.MonthlyStockExemptionPeriodProfit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Radar.Event.MonthlyStockExemptionPeriodProfit;
  return proto.Radar.Event.MonthlyStockExemptionPeriodProfit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Radar.Event.MonthlyStockExemptionPeriodProfit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Radar.Event.MonthlyStockExemptionPeriodProfit}
 */
proto.Radar.Event.MonthlyStockExemptionPeriodProfit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSource(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Radar.Event.MonthlyStockExemptionPeriodProfit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Radar.Event.MonthlyStockExemptionPeriodProfit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Radar.Event.MonthlyStockExemptionPeriodProfit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.Event.MonthlyStockExemptionPeriodProfit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getSource();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional double value = 1;
 * @return {number}
 */
proto.Radar.Event.MonthlyStockExemptionPeriodProfit.prototype.getValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.Radar.Event.MonthlyStockExemptionPeriodProfit.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional string source = 2;
 * @return {string}
 */
proto.Radar.Event.MonthlyStockExemptionPeriodProfit.prototype.getSource = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Radar.Event.MonthlyStockExemptionPeriodProfit.prototype.setSource = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp date = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.Radar.Event.prototype.getDate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.Radar.Event.prototype.setDate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.Radar.Event.prototype.clearDate = function() {
  this.setDate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Radar.Event.prototype.hasDate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CashFlow cash_flow = 20;
 * @return {?proto.Radar.Event.CashFlow}
 */
proto.Radar.Event.prototype.getCashFlow = function() {
  return /** @type{?proto.Radar.Event.CashFlow} */ (
    jspb.Message.getWrapperField(this, proto.Radar.Event.CashFlow, 20));
};


/** @param {?proto.Radar.Event.CashFlow|undefined} value */
proto.Radar.Event.prototype.setCashFlow = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.Radar.Event.oneofGroups_[0], value);
};


proto.Radar.Event.prototype.clearCashFlow = function() {
  this.setCashFlow(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Radar.Event.prototype.hasCashFlow = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional Portfolio portfolio = 21;
 * @return {?proto.Radar.Event.Portfolio}
 */
proto.Radar.Event.prototype.getPortfolio = function() {
  return /** @type{?proto.Radar.Event.Portfolio} */ (
    jspb.Message.getWrapperField(this, proto.Radar.Event.Portfolio, 21));
};


/** @param {?proto.Radar.Event.Portfolio|undefined} value */
proto.Radar.Event.prototype.setPortfolio = function(value) {
  jspb.Message.setOneofWrapperField(this, 21, proto.Radar.Event.oneofGroups_[0], value);
};


proto.Radar.Event.prototype.clearPortfolio = function() {
  this.setPortfolio(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Radar.Event.prototype.hasPortfolio = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional PositionMonthTax position_month_tax = 22;
 * @return {?proto.Radar.Event.PositionMonthTax}
 */
proto.Radar.Event.prototype.getPositionMonthTax = function() {
  return /** @type{?proto.Radar.Event.PositionMonthTax} */ (
    jspb.Message.getWrapperField(this, proto.Radar.Event.PositionMonthTax, 22));
};


/** @param {?proto.Radar.Event.PositionMonthTax|undefined} value */
proto.Radar.Event.prototype.setPositionMonthTax = function(value) {
  jspb.Message.setOneofWrapperField(this, 22, proto.Radar.Event.oneofGroups_[0], value);
};


proto.Radar.Event.prototype.clearPositionMonthTax = function() {
  this.setPositionMonthTax(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Radar.Event.prototype.hasPositionMonthTax = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional StockExemptMonthTax stock_exempt_month_tax = 23;
 * @return {?proto.Radar.Event.StockExemptMonthTax}
 */
proto.Radar.Event.prototype.getStockExemptMonthTax = function() {
  return /** @type{?proto.Radar.Event.StockExemptMonthTax} */ (
    jspb.Message.getWrapperField(this, proto.Radar.Event.StockExemptMonthTax, 23));
};


/** @param {?proto.Radar.Event.StockExemptMonthTax|undefined} value */
proto.Radar.Event.prototype.setStockExemptMonthTax = function(value) {
  jspb.Message.setOneofWrapperField(this, 23, proto.Radar.Event.oneofGroups_[0], value);
};


proto.Radar.Event.prototype.clearStockExemptMonthTax = function() {
  this.setStockExemptMonthTax(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Radar.Event.prototype.hasStockExemptMonthTax = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional AccumulatedTaxCredit accumulated_tax_credit = 24;
 * @return {?proto.Radar.Event.AccumulatedTaxCredit}
 */
proto.Radar.Event.prototype.getAccumulatedTaxCredit = function() {
  return /** @type{?proto.Radar.Event.AccumulatedTaxCredit} */ (
    jspb.Message.getWrapperField(this, proto.Radar.Event.AccumulatedTaxCredit, 24));
};


/** @param {?proto.Radar.Event.AccumulatedTaxCredit|undefined} value */
proto.Radar.Event.prototype.setAccumulatedTaxCredit = function(value) {
  jspb.Message.setOneofWrapperField(this, 24, proto.Radar.Event.oneofGroups_[0], value);
};


proto.Radar.Event.prototype.clearAccumulatedTaxCredit = function() {
  this.setAccumulatedTaxCredit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Radar.Event.prototype.hasAccumulatedTaxCredit = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional MonthlySell monthly_sell = 25;
 * @return {?proto.Radar.Event.MonthlySell}
 */
proto.Radar.Event.prototype.getMonthlySell = function() {
  return /** @type{?proto.Radar.Event.MonthlySell} */ (
    jspb.Message.getWrapperField(this, proto.Radar.Event.MonthlySell, 25));
};


/** @param {?proto.Radar.Event.MonthlySell|undefined} value */
proto.Radar.Event.prototype.setMonthlySell = function(value) {
  jspb.Message.setOneofWrapperField(this, 25, proto.Radar.Event.oneofGroups_[0], value);
};


proto.Radar.Event.prototype.clearMonthlySell = function() {
  this.setMonthlySell(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Radar.Event.prototype.hasMonthlySell = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional MonthlyStockExemptionPeriodProfit monthly_stock_exemption_period_profit = 26;
 * @return {?proto.Radar.Event.MonthlyStockExemptionPeriodProfit}
 */
proto.Radar.Event.prototype.getMonthlyStockExemptionPeriodProfit = function() {
  return /** @type{?proto.Radar.Event.MonthlyStockExemptionPeriodProfit} */ (
    jspb.Message.getWrapperField(this, proto.Radar.Event.MonthlyStockExemptionPeriodProfit, 26));
};


/** @param {?proto.Radar.Event.MonthlyStockExemptionPeriodProfit|undefined} value */
proto.Radar.Event.prototype.setMonthlyStockExemptionPeriodProfit = function(value) {
  jspb.Message.setOneofWrapperField(this, 26, proto.Radar.Event.oneofGroups_[0], value);
};


proto.Radar.Event.prototype.clearMonthlyStockExemptionPeriodProfit = function() {
  this.setMonthlyStockExemptionPeriodProfit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Radar.Event.prototype.hasMonthlyStockExemptionPeriodProfit = function() {
  return jspb.Message.getField(this, 26) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Radar.RunReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Radar.RunReq.repeatedFields_, null);
};
goog.inherits(proto.Radar.RunReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Radar.RunReq.displayName = 'proto.Radar.RunReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Radar.RunReq.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Radar.RunReq.prototype.toObject = function(opt_includeInstance) {
  return proto.Radar.RunReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Radar.RunReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.RunReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    portfolioId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventsList: jspb.Message.getRepeatedField(msg, 3),
    upto: (f = msg.getUpto()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Radar.RunReq}
 */
proto.Radar.RunReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Radar.RunReq;
  return proto.Radar.RunReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Radar.RunReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Radar.RunReq}
 */
proto.Radar.RunReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPortfolioId(value);
      break;
    case 3:
      var value = /** @type {!Array<!proto.Radar.RunReq.Event>} */ (reader.readPackedEnum());
      msg.setEventsList(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpto(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Radar.RunReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Radar.RunReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Radar.RunReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Radar.RunReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPortfolioId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEventsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      3,
      f
    );
  }
  f = message.getUpto();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Radar.RunReq.Event = {
  CASH_FLOW: 0,
  EACH_DAY: 1,
  EACH_MONTH: 2
};

/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.Radar.RunReq.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Radar.RunReq.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string portfolio_id = 2;
 * @return {string}
 */
proto.Radar.RunReq.prototype.getPortfolioId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Radar.RunReq.prototype.setPortfolioId = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated Event events = 3;
 * @return {!Array<!proto.Radar.RunReq.Event>}
 */
proto.Radar.RunReq.prototype.getEventsList = function() {
  return /** @type {!Array<!proto.Radar.RunReq.Event>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<!proto.Radar.RunReq.Event>} value */
proto.Radar.RunReq.prototype.setEventsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!proto.Radar.RunReq.Event} value
 * @param {number=} opt_index
 */
proto.Radar.RunReq.prototype.addEvents = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.Radar.RunReq.prototype.clearEventsList = function() {
  this.setEventsList([]);
};


/**
 * optional google.protobuf.Timestamp upto = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.Radar.RunReq.prototype.getUpto = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.Radar.RunReq.prototype.setUpto = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.Radar.RunReq.prototype.clearUpto = function() {
  this.setUpto(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Radar.RunReq.prototype.hasUpto = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.Radar);

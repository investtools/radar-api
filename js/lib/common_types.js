//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var EquityId = module.exports.EquityId = function(args) {
  this.symbol = null;
  if (args) {
    if (args.symbol !== undefined && args.symbol !== null) {
      this.symbol = args.symbol;
    }
  }
};
EquityId.prototype = {};
EquityId.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EquityId.prototype.write = function(output) {
  output.writeStructBegin('EquityId');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var IndexId = module.exports.IndexId = function(args) {
  this.symbol = null;
  if (args) {
    if (args.symbol !== undefined && args.symbol !== null) {
      this.symbol = args.symbol;
    }
  }
};
IndexId.prototype = {};
IndexId.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IndexId.prototype.write = function(output) {
  output.writeStructBegin('IndexId');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FundId = module.exports.FundId = function(args) {
  this.cnpj = null;
  if (args) {
    if (args.cnpj !== undefined && args.cnpj !== null) {
      this.cnpj = args.cnpj;
    }
  }
};
FundId.prototype = {};
FundId.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.cnpj = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FundId.prototype.write = function(output) {
  output.writeStructBegin('FundId');
  if (this.cnpj !== null && this.cnpj !== undefined) {
    output.writeFieldBegin('cnpj', Thrift.Type.STRING, 1);
    output.writeString(this.cnpj);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CorporateBondId = module.exports.CorporateBondId = function(args) {
  this.index = null;
  this.factor = null;
  this.rate = null;
  this.base_date = null;
  this.maturity_date = null;
  if (args) {
    if (args.index !== undefined && args.index !== null) {
      this.index = new ttypes.IndexId(args.index);
    }
    if (args.factor !== undefined && args.factor !== null) {
      this.factor = args.factor;
    }
    if (args.rate !== undefined && args.rate !== null) {
      this.rate = args.rate;
    }
    if (args.base_date !== undefined && args.base_date !== null) {
      this.base_date = args.base_date;
    }
    if (args.maturity_date !== undefined && args.maturity_date !== null) {
      this.maturity_date = args.maturity_date;
    }
  }
};
CorporateBondId.prototype = {};
CorporateBondId.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.index = new ttypes.IndexId();
        this.index.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.factor = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rate = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.base_date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.maturity_date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CorporateBondId.prototype.write = function(output) {
  output.writeStructBegin('CorporateBondId');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.STRUCT, 1);
    this.index.write(output);
    output.writeFieldEnd();
  }
  if (this.factor !== null && this.factor !== undefined) {
    output.writeFieldBegin('factor', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.factor);
    output.writeFieldEnd();
  }
  if (this.rate !== null && this.rate !== undefined) {
    output.writeFieldBegin('rate', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.rate);
    output.writeFieldEnd();
  }
  if (this.base_date !== null && this.base_date !== undefined) {
    output.writeFieldBegin('base_date', Thrift.Type.I64, 3);
    output.writeI64(this.base_date);
    output.writeFieldEnd();
  }
  if (this.maturity_date !== null && this.maturity_date !== undefined) {
    output.writeFieldBegin('maturity_date', Thrift.Type.I64, 4);
    output.writeI64(this.maturity_date);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GovernmentBondId = module.exports.GovernmentBondId = function(args) {
  this.name = null;
  this.maturity_date = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.maturity_date !== undefined && args.maturity_date !== null) {
      this.maturity_date = args.maturity_date;
    }
  }
};
GovernmentBondId.prototype = {};
GovernmentBondId.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.maturity_date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GovernmentBondId.prototype.write = function(output) {
  output.writeStructBegin('GovernmentBondId');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.maturity_date !== null && this.maturity_date !== undefined) {
    output.writeFieldBegin('maturity_date', Thrift.Type.I64, 2);
    output.writeI64(this.maturity_date);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CustomSecurityId = module.exports.CustomSecurityId = function(args) {
  this.user_id = null;
  this.id = null;
  if (args) {
    if (args.user_id !== undefined && args.user_id !== null) {
      this.user_id = args.user_id;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
CustomSecurityId.prototype = {};
CustomSecurityId.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.user_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomSecurityId.prototype.write = function(output) {
  output.writeStructBegin('CustomSecurityId');
  if (this.user_id !== null && this.user_id !== undefined) {
    output.writeFieldBegin('user_id', Thrift.Type.STRING, 1);
    output.writeString(this.user_id);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SecurityId = module.exports.SecurityId = function(args) {
  this.stock = null;
  this.fund = null;
  this.corporate_bond = null;
  this.government_bond = null;
  this.custom_security = null;
  if (args) {
    if (args.stock !== undefined && args.stock !== null) {
      this.stock = new ttypes.EquityId(args.stock);
    }
    if (args.fund !== undefined && args.fund !== null) {
      this.fund = new ttypes.FundId(args.fund);
    }
    if (args.corporate_bond !== undefined && args.corporate_bond !== null) {
      this.corporate_bond = new ttypes.CorporateBondId(args.corporate_bond);
    }
    if (args.government_bond !== undefined && args.government_bond !== null) {
      this.government_bond = new ttypes.GovernmentBondId(args.government_bond);
    }
    if (args.custom_security !== undefined && args.custom_security !== null) {
      this.custom_security = new ttypes.CustomSecurityId(args.custom_security);
    }
  }
};
SecurityId.prototype = {};
SecurityId.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.stock = new ttypes.EquityId();
        this.stock.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.fund = new ttypes.FundId();
        this.fund.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.corporate_bond = new ttypes.CorporateBondId();
        this.corporate_bond.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.government_bond = new ttypes.GovernmentBondId();
        this.government_bond.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.custom_security = new ttypes.CustomSecurityId();
        this.custom_security.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityId.prototype.write = function(output) {
  output.writeStructBegin('SecurityId');
  if (this.stock !== null && this.stock !== undefined) {
    output.writeFieldBegin('stock', Thrift.Type.STRUCT, 1);
    this.stock.write(output);
    output.writeFieldEnd();
  }
  if (this.fund !== null && this.fund !== undefined) {
    output.writeFieldBegin('fund', Thrift.Type.STRUCT, 2);
    this.fund.write(output);
    output.writeFieldEnd();
  }
  if (this.corporate_bond !== null && this.corporate_bond !== undefined) {
    output.writeFieldBegin('corporate_bond', Thrift.Type.STRUCT, 3);
    this.corporate_bond.write(output);
    output.writeFieldEnd();
  }
  if (this.government_bond !== null && this.government_bond !== undefined) {
    output.writeFieldBegin('government_bond', Thrift.Type.STRUCT, 4);
    this.government_bond.write(output);
    output.writeFieldEnd();
  }
  if (this.custom_security !== null && this.custom_security !== undefined) {
    output.writeFieldBegin('custom_security', Thrift.Type.STRUCT, 5);
    this.custom_security.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Broker = module.exports.Broker = function(args) {
  this.code = null;
  this.name = null;
  this.segment = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.segment !== undefined && args.segment !== null) {
      this.segment = args.segment;
    }
  }
};
Broker.prototype = {};
Broker.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.segment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Broker.prototype.write = function(output) {
  output.writeStructBegin('Broker');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 1);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.segment !== null && this.segment !== undefined) {
    output.writeFieldBegin('segment', Thrift.Type.STRING, 3);
    output.writeString(this.segment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ApplicationError = module.exports.ApplicationError = function(args) {
  Thrift.TException.call(this, "ApplicationError");
  this.name = "ApplicationError";
  this.message = null;
  this.stacktrace = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.stacktrace !== undefined && args.stacktrace !== null) {
      this.stacktrace = Thrift.copyList(args.stacktrace, [null]);
    }
  }
};
Thrift.inherits(ApplicationError, Thrift.TException);
ApplicationError.prototype.name = 'ApplicationError';
ApplicationError.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.stacktrace = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = input.readString();
          this.stacktrace.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ApplicationError.prototype.write = function(output) {
  output.writeStructBegin('ApplicationError');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.stacktrace !== null && this.stacktrace !== undefined) {
    output.writeFieldBegin('stacktrace', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.stacktrace.length);
    for (var iter4 in this.stacktrace) {
      if (this.stacktrace.hasOwnProperty(iter4)) {
        iter4 = this.stacktrace[iter4];
        output.writeString(iter4);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var ttypes = module.exports = {};
ttypes.SecurityLendingAndBorrowingType = {
  'LENDER' : 1,
  'BORROWER' : 2
};
ttypes.TransferType = {
  'IN' : 1,
  'OUT' : 2
};
var EquityBuy = module.exports.EquityBuy = function(args) {
  this.date = null;
  this.equity = null;
  this.shares = null;
  this.price = null;
  if (args) {
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
    if (args.equity !== undefined && args.equity !== null) {
      this.equity = new common_ttypes.EquityId(args.equity);
    }
    if (args.shares !== undefined && args.shares !== null) {
      this.shares = args.shares;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
  }
};
EquityBuy.prototype = {};
EquityBuy.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.equity = new common_ttypes.EquityId();
        this.equity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.shares = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EquityBuy.prototype.write = function(output) {
  output.writeStructBegin('EquityBuy');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I64, 1);
    output.writeI64(this.date);
    output.writeFieldEnd();
  }
  if (this.equity !== null && this.equity !== undefined) {
    output.writeFieldBegin('equity', Thrift.Type.STRUCT, 2);
    this.equity.write(output);
    output.writeFieldEnd();
  }
  if (this.shares !== null && this.shares !== undefined) {
    output.writeFieldBegin('shares', Thrift.Type.I32, 3);
    output.writeI32(this.shares);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EquitySell = module.exports.EquitySell = function(args) {
  this.date = null;
  this.equity = null;
  this.shares = null;
  this.price = null;
  if (args) {
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
    if (args.equity !== undefined && args.equity !== null) {
      this.equity = new common_ttypes.EquityId(args.equity);
    }
    if (args.shares !== undefined && args.shares !== null) {
      this.shares = args.shares;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
  }
};
EquitySell.prototype = {};
EquitySell.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.equity = new common_ttypes.EquityId();
        this.equity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.shares = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EquitySell.prototype.write = function(output) {
  output.writeStructBegin('EquitySell');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I64, 1);
    output.writeI64(this.date);
    output.writeFieldEnd();
  }
  if (this.equity !== null && this.equity !== undefined) {
    output.writeFieldBegin('equity', Thrift.Type.STRUCT, 2);
    this.equity.write(output);
    output.writeFieldEnd();
  }
  if (this.shares !== null && this.shares !== undefined) {
    output.writeFieldBegin('shares', Thrift.Type.I32, 3);
    output.writeI32(this.shares);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EquityPositionSnapshot = module.exports.EquityPositionSnapshot = function(args) {
  this.date = null;
  this.equity = null;
  this.shares = null;
  this.price = null;
  if (args) {
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
    if (args.equity !== undefined && args.equity !== null) {
      this.equity = new common_ttypes.EquityId(args.equity);
    }
    if (args.shares !== undefined && args.shares !== null) {
      this.shares = args.shares;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
  }
};
EquityPositionSnapshot.prototype = {};
EquityPositionSnapshot.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.equity = new common_ttypes.EquityId();
        this.equity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.shares = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EquityPositionSnapshot.prototype.write = function(output) {
  output.writeStructBegin('EquityPositionSnapshot');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I64, 1);
    output.writeI64(this.date);
    output.writeFieldEnd();
  }
  if (this.equity !== null && this.equity !== undefined) {
    output.writeFieldBegin('equity', Thrift.Type.STRUCT, 2);
    this.equity.write(output);
    output.writeFieldEnd();
  }
  if (this.shares !== null && this.shares !== undefined) {
    output.writeFieldBegin('shares', Thrift.Type.I32, 3);
    output.writeI32(this.shares);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SecurityLendingAndBorrowing = module.exports.SecurityLendingAndBorrowing = function(args) {
  this.date = null;
  this.stock = null;
  this.shares = null;
  this.rate = null;
  this.due = null;
  this.type = null;
  this.contract = null;
  if (args) {
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
    if (args.stock !== undefined && args.stock !== null) {
      this.stock = new common_ttypes.EquityId(args.stock);
    }
    if (args.shares !== undefined && args.shares !== null) {
      this.shares = args.shares;
    }
    if (args.rate !== undefined && args.rate !== null) {
      this.rate = args.rate;
    }
    if (args.due !== undefined && args.due !== null) {
      this.due = args.due;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.contract !== undefined && args.contract !== null) {
      this.contract = args.contract;
    }
  }
};
SecurityLendingAndBorrowing.prototype = {};
SecurityLendingAndBorrowing.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stock = new common_ttypes.EquityId();
        this.stock.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.shares = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rate = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.due = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.contract = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityLendingAndBorrowing.prototype.write = function(output) {
  output.writeStructBegin('SecurityLendingAndBorrowing');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I64, 1);
    output.writeI64(this.date);
    output.writeFieldEnd();
  }
  if (this.stock !== null && this.stock !== undefined) {
    output.writeFieldBegin('stock', Thrift.Type.STRUCT, 2);
    this.stock.write(output);
    output.writeFieldEnd();
  }
  if (this.shares !== null && this.shares !== undefined) {
    output.writeFieldBegin('shares', Thrift.Type.I32, 3);
    output.writeI32(this.shares);
    output.writeFieldEnd();
  }
  if (this.rate !== null && this.rate !== undefined) {
    output.writeFieldBegin('rate', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.rate);
    output.writeFieldEnd();
  }
  if (this.due !== null && this.due !== undefined) {
    output.writeFieldBegin('due', Thrift.Type.I64, 5);
    output.writeI64(this.due);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 6);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.contract !== null && this.contract !== undefined) {
    output.writeFieldBegin('contract', Thrift.Type.STRING, 7);
    output.writeString(this.contract);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SecurityLendingAndBorrowingReturning = module.exports.SecurityLendingAndBorrowingReturning = function(args) {
  this.date = null;
  this.stock = null;
  this.shares = null;
  this.value = null;
  this.type = null;
  if (args) {
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
    if (args.stock !== undefined && args.stock !== null) {
      this.stock = new common_ttypes.EquityId(args.stock);
    }
    if (args.shares !== undefined && args.shares !== null) {
      this.shares = args.shares;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
SecurityLendingAndBorrowingReturning.prototype = {};
SecurityLendingAndBorrowingReturning.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stock = new common_ttypes.EquityId();
        this.stock.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.shares = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SecurityLendingAndBorrowingReturning.prototype.write = function(output) {
  output.writeStructBegin('SecurityLendingAndBorrowingReturning');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I64, 1);
    output.writeI64(this.date);
    output.writeFieldEnd();
  }
  if (this.stock !== null && this.stock !== undefined) {
    output.writeFieldBegin('stock', Thrift.Type.STRUCT, 2);
    this.stock.write(output);
    output.writeFieldEnd();
  }
  if (this.shares !== null && this.shares !== undefined) {
    output.writeFieldBegin('shares', Thrift.Type.I32, 3);
    output.writeI32(this.shares);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CommissionExpense = module.exports.CommissionExpense = function(args) {
  this.date = null;
  this.amount = null;
  this.description = null;
  if (args) {
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = args.amount;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
CommissionExpense.prototype = {};
CommissionExpense.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.amount = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommissionExpense.prototype.write = function(output) {
  output.writeStructBegin('CommissionExpense');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I64, 1);
    output.writeI64(this.date);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.amount);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 3);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Transfer = module.exports.Transfer = function(args) {
  this.date = null;
  this.stock = null;
  this.shares = null;
  this.type = null;
  if (args) {
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
    if (args.stock !== undefined && args.stock !== null) {
      this.stock = new common_ttypes.EquityId(args.stock);
    }
    if (args.shares !== undefined && args.shares !== null) {
      this.shares = args.shares;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
Transfer.prototype = {};
Transfer.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stock = new common_ttypes.EquityId();
        this.stock.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.shares = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Transfer.prototype.write = function(output) {
  output.writeStructBegin('Transfer');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I64, 1);
    output.writeI64(this.date);
    output.writeFieldEnd();
  }
  if (this.stock !== null && this.stock !== undefined) {
    output.writeFieldBegin('stock', Thrift.Type.STRUCT, 2);
    this.stock.write(output);
    output.writeFieldEnd();
  }
  if (this.shares !== null && this.shares !== undefined) {
    output.writeFieldBegin('shares', Thrift.Type.I32, 3);
    output.writeI32(this.shares);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var OptionExercise = module.exports.OptionExercise = function(args) {
  this.date = null;
  this.option = null;
  this.shares = null;
  this.strike = null;
  if (args) {
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
    if (args.option !== undefined && args.option !== null) {
      this.option = new common_ttypes.EquityId(args.option);
    }
    if (args.shares !== undefined && args.shares !== null) {
      this.shares = args.shares;
    }
    if (args.strike !== undefined && args.strike !== null) {
      this.strike = args.strike;
    }
  }
};
OptionExercise.prototype = {};
OptionExercise.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.option = new common_ttypes.EquityId();
        this.option.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.shares = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.strike = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

OptionExercise.prototype.write = function(output) {
  output.writeStructBegin('OptionExercise');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I64, 1);
    output.writeI64(this.date);
    output.writeFieldEnd();
  }
  if (this.option !== null && this.option !== undefined) {
    output.writeFieldBegin('option', Thrift.Type.STRUCT, 2);
    this.option.write(output);
    output.writeFieldEnd();
  }
  if (this.shares !== null && this.shares !== undefined) {
    output.writeFieldBegin('shares', Thrift.Type.I32, 3);
    output.writeI32(this.shares);
    output.writeFieldEnd();
  }
  if (this.strike !== null && this.strike !== undefined) {
    output.writeFieldBegin('strike', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.strike);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Transaction = module.exports.Transaction = function(args) {
  this.equity_buy = null;
  this.equity_sell = null;
  this.equity_position_snapshot = null;
  this.slb = null;
  this.slbr = null;
  this.stock_commission_expense = null;
  this.transfer = null;
  this.option_exercise = null;
  if (args) {
    if (args.equity_buy !== undefined && args.equity_buy !== null) {
      this.equity_buy = new ttypes.EquityBuy(args.equity_buy);
    }
    if (args.equity_sell !== undefined && args.equity_sell !== null) {
      this.equity_sell = new ttypes.EquitySell(args.equity_sell);
    }
    if (args.equity_position_snapshot !== undefined && args.equity_position_snapshot !== null) {
      this.equity_position_snapshot = new ttypes.EquityPositionSnapshot(args.equity_position_snapshot);
    }
    if (args.slb !== undefined && args.slb !== null) {
      this.slb = new ttypes.SecurityLendingAndBorrowing(args.slb);
    }
    if (args.slbr !== undefined && args.slbr !== null) {
      this.slbr = new ttypes.SecurityLendingAndBorrowingReturning(args.slbr);
    }
    if (args.stock_commission_expense !== undefined && args.stock_commission_expense !== null) {
      this.stock_commission_expense = new ttypes.CommissionExpense(args.stock_commission_expense);
    }
    if (args.transfer !== undefined && args.transfer !== null) {
      this.transfer = new ttypes.Transfer(args.transfer);
    }
    if (args.option_exercise !== undefined && args.option_exercise !== null) {
      this.option_exercise = new ttypes.OptionExercise(args.option_exercise);
    }
  }
};
Transaction.prototype = {};
Transaction.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.equity_buy = new ttypes.EquityBuy();
        this.equity_buy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.equity_sell = new ttypes.EquitySell();
        this.equity_sell.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.equity_position_snapshot = new ttypes.EquityPositionSnapshot();
        this.equity_position_snapshot.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.slb = new ttypes.SecurityLendingAndBorrowing();
        this.slb.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.slbr = new ttypes.SecurityLendingAndBorrowingReturning();
        this.slbr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.stock_commission_expense = new ttypes.CommissionExpense();
        this.stock_commission_expense.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.transfer = new ttypes.Transfer();
        this.transfer.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.option_exercise = new ttypes.OptionExercise();
        this.option_exercise.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Transaction.prototype.write = function(output) {
  output.writeStructBegin('Transaction');
  if (this.equity_buy !== null && this.equity_buy !== undefined) {
    output.writeFieldBegin('equity_buy', Thrift.Type.STRUCT, 1);
    this.equity_buy.write(output);
    output.writeFieldEnd();
  }
  if (this.equity_sell !== null && this.equity_sell !== undefined) {
    output.writeFieldBegin('equity_sell', Thrift.Type.STRUCT, 2);
    this.equity_sell.write(output);
    output.writeFieldEnd();
  }
  if (this.equity_position_snapshot !== null && this.equity_position_snapshot !== undefined) {
    output.writeFieldBegin('equity_position_snapshot', Thrift.Type.STRUCT, 3);
    this.equity_position_snapshot.write(output);
    output.writeFieldEnd();
  }
  if (this.slb !== null && this.slb !== undefined) {
    output.writeFieldBegin('slb', Thrift.Type.STRUCT, 4);
    this.slb.write(output);
    output.writeFieldEnd();
  }
  if (this.slbr !== null && this.slbr !== undefined) {
    output.writeFieldBegin('slbr', Thrift.Type.STRUCT, 5);
    this.slbr.write(output);
    output.writeFieldEnd();
  }
  if (this.stock_commission_expense !== null && this.stock_commission_expense !== undefined) {
    output.writeFieldBegin('stock_commission_expense', Thrift.Type.STRUCT, 6);
    this.stock_commission_expense.write(output);
    output.writeFieldEnd();
  }
  if (this.transfer !== null && this.transfer !== undefined) {
    output.writeFieldBegin('transfer', Thrift.Type.STRUCT, 7);
    this.transfer.write(output);
    output.writeFieldEnd();
  }
  if (this.option_exercise !== null && this.option_exercise !== undefined) {
    output.writeFieldBegin('option_exercise', Thrift.Type.STRUCT, 8);
    this.option_exercise.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


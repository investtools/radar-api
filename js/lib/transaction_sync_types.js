//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types')


var ttypes = module.exports = {};
ttypes.StockBuyTransactionType = {
  'REGULAR' : 1,
  'IPO' : 2
};
Transaction = module.exports.Transaction = function(args) {
  this.stock_buy = null;
  this.stock_sell = null;
  if (args) {
    if (args.stock_buy !== undefined) {
      this.stock_buy = args.stock_buy;
    }
    if (args.stock_sell !== undefined) {
      this.stock_sell = args.stock_sell;
    }
  }
};
Transaction.prototype = {};
Transaction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.stock_buy = new ttypes.StockBuyTransaction();
        this.stock_buy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stock_sell = new ttypes.StockSellTransaction();
        this.stock_sell.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Transaction.prototype.write = function(output) {
  output.writeStructBegin('Transaction');
  if (this.stock_buy !== null && this.stock_buy !== undefined) {
    output.writeFieldBegin('stock_buy', Thrift.Type.STRUCT, 1);
    this.stock_buy.write(output);
    output.writeFieldEnd();
  }
  if (this.stock_sell !== null && this.stock_sell !== undefined) {
    output.writeFieldBegin('stock_sell', Thrift.Type.STRUCT, 2);
    this.stock_sell.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockBuyTransaction = module.exports.StockBuyTransaction = function(args) {
  this.date = null;
  this.stock = null;
  this.shares = null;
  this.price = null;
  this.type = 1;
  if (args) {
    if (args.date !== undefined) {
      this.date = args.date;
    }
    if (args.stock !== undefined) {
      this.stock = args.stock;
    }
    if (args.shares !== undefined) {
      this.shares = args.shares;
    }
    if (args.price !== undefined) {
      this.price = args.price;
    }
    if (args.type !== undefined) {
      this.type = args.type;
    }
  }
};
StockBuyTransaction.prototype = {};
StockBuyTransaction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.date = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stock = new common_ttypes.StockId();
        this.stock.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.shares = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockBuyTransaction.prototype.write = function(output) {
  output.writeStructBegin('StockBuyTransaction');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I32, 1);
    output.writeI32(this.date);
    output.writeFieldEnd();
  }
  if (this.stock !== null && this.stock !== undefined) {
    output.writeFieldBegin('stock', Thrift.Type.STRUCT, 2);
    this.stock.write(output);
    output.writeFieldEnd();
  }
  if (this.shares !== null && this.shares !== undefined) {
    output.writeFieldBegin('shares', Thrift.Type.I32, 3);
    output.writeI32(this.shares);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 5);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StockSellTransaction = module.exports.StockSellTransaction = function(args) {
  this.date = null;
  this.stock = null;
  this.shares = null;
  this.price = null;
  if (args) {
    if (args.date !== undefined) {
      this.date = args.date;
    }
    if (args.stock !== undefined) {
      this.stock = args.stock;
    }
    if (args.shares !== undefined) {
      this.shares = args.shares;
    }
    if (args.price !== undefined) {
      this.price = args.price;
    }
  }
};
StockSellTransaction.prototype = {};
StockSellTransaction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.date = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stock = new common_ttypes.StockId();
        this.stock.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.shares = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StockSellTransaction.prototype.write = function(output) {
  output.writeStructBegin('StockSellTransaction');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I32, 1);
    output.writeI32(this.date);
    output.writeFieldEnd();
  }
  if (this.stock !== null && this.stock !== undefined) {
    output.writeFieldBegin('stock', Thrift.Type.STRUCT, 2);
    this.stock.write(output);
    output.writeFieldEnd();
  }
  if (this.shares !== null && this.shares !== undefined) {
    output.writeFieldBegin('shares', Thrift.Type.I32, 3);
    output.writeI32(this.shares);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TransactionSynchronizerConfig = module.exports.TransactionSynchronizerConfig = function(args) {
  this.id = null;
  this.name = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.name !== undefined) {
      this.name = args.name;
    }
  }
};
TransactionSynchronizerConfig.prototype = {};
TransactionSynchronizerConfig.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionSynchronizerConfig.prototype.write = function(output) {
  output.writeStructBegin('TransactionSynchronizerConfig');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


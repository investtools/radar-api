//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types')


var ttypes = module.exports = {};
ttypes.LineSeriesType = {
  'LINE' : 0,
  'AREA' : 1
};
ttypes.Event = {
  'EACH_DAY' : 0,
  'EACH_MONTH' : 1,
  'CASH_FLOW' : 2,
  'FINISH' : 3
};
ttypes.ResultType = {
  'TABLE' : 0,
  'PIE_CHART' : 1,
  'LINE_CHART' : 2,
  'BAR_CHART' : 3
};
ttypes.CashFlowType = {
  'DIVIDEND' : 0,
  'INTEREST_ON_OWN_CAPITAL' : 1,
  'DEPOSIT' : 2,
  'WITHDRAWAL' : 3
};
Point = module.exports.Point = function(args) {
  this.x = null;
  this.y = null;
  if (args) {
    if (args.x !== undefined && args.x !== null) {
      this.x = args.x;
    }
    if (args.y !== undefined && args.y !== null) {
      this.y = args.y;
    }
  }
};
Point.prototype = {};
Point.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.x = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.y = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Point.prototype.write = function(output) {
  output.writeStructBegin('Point');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.I32, 1);
    output.writeI32(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.y);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PieSeries = module.exports.PieSeries = function(args) {
  this.name = null;
  this.value = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
PieSeries.prototype = {};
PieSeries.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PieSeries.prototype.write = function(output) {
  output.writeStructBegin('PieSeries');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PieChart = module.exports.PieChart = function(args) {
  this.title = null;
  this.series = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.series !== undefined && args.series !== null) {
      this.series = Thrift.copyList(args.series, [ttypes.PieSeries]);
    }
  }
};
PieChart.prototype = {};
PieChart.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.series = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.PieSeries();
          elem6.read(input);
          this.series.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PieChart.prototype.write = function(output) {
  output.writeStructBegin('PieChart');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.series !== null && this.series !== undefined) {
    output.writeFieldBegin('series', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.series.length);
    for (var iter7 in this.series)
    {
      if (this.series.hasOwnProperty(iter7))
      {
        iter7 = this.series[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineSeries = module.exports.LineSeries = function(args) {
  this.name = null;
  this.points = null;
  this.type = 0;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.points !== undefined && args.points !== null) {
      this.points = Thrift.copyList(args.points, [ttypes.Point]);
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
LineSeries.prototype = {};
LineSeries.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.points = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.Point();
          elem14.read(input);
          this.points.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineSeries.prototype.write = function(output) {
  output.writeStructBegin('LineSeries');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.points !== null && this.points !== undefined) {
    output.writeFieldBegin('points', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.points.length);
    for (var iter15 in this.points)
    {
      if (this.points.hasOwnProperty(iter15))
      {
        iter15 = this.points[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineChartOptions = module.exports.LineChartOptions = function(args) {
  this.stacked = null;
  this.compare = null;
  if (args) {
    if (args.stacked !== undefined && args.stacked !== null) {
      this.stacked = args.stacked;
    }
    if (args.compare !== undefined && args.compare !== null) {
      this.compare = args.compare;
    }
  }
};
LineChartOptions.prototype = {};
LineChartOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.stacked = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.compare = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineChartOptions.prototype.write = function(output) {
  output.writeStructBegin('LineChartOptions');
  if (this.stacked !== null && this.stacked !== undefined) {
    output.writeFieldBegin('stacked', Thrift.Type.BOOL, 1);
    output.writeBool(this.stacked);
    output.writeFieldEnd();
  }
  if (this.compare !== null && this.compare !== undefined) {
    output.writeFieldBegin('compare', Thrift.Type.BOOL, 2);
    output.writeBool(this.compare);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

LineChart = module.exports.LineChart = function(args) {
  this.title = null;
  this.series = null;
  this.options = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.series !== undefined && args.series !== null) {
      this.series = Thrift.copyList(args.series, [ttypes.LineSeries]);
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new ttypes.LineChartOptions(args.options);
    }
  }
};
LineChart.prototype = {};
LineChart.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.series = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.LineSeries();
          elem22.read(input);
          this.series.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.LineChartOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineChart.prototype.write = function(output) {
  output.writeStructBegin('LineChart');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.series !== null && this.series !== undefined) {
    output.writeFieldBegin('series', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.series.length);
    for (var iter23 in this.series)
    {
      if (this.series.hasOwnProperty(iter23))
      {
        iter23 = this.series[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 3);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BarSeries = module.exports.BarSeries = function(args) {
  this.name = null;
  this.data = null;
  this.stack_name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = Thrift.copyList(args.data, [null]);
    }
    if (args.stack_name !== undefined && args.stack_name !== null) {
      this.stack_name = args.stack_name;
    }
  }
};
BarSeries.prototype = {};
BarSeries.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.data = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readDouble();
          this.data.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stack_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BarSeries.prototype.write = function(output) {
  output.writeStructBegin('BarSeries');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.DOUBLE, this.data.length);
    for (var iter31 in this.data)
    {
      if (this.data.hasOwnProperty(iter31))
      {
        iter31 = this.data[iter31];
        output.writeDouble(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stack_name !== null && this.stack_name !== undefined) {
    output.writeFieldBegin('stack_name', Thrift.Type.STRING, 3);
    output.writeString(this.stack_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BarChartOptions = module.exports.BarChartOptions = function(args) {
  this.stacked = false;
  this.percent = false;
  this.y_axis_title = null;
  if (args) {
    if (args.stacked !== undefined && args.stacked !== null) {
      this.stacked = args.stacked;
    }
    if (args.percent !== undefined && args.percent !== null) {
      this.percent = args.percent;
    }
    if (args.y_axis_title !== undefined && args.y_axis_title !== null) {
      this.y_axis_title = args.y_axis_title;
    }
  }
};
BarChartOptions.prototype = {};
BarChartOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.stacked = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.percent = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.y_axis_title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BarChartOptions.prototype.write = function(output) {
  output.writeStructBegin('BarChartOptions');
  if (this.stacked !== null && this.stacked !== undefined) {
    output.writeFieldBegin('stacked', Thrift.Type.BOOL, 1);
    output.writeBool(this.stacked);
    output.writeFieldEnd();
  }
  if (this.percent !== null && this.percent !== undefined) {
    output.writeFieldBegin('percent', Thrift.Type.BOOL, 2);
    output.writeBool(this.percent);
    output.writeFieldEnd();
  }
  if (this.y_axis_title !== null && this.y_axis_title !== undefined) {
    output.writeFieldBegin('y_axis_title', Thrift.Type.STRING, 4);
    output.writeString(this.y_axis_title);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BarChart = module.exports.BarChart = function(args) {
  this.title = null;
  this.series = null;
  this.categories = null;
  this.options = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.series !== undefined && args.series !== null) {
      this.series = Thrift.copyList(args.series, [ttypes.BarSeries]);
    }
    if (args.categories !== undefined && args.categories !== null) {
      this.categories = Thrift.copyList(args.categories, [null]);
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new ttypes.BarChartOptions(args.options);
    }
  }
};
BarChart.prototype = {};
BarChart.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.series = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.BarSeries();
          elem38.read(input);
          this.series.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.categories = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = input.readString();
          this.categories.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.BarChartOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BarChart.prototype.write = function(output) {
  output.writeStructBegin('BarChart');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.series !== null && this.series !== undefined) {
    output.writeFieldBegin('series', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.series.length);
    for (var iter46 in this.series)
    {
      if (this.series.hasOwnProperty(iter46))
      {
        iter46 = this.series[iter46];
        iter46.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.categories !== null && this.categories !== undefined) {
    output.writeFieldBegin('categories', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.categories.length);
    for (var iter47 in this.categories)
    {
      if (this.categories.hasOwnProperty(iter47))
      {
        iter47 = this.categories[iter47];
        output.writeString(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 4);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Text = module.exports.Text = function(args) {
  this.title = null;
  this.content = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
  }
};
Text.prototype = {};
Text.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Text.prototype.write = function(output) {
  output.writeStructBegin('Text');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 2);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableCellContent = module.exports.TableCellContent = function(args) {
  this.text = null;
  this.percent = null;
  this.currency = null;
  this.number = null;
  if (args) {
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.percent !== undefined && args.percent !== null) {
      this.percent = args.percent;
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
    if (args.number !== undefined && args.number !== null) {
      this.number = args.number;
    }
  }
};
TableCellContent.prototype = {};
TableCellContent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.percent = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.currency = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.number = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableCellContent.prototype.write = function(output) {
  output.writeStructBegin('TableCellContent');
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 1);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.percent !== null && this.percent !== undefined) {
    output.writeFieldBegin('percent', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.percent);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.currency);
    output.writeFieldEnd();
  }
  if (this.number !== null && this.number !== undefined) {
    output.writeFieldBegin('number', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.number);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableCellFormat = module.exports.TableCellFormat = function(args) {
  this.bold = null;
  this.italic = null;
  this.color = null;
  this.colspan = 1;
  this.rowspan = 1;
  if (args) {
    if (args.bold !== undefined && args.bold !== null) {
      this.bold = args.bold;
    }
    if (args.italic !== undefined && args.italic !== null) {
      this.italic = args.italic;
    }
    if (args.color !== undefined && args.color !== null) {
      this.color = args.color;
    }
    if (args.colspan !== undefined && args.colspan !== null) {
      this.colspan = args.colspan;
    }
    if (args.rowspan !== undefined && args.rowspan !== null) {
      this.rowspan = args.rowspan;
    }
  }
};
TableCellFormat.prototype = {};
TableCellFormat.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.bold = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.italic = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.color = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.colspan = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.rowspan = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableCellFormat.prototype.write = function(output) {
  output.writeStructBegin('TableCellFormat');
  if (this.bold !== null && this.bold !== undefined) {
    output.writeFieldBegin('bold', Thrift.Type.BOOL, 1);
    output.writeBool(this.bold);
    output.writeFieldEnd();
  }
  if (this.italic !== null && this.italic !== undefined) {
    output.writeFieldBegin('italic', Thrift.Type.BOOL, 2);
    output.writeBool(this.italic);
    output.writeFieldEnd();
  }
  if (this.color !== null && this.color !== undefined) {
    output.writeFieldBegin('color', Thrift.Type.I32, 3);
    output.writeI32(this.color);
    output.writeFieldEnd();
  }
  if (this.colspan !== null && this.colspan !== undefined) {
    output.writeFieldBegin('colspan', Thrift.Type.I16, 4);
    output.writeI16(this.colspan);
    output.writeFieldEnd();
  }
  if (this.rowspan !== null && this.rowspan !== undefined) {
    output.writeFieldBegin('rowspan', Thrift.Type.I16, 5);
    output.writeI16(this.rowspan);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableCell = module.exports.TableCell = function(args) {
  this.content = null;
  this.format = null;
  if (args) {
    if (args.content !== undefined && args.content !== null) {
      this.content = new ttypes.TableCellContent(args.content);
    }
    if (args.format !== undefined && args.format !== null) {
      this.format = new ttypes.TableCellFormat(args.format);
    }
  }
};
TableCell.prototype = {};
TableCell.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.content = new ttypes.TableCellContent();
        this.content.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.format = new ttypes.TableCellFormat();
        this.format.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableCell.prototype.write = function(output) {
  output.writeStructBegin('TableCell');
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRUCT, 1);
    this.content.write(output);
    output.writeFieldEnd();
  }
  if (this.format !== null && this.format !== undefined) {
    output.writeFieldBegin('format', Thrift.Type.STRUCT, 2);
    this.format.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableRow = module.exports.TableRow = function(args) {
  this.cells = null;
  if (args) {
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [ttypes.TableCell]);
    }
  }
};
TableRow.prototype = {};
TableRow.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.cells = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.TableCell();
          elem54.read(input);
          this.cells.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableRow.prototype.write = function(output) {
  output.writeStructBegin('TableRow');
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.cells.length);
    for (var iter55 in this.cells)
    {
      if (this.cells.hasOwnProperty(iter55))
      {
        iter55 = this.cells[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Table = module.exports.Table = function(args) {
  this.title = null;
  this.header = null;
  this.body = null;
  this.footer = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.header !== undefined && args.header !== null) {
      this.header = Thrift.copyList(args.header, [ttypes.TableRow]);
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = Thrift.copyList(args.body, [ttypes.TableRow]);
    }
    if (args.footer !== undefined && args.footer !== null) {
      this.footer = Thrift.copyList(args.footer, [ttypes.TableRow]);
    }
  }
};
Table.prototype = {};
Table.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.header = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.TableRow();
          elem62.read(input);
          this.header.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size63 = 0;
        var _rtmp367;
        this.body = [];
        var _etype66 = 0;
        _rtmp367 = input.readListBegin();
        _etype66 = _rtmp367.etype;
        _size63 = _rtmp367.size;
        for (var _i68 = 0; _i68 < _size63; ++_i68)
        {
          var elem69 = null;
          elem69 = new ttypes.TableRow();
          elem69.read(input);
          this.body.push(elem69);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size70 = 0;
        var _rtmp374;
        this.footer = [];
        var _etype73 = 0;
        _rtmp374 = input.readListBegin();
        _etype73 = _rtmp374.etype;
        _size70 = _rtmp374.size;
        for (var _i75 = 0; _i75 < _size70; ++_i75)
        {
          var elem76 = null;
          elem76 = new ttypes.TableRow();
          elem76.read(input);
          this.footer.push(elem76);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Table.prototype.write = function(output) {
  output.writeStructBegin('Table');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.header.length);
    for (var iter77 in this.header)
    {
      if (this.header.hasOwnProperty(iter77))
      {
        iter77 = this.header[iter77];
        iter77.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.body.length);
    for (var iter78 in this.body)
    {
      if (this.body.hasOwnProperty(iter78))
      {
        iter78 = this.body[iter78];
        iter78.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.footer !== null && this.footer !== undefined) {
    output.writeFieldBegin('footer', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.footer.length);
    for (var iter79 in this.footer)
    {
      if (this.footer.hasOwnProperty(iter79))
      {
        iter79 = this.footer[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Result = module.exports.Result = function(args) {
  this.table = null;
  this.pie_chart = null;
  this.line_chart = null;
  this.bar_chart = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = new ttypes.Table(args.table);
    }
    if (args.pie_chart !== undefined && args.pie_chart !== null) {
      this.pie_chart = new ttypes.PieChart(args.pie_chart);
    }
    if (args.line_chart !== undefined && args.line_chart !== null) {
      this.line_chart = new ttypes.LineChart(args.line_chart);
    }
    if (args.bar_chart !== undefined && args.bar_chart !== null) {
      this.bar_chart = new ttypes.BarChart(args.bar_chart);
    }
  }
};
Result.prototype = {};
Result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.table = new ttypes.Table();
        this.table.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pie_chart = new ttypes.PieChart();
        this.pie_chart.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.line_chart = new ttypes.LineChart();
        this.line_chart.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.bar_chart = new ttypes.BarChart();
        this.bar_chart.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Result.prototype.write = function(output) {
  output.writeStructBegin('Result');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRUCT, 1);
    this.table.write(output);
    output.writeFieldEnd();
  }
  if (this.pie_chart !== null && this.pie_chart !== undefined) {
    output.writeFieldBegin('pie_chart', Thrift.Type.STRUCT, 2);
    this.pie_chart.write(output);
    output.writeFieldEnd();
  }
  if (this.line_chart !== null && this.line_chart !== undefined) {
    output.writeFieldBegin('line_chart', Thrift.Type.STRUCT, 3);
    this.line_chart.write(output);
    output.writeFieldEnd();
  }
  if (this.bar_chart !== null && this.bar_chart !== undefined) {
    output.writeFieldBegin('bar_chart', Thrift.Type.STRUCT, 4);
    this.bar_chart.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Position = module.exports.Position = function(args) {
  this.id = null;
  this.value = null;
  this.rentability = null;
  this.avg_price = null;
  this.shares = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = new common_ttypes.SecurityId(args.id);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.rentability !== undefined && args.rentability !== null) {
      this.rentability = args.rentability;
    }
    if (args.avg_price !== undefined && args.avg_price !== null) {
      this.avg_price = args.avg_price;
    }
    if (args.shares !== undefined && args.shares !== null) {
      this.shares = args.shares;
    }
  }
};
Position.prototype = {};
Position.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.id = new common_ttypes.SecurityId();
        this.id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rentability = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.avg_price = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.shares = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Position.prototype.write = function(output) {
  output.writeStructBegin('Position');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRUCT, 1);
    this.id.write(output);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  if (this.rentability !== null && this.rentability !== undefined) {
    output.writeFieldBegin('rentability', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.rentability);
    output.writeFieldEnd();
  }
  if (this.avg_price !== null && this.avg_price !== undefined) {
    output.writeFieldBegin('avg_price', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.avg_price);
    output.writeFieldEnd();
  }
  if (this.shares !== null && this.shares !== undefined) {
    output.writeFieldBegin('shares', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.shares);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Settlement = module.exports.Settlement = function(args) {
  this.date = null;
  this.period = null;
  if (args) {
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
    if (args.period !== undefined && args.period !== null) {
      this.period = args.period;
    }
  }
};
Settlement.prototype = {};
Settlement.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.date = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.period = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Settlement.prototype.write = function(output) {
  output.writeStructBegin('Settlement');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I32, 1);
    output.writeI32(this.date);
    output.writeFieldEnd();
  }
  if (this.period !== null && this.period !== undefined) {
    output.writeFieldBegin('period', Thrift.Type.I16, 2);
    output.writeI16(this.period);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Provision = module.exports.Provision = function(args) {
  this.value = null;
  this.description = null;
  this.settlement = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.settlement !== undefined && args.settlement !== null) {
      this.settlement = new ttypes.Settlement(args.settlement);
    }
  }
};
Provision.prototype = {};
Provision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.settlement = new ttypes.Settlement();
        this.settlement.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Provision.prototype.write = function(output) {
  output.writeStructBegin('Provision');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.settlement !== null && this.settlement !== undefined) {
    output.writeFieldBegin('settlement', Thrift.Type.STRUCT, 3);
    this.settlement.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Portfolio = module.exports.Portfolio = function(args) {
  this.date = null;
  this.positions = null;
  this.rentability = null;
  this.nav = null;
  this.cash = null;
  this.provisions = null;
  if (args) {
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
    if (args.positions !== undefined && args.positions !== null) {
      this.positions = Thrift.copyList(args.positions, [ttypes.Position]);
    }
    if (args.rentability !== undefined && args.rentability !== null) {
      this.rentability = args.rentability;
    }
    if (args.nav !== undefined && args.nav !== null) {
      this.nav = args.nav;
    }
    if (args.cash !== undefined && args.cash !== null) {
      this.cash = args.cash;
    }
    if (args.provisions !== undefined && args.provisions !== null) {
      this.provisions = Thrift.copyList(args.provisions, [ttypes.Provision]);
    }
  }
};
Portfolio.prototype = {};
Portfolio.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.date = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.positions = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new ttypes.Position();
          elem86.read(input);
          this.positions.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rentability = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.nav = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.cash = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size87 = 0;
        var _rtmp391;
        this.provisions = [];
        var _etype90 = 0;
        _rtmp391 = input.readListBegin();
        _etype90 = _rtmp391.etype;
        _size87 = _rtmp391.size;
        for (var _i92 = 0; _i92 < _size87; ++_i92)
        {
          var elem93 = null;
          elem93 = new ttypes.Provision();
          elem93.read(input);
          this.provisions.push(elem93);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Portfolio.prototype.write = function(output) {
  output.writeStructBegin('Portfolio');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I32, 1);
    output.writeI32(this.date);
    output.writeFieldEnd();
  }
  if (this.positions !== null && this.positions !== undefined) {
    output.writeFieldBegin('positions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.positions.length);
    for (var iter94 in this.positions)
    {
      if (this.positions.hasOwnProperty(iter94))
      {
        iter94 = this.positions[iter94];
        iter94.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rentability !== null && this.rentability !== undefined) {
    output.writeFieldBegin('rentability', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.rentability);
    output.writeFieldEnd();
  }
  if (this.nav !== null && this.nav !== undefined) {
    output.writeFieldBegin('nav', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.nav);
    output.writeFieldEnd();
  }
  if (this.cash !== null && this.cash !== undefined) {
    output.writeFieldBegin('cash', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.cash);
    output.writeFieldEnd();
  }
  if (this.provisions !== null && this.provisions !== undefined) {
    output.writeFieldBegin('provisions', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.provisions.length);
    for (var iter95 in this.provisions)
    {
      if (this.provisions.hasOwnProperty(iter95))
      {
        iter95 = this.provisions[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AnalyzerConfig = module.exports.AnalyzerConfig = function(args) {
  this.id = null;
  this.name = null;
  this.result_type = null;
  this.accepted_events = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.result_type !== undefined && args.result_type !== null) {
      this.result_type = args.result_type;
    }
    if (args.accepted_events !== undefined && args.accepted_events !== null) {
      this.accepted_events = Thrift.copyList(args.accepted_events, [null]);
    }
  }
};
AnalyzerConfig.prototype = {};
AnalyzerConfig.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.result_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        var _size96 = 0;
        var _rtmp3100;
        this.accepted_events = [];
        var _etype99 = 0;
        _rtmp3100 = input.readSetBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = input.readI32();
          this.accepted_events.push(elem102);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnalyzerConfig.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerConfig');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.result_type !== null && this.result_type !== undefined) {
    output.writeFieldBegin('result_type', Thrift.Type.I32, 3);
    output.writeI32(this.result_type);
    output.writeFieldEnd();
  }
  if (this.accepted_events !== null && this.accepted_events !== undefined) {
    output.writeFieldBegin('accepted_events', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.I32, this.accepted_events.length);
    for (var iter103 in this.accepted_events)
    {
      if (this.accepted_events.hasOwnProperty(iter103))
      {
        iter103 = this.accepted_events[iter103];
        output.writeI32(iter103);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CashFlow = module.exports.CashFlow = function(args) {
  this.date = null;
  this.value = null;
  this.balance = null;
  this.type = null;
  if (args) {
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = args.balance;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
CashFlow.prototype = {};
CashFlow.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.date = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.balance = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CashFlow.prototype.write = function(output) {
  output.writeStructBegin('CashFlow');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I32, 1);
    output.writeI32(this.date);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.balance);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var ttypes = module.exports = {};
ttypes.PieChartType = {
  'PERCENT' : 0,
  'VALUE' : 1
};
ttypes.LineSeriesType = {
  'LINE' : 0,
  'AREA' : 1
};
ttypes.Event = {
  'EACH_DAY' : 0,
  'EACH_MONTH' : 1,
  'CASH_FLOW' : 2,
  'FINISH' : 3
};
ttypes.ResultType = {
  'TABLE' : 0,
  'PIE_CHART' : 1,
  'LINE_CHART' : 2,
  'BAR_CHART' : 3
};
ttypes.CashFlowType = {
  'DIVIDEND' : 0,
  'INTEREST_ON_OWN_CAPITAL' : 1,
  'DEPOSIT' : 2,
  'WITHDRAWAL' : 3
};
var Point = module.exports.Point = function(args) {
  this.x = null;
  this.y = null;
  if (args) {
    if (args.x !== undefined && args.x !== null) {
      this.x = args.x;
    }
    if (args.y !== undefined && args.y !== null) {
      this.y = args.y;
    }
  }
};
Point.prototype = {};
Point.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.x = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.y = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Point.prototype.write = function(output) {
  output.writeStructBegin('Point');
  if (this.x !== null && this.x !== undefined) {
    output.writeFieldBegin('x', Thrift.Type.I64, 1);
    output.writeI64(this.x);
    output.writeFieldEnd();
  }
  if (this.y !== null && this.y !== undefined) {
    output.writeFieldBegin('y', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.y);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PieSeries = module.exports.PieSeries = function(args) {
  this.name = null;
  this.value = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
PieSeries.prototype = {};
PieSeries.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PieSeries.prototype.write = function(output) {
  output.writeStructBegin('PieSeries');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PieChart = module.exports.PieChart = function(args) {
  this.title = null;
  this.type = 1;
  this.series = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.series !== undefined && args.series !== null) {
      this.series = Thrift.copyList(args.series, [ttypes.PieSeries]);
    }
  }
};
PieChart.prototype = {};
PieChart.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.series = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new ttypes.PieSeries();
          elem3.read(input);
          this.series.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PieChart.prototype.write = function(output) {
  output.writeStructBegin('PieChart');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.series !== null && this.series !== undefined) {
    output.writeFieldBegin('series', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.series.length);
    for (var iter4 in this.series) {
      if (this.series.hasOwnProperty(iter4)) {
        iter4 = this.series[iter4];
        iter4.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LineSeries = module.exports.LineSeries = function(args) {
  this.name = null;
  this.points = null;
  this.type = 0;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.points !== undefined && args.points !== null) {
      this.points = Thrift.copyList(args.points, [ttypes.Point]);
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
LineSeries.prototype = {};
LineSeries.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.points = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = new ttypes.Point();
          elem8.read(input);
          this.points.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineSeries.prototype.write = function(output) {
  output.writeStructBegin('LineSeries');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.points !== null && this.points !== undefined) {
    output.writeFieldBegin('points', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.points.length);
    for (var iter9 in this.points) {
      if (this.points.hasOwnProperty(iter9)) {
        iter9 = this.points[iter9];
        iter9.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 3);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LineChartOptions = module.exports.LineChartOptions = function(args) {
  this.stacked = null;
  this.compare = null;
  if (args) {
    if (args.stacked !== undefined && args.stacked !== null) {
      this.stacked = args.stacked;
    }
    if (args.compare !== undefined && args.compare !== null) {
      this.compare = args.compare;
    }
  }
};
LineChartOptions.prototype = {};
LineChartOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.stacked = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.compare = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineChartOptions.prototype.write = function(output) {
  output.writeStructBegin('LineChartOptions');
  if (this.stacked !== null && this.stacked !== undefined) {
    output.writeFieldBegin('stacked', Thrift.Type.BOOL, 1);
    output.writeBool(this.stacked);
    output.writeFieldEnd();
  }
  if (this.compare !== null && this.compare !== undefined) {
    output.writeFieldBegin('compare', Thrift.Type.BOOL, 2);
    output.writeBool(this.compare);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var LineChart = module.exports.LineChart = function(args) {
  this.title = null;
  this.series = null;
  this.options = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.series !== undefined && args.series !== null) {
      this.series = Thrift.copyList(args.series, [ttypes.LineSeries]);
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new ttypes.LineChartOptions(args.options);
    }
  }
};
LineChart.prototype = {};
LineChart.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.series = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = new ttypes.LineSeries();
          elem13.read(input);
          this.series.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.LineChartOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LineChart.prototype.write = function(output) {
  output.writeStructBegin('LineChart');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.series !== null && this.series !== undefined) {
    output.writeFieldBegin('series', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.series.length);
    for (var iter14 in this.series) {
      if (this.series.hasOwnProperty(iter14)) {
        iter14 = this.series[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 3);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BarSeries = module.exports.BarSeries = function(args) {
  this.name = null;
  this.data = null;
  this.stack_name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = Thrift.copyList(args.data, [null]);
    }
    if (args.stack_name !== undefined && args.stack_name !== null) {
      this.stack_name = args.stack_name;
    }
  }
};
BarSeries.prototype = {};
BarSeries.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.data = [];
        var _rtmp316 = input.readListBegin();
        var _size15 = _rtmp316.size || 0;
        for (var _i17 = 0; _i17 < _size15; ++_i17) {
          var elem18 = null;
          elem18 = input.readDouble();
          this.data.push(elem18);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.stack_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BarSeries.prototype.write = function(output) {
  output.writeStructBegin('BarSeries');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.DOUBLE, this.data.length);
    for (var iter19 in this.data) {
      if (this.data.hasOwnProperty(iter19)) {
        iter19 = this.data[iter19];
        output.writeDouble(iter19);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.stack_name !== null && this.stack_name !== undefined) {
    output.writeFieldBegin('stack_name', Thrift.Type.STRING, 3);
    output.writeString(this.stack_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BarChartOptions = module.exports.BarChartOptions = function(args) {
  this.stacked = false;
  this.percent = false;
  this.y_axis_title = null;
  if (args) {
    if (args.stacked !== undefined && args.stacked !== null) {
      this.stacked = args.stacked;
    }
    if (args.percent !== undefined && args.percent !== null) {
      this.percent = args.percent;
    }
    if (args.y_axis_title !== undefined && args.y_axis_title !== null) {
      this.y_axis_title = args.y_axis_title;
    }
  }
};
BarChartOptions.prototype = {};
BarChartOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.stacked = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.percent = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.y_axis_title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BarChartOptions.prototype.write = function(output) {
  output.writeStructBegin('BarChartOptions');
  if (this.stacked !== null && this.stacked !== undefined) {
    output.writeFieldBegin('stacked', Thrift.Type.BOOL, 1);
    output.writeBool(this.stacked);
    output.writeFieldEnd();
  }
  if (this.percent !== null && this.percent !== undefined) {
    output.writeFieldBegin('percent', Thrift.Type.BOOL, 2);
    output.writeBool(this.percent);
    output.writeFieldEnd();
  }
  if (this.y_axis_title !== null && this.y_axis_title !== undefined) {
    output.writeFieldBegin('y_axis_title', Thrift.Type.STRING, 4);
    output.writeString(this.y_axis_title);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BarChart = module.exports.BarChart = function(args) {
  this.title = null;
  this.series = null;
  this.categories = null;
  this.options = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.series !== undefined && args.series !== null) {
      this.series = Thrift.copyList(args.series, [ttypes.BarSeries]);
    }
    if (args.categories !== undefined && args.categories !== null) {
      this.categories = Thrift.copyList(args.categories, [null]);
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new ttypes.BarChartOptions(args.options);
    }
  }
};
BarChart.prototype = {};
BarChart.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.series = [];
        var _rtmp321 = input.readListBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var elem23 = null;
          elem23 = new ttypes.BarSeries();
          elem23.read(input);
          this.series.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.categories = [];
        var _rtmp325 = input.readListBegin();
        var _size24 = _rtmp325.size || 0;
        for (var _i26 = 0; _i26 < _size24; ++_i26) {
          var elem27 = null;
          elem27 = input.readString();
          this.categories.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.BarChartOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BarChart.prototype.write = function(output) {
  output.writeStructBegin('BarChart');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.series !== null && this.series !== undefined) {
    output.writeFieldBegin('series', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.series.length);
    for (var iter28 in this.series) {
      if (this.series.hasOwnProperty(iter28)) {
        iter28 = this.series[iter28];
        iter28.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.categories !== null && this.categories !== undefined) {
    output.writeFieldBegin('categories', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.categories.length);
    for (var iter29 in this.categories) {
      if (this.categories.hasOwnProperty(iter29)) {
        iter29 = this.categories[iter29];
        output.writeString(iter29);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 4);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Text = module.exports.Text = function(args) {
  this.title = null;
  this.content = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
  }
};
Text.prototype = {};
Text.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Text.prototype.write = function(output) {
  output.writeStructBegin('Text');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 2);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TableCellTypes = module.exports.TableCellTypes = function(args) {
  this.text = null;
  this.markdown = null;
  this.percent = null;
  this.currency = null;
  this.number = null;
  this.percentage_point = null;
  if (args) {
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    }
    if (args.markdown !== undefined && args.markdown !== null) {
      this.markdown = args.markdown;
    }
    if (args.percent !== undefined && args.percent !== null) {
      this.percent = args.percent;
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
    if (args.number !== undefined && args.number !== null) {
      this.number = args.number;
    }
    if (args.percentage_point !== undefined && args.percentage_point !== null) {
      this.percentage_point = args.percentage_point;
    }
  }
};
TableCellTypes.prototype = {};
TableCellTypes.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.markdown = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.percent = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.currency = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.number = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.percentage_point = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableCellTypes.prototype.write = function(output) {
  output.writeStructBegin('TableCellTypes');
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 1);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  if (this.markdown !== null && this.markdown !== undefined) {
    output.writeFieldBegin('markdown', Thrift.Type.STRING, 6);
    output.writeString(this.markdown);
    output.writeFieldEnd();
  }
  if (this.percent !== null && this.percent !== undefined) {
    output.writeFieldBegin('percent', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.percent);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.currency);
    output.writeFieldEnd();
  }
  if (this.number !== null && this.number !== undefined) {
    output.writeFieldBegin('number', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.number);
    output.writeFieldEnd();
  }
  if (this.percentage_point !== null && this.percentage_point !== undefined) {
    output.writeFieldBegin('percentage_point', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.percentage_point);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TableCellContent = module.exports.TableCellContent = function(args) {
  this.type = null;
  this.strip_insignificant_zeros = false;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = new ttypes.TableCellTypes(args.type);
    }
    if (args.strip_insignificant_zeros !== undefined && args.strip_insignificant_zeros !== null) {
      this.strip_insignificant_zeros = args.strip_insignificant_zeros;
    }
  }
};
TableCellContent.prototype = {};
TableCellContent.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.type = new ttypes.TableCellTypes();
        this.type.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.strip_insignificant_zeros = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableCellContent.prototype.write = function(output) {
  output.writeStructBegin('TableCellContent');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRUCT, 1);
    this.type.write(output);
    output.writeFieldEnd();
  }
  if (this.strip_insignificant_zeros !== null && this.strip_insignificant_zeros !== undefined) {
    output.writeFieldBegin('strip_insignificant_zeros', Thrift.Type.BOOL, 2);
    output.writeBool(this.strip_insignificant_zeros);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TableCellFormat = module.exports.TableCellFormat = function(args) {
  this.bold = null;
  this.italic = null;
  this.color = null;
  this.colspan = 1;
  this.rowspan = 1;
  if (args) {
    if (args.bold !== undefined && args.bold !== null) {
      this.bold = args.bold;
    }
    if (args.italic !== undefined && args.italic !== null) {
      this.italic = args.italic;
    }
    if (args.color !== undefined && args.color !== null) {
      this.color = args.color;
    }
    if (args.colspan !== undefined && args.colspan !== null) {
      this.colspan = args.colspan;
    }
    if (args.rowspan !== undefined && args.rowspan !== null) {
      this.rowspan = args.rowspan;
    }
  }
};
TableCellFormat.prototype = {};
TableCellFormat.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.bold = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.italic = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.color = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I16) {
        this.colspan = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.rowspan = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableCellFormat.prototype.write = function(output) {
  output.writeStructBegin('TableCellFormat');
  if (this.bold !== null && this.bold !== undefined) {
    output.writeFieldBegin('bold', Thrift.Type.BOOL, 1);
    output.writeBool(this.bold);
    output.writeFieldEnd();
  }
  if (this.italic !== null && this.italic !== undefined) {
    output.writeFieldBegin('italic', Thrift.Type.BOOL, 2);
    output.writeBool(this.italic);
    output.writeFieldEnd();
  }
  if (this.color !== null && this.color !== undefined) {
    output.writeFieldBegin('color', Thrift.Type.I32, 3);
    output.writeI32(this.color);
    output.writeFieldEnd();
  }
  if (this.colspan !== null && this.colspan !== undefined) {
    output.writeFieldBegin('colspan', Thrift.Type.I16, 4);
    output.writeI16(this.colspan);
    output.writeFieldEnd();
  }
  if (this.rowspan !== null && this.rowspan !== undefined) {
    output.writeFieldBegin('rowspan', Thrift.Type.I16, 5);
    output.writeI16(this.rowspan);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TableCell = module.exports.TableCell = function(args) {
  this.content = null;
  this.format = null;
  if (args) {
    if (args.content !== undefined && args.content !== null) {
      this.content = new ttypes.TableCellContent(args.content);
    }
    if (args.format !== undefined && args.format !== null) {
      this.format = new ttypes.TableCellFormat(args.format);
    }
  }
};
TableCell.prototype = {};
TableCell.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.content = new ttypes.TableCellContent();
        this.content.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.format = new ttypes.TableCellFormat();
        this.format.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableCell.prototype.write = function(output) {
  output.writeStructBegin('TableCell');
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRUCT, 1);
    this.content.write(output);
    output.writeFieldEnd();
  }
  if (this.format !== null && this.format !== undefined) {
    output.writeFieldBegin('format', Thrift.Type.STRUCT, 2);
    this.format.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TableRow = module.exports.TableRow = function(args) {
  this.cells = null;
  if (args) {
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [ttypes.TableCell]);
    }
  }
};
TableRow.prototype = {};
TableRow.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.cells = [];
        var _rtmp331 = input.readListBegin();
        var _size30 = _rtmp331.size || 0;
        for (var _i32 = 0; _i32 < _size30; ++_i32) {
          var elem33 = null;
          elem33 = new ttypes.TableCell();
          elem33.read(input);
          this.cells.push(elem33);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableRow.prototype.write = function(output) {
  output.writeStructBegin('TableRow');
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.cells.length);
    for (var iter34 in this.cells) {
      if (this.cells.hasOwnProperty(iter34)) {
        iter34 = this.cells[iter34];
        iter34.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Table = module.exports.Table = function(args) {
  this.title = null;
  this.header = null;
  this.body = null;
  this.footer = null;
  if (args) {
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.header !== undefined && args.header !== null) {
      this.header = Thrift.copyList(args.header, [ttypes.TableRow]);
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = Thrift.copyList(args.body, [ttypes.TableRow]);
    }
    if (args.footer !== undefined && args.footer !== null) {
      this.footer = Thrift.copyList(args.footer, [ttypes.TableRow]);
    }
  }
};
Table.prototype = {};
Table.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.header = [];
        var _rtmp336 = input.readListBegin();
        var _size35 = _rtmp336.size || 0;
        for (var _i37 = 0; _i37 < _size35; ++_i37) {
          var elem38 = null;
          elem38 = new ttypes.TableRow();
          elem38.read(input);
          this.header.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.body = [];
        var _rtmp340 = input.readListBegin();
        var _size39 = _rtmp340.size || 0;
        for (var _i41 = 0; _i41 < _size39; ++_i41) {
          var elem42 = null;
          elem42 = new ttypes.TableRow();
          elem42.read(input);
          this.body.push(elem42);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.footer = [];
        var _rtmp344 = input.readListBegin();
        var _size43 = _rtmp344.size || 0;
        for (var _i45 = 0; _i45 < _size43; ++_i45) {
          var elem46 = null;
          elem46 = new ttypes.TableRow();
          elem46.read(input);
          this.footer.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Table.prototype.write = function(output) {
  output.writeStructBegin('Table');
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 1);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.header.length);
    for (var iter47 in this.header) {
      if (this.header.hasOwnProperty(iter47)) {
        iter47 = this.header[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.body.length);
    for (var iter48 in this.body) {
      if (this.body.hasOwnProperty(iter48)) {
        iter48 = this.body[iter48];
        iter48.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.footer !== null && this.footer !== undefined) {
    output.writeFieldBegin('footer', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.footer.length);
    for (var iter49 in this.footer) {
      if (this.footer.hasOwnProperty(iter49)) {
        iter49 = this.footer[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Result = module.exports.Result = function(args) {
  this.table = null;
  this.pie_chart = null;
  this.line_chart = null;
  this.bar_chart = null;
  if (args) {
    if (args.table !== undefined && args.table !== null) {
      this.table = new ttypes.Table(args.table);
    }
    if (args.pie_chart !== undefined && args.pie_chart !== null) {
      this.pie_chart = new ttypes.PieChart(args.pie_chart);
    }
    if (args.line_chart !== undefined && args.line_chart !== null) {
      this.line_chart = new ttypes.LineChart(args.line_chart);
    }
    if (args.bar_chart !== undefined && args.bar_chart !== null) {
      this.bar_chart = new ttypes.BarChart(args.bar_chart);
    }
  }
};
Result.prototype = {};
Result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.table = new ttypes.Table();
        this.table.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pie_chart = new ttypes.PieChart();
        this.pie_chart.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.line_chart = new ttypes.LineChart();
        this.line_chart.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.bar_chart = new ttypes.BarChart();
        this.bar_chart.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Result.prototype.write = function(output) {
  output.writeStructBegin('Result');
  if (this.table !== null && this.table !== undefined) {
    output.writeFieldBegin('table', Thrift.Type.STRUCT, 1);
    this.table.write(output);
    output.writeFieldEnd();
  }
  if (this.pie_chart !== null && this.pie_chart !== undefined) {
    output.writeFieldBegin('pie_chart', Thrift.Type.STRUCT, 2);
    this.pie_chart.write(output);
    output.writeFieldEnd();
  }
  if (this.line_chart !== null && this.line_chart !== undefined) {
    output.writeFieldBegin('line_chart', Thrift.Type.STRUCT, 3);
    this.line_chart.write(output);
    output.writeFieldEnd();
  }
  if (this.bar_chart !== null && this.bar_chart !== undefined) {
    output.writeFieldBegin('bar_chart', Thrift.Type.STRUCT, 4);
    this.bar_chart.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Position = module.exports.Position = function(args) {
  this.id = null;
  this.short_name = null;
  this.value = null;
  this.rentability = null;
  this.avg_price = null;
  this.shares = null;
  this.paid_value = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = new common_ttypes.SecurityId(args.id);
    }
    if (args.short_name !== undefined && args.short_name !== null) {
      this.short_name = args.short_name;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.rentability !== undefined && args.rentability !== null) {
      this.rentability = args.rentability;
    }
    if (args.avg_price !== undefined && args.avg_price !== null) {
      this.avg_price = args.avg_price;
    }
    if (args.shares !== undefined && args.shares !== null) {
      this.shares = args.shares;
    }
    if (args.paid_value !== undefined && args.paid_value !== null) {
      this.paid_value = args.paid_value;
    }
  }
};
Position.prototype = {};
Position.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.id = new common_ttypes.SecurityId();
        this.id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.short_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rentability = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.avg_price = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.shares = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.paid_value = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Position.prototype.write = function(output) {
  output.writeStructBegin('Position');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRUCT, 1);
    this.id.write(output);
    output.writeFieldEnd();
  }
  if (this.short_name !== null && this.short_name !== undefined) {
    output.writeFieldBegin('short_name', Thrift.Type.STRING, 2);
    output.writeString(this.short_name);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  if (this.rentability !== null && this.rentability !== undefined) {
    output.writeFieldBegin('rentability', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.rentability);
    output.writeFieldEnd();
  }
  if (this.avg_price !== null && this.avg_price !== undefined) {
    output.writeFieldBegin('avg_price', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.avg_price);
    output.writeFieldEnd();
  }
  if (this.shares !== null && this.shares !== undefined) {
    output.writeFieldBegin('shares', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.shares);
    output.writeFieldEnd();
  }
  if (this.paid_value !== null && this.paid_value !== undefined) {
    output.writeFieldBegin('paid_value', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.paid_value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Settlement = module.exports.Settlement = function(args) {
  this.date = null;
  this.period = null;
  if (args) {
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
    if (args.period !== undefined && args.period !== null) {
      this.period = args.period;
    }
  }
};
Settlement.prototype = {};
Settlement.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I16) {
        this.period = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Settlement.prototype.write = function(output) {
  output.writeStructBegin('Settlement');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I64, 1);
    output.writeI64(this.date);
    output.writeFieldEnd();
  }
  if (this.period !== null && this.period !== undefined) {
    output.writeFieldBegin('period', Thrift.Type.I16, 2);
    output.writeI16(this.period);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Provision = module.exports.Provision = function(args) {
  this.value = null;
  this.description = null;
  this.settlement = null;
  if (args) {
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.settlement !== undefined && args.settlement !== null) {
      this.settlement = new ttypes.Settlement(args.settlement);
    }
  }
};
Provision.prototype = {};
Provision.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.settlement = new ttypes.Settlement();
        this.settlement.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Provision.prototype.write = function(output) {
  output.writeStructBegin('Provision');
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 2);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.settlement !== null && this.settlement !== undefined) {
    output.writeFieldBegin('settlement', Thrift.Type.STRUCT, 3);
    this.settlement.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Portfolio = module.exports.Portfolio = function(args) {
  this.date = null;
  this.positions = null;
  this.rentability = null;
  this.nav = null;
  this.cash = null;
  this.provisions = null;
  if (args) {
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
    if (args.positions !== undefined && args.positions !== null) {
      this.positions = Thrift.copyList(args.positions, [ttypes.Position]);
    }
    if (args.rentability !== undefined && args.rentability !== null) {
      this.rentability = args.rentability;
    }
    if (args.nav !== undefined && args.nav !== null) {
      this.nav = args.nav;
    }
    if (args.cash !== undefined && args.cash !== null) {
      this.cash = args.cash;
    }
    if (args.provisions !== undefined && args.provisions !== null) {
      this.provisions = Thrift.copyList(args.provisions, [ttypes.Provision]);
    }
  }
};
Portfolio.prototype = {};
Portfolio.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.positions = [];
        var _rtmp351 = input.readListBegin();
        var _size50 = _rtmp351.size || 0;
        for (var _i52 = 0; _i52 < _size50; ++_i52) {
          var elem53 = null;
          elem53 = new ttypes.Position();
          elem53.read(input);
          this.positions.push(elem53);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.rentability = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.nav = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.cash = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        this.provisions = [];
        var _rtmp355 = input.readListBegin();
        var _size54 = _rtmp355.size || 0;
        for (var _i56 = 0; _i56 < _size54; ++_i56) {
          var elem57 = null;
          elem57 = new ttypes.Provision();
          elem57.read(input);
          this.provisions.push(elem57);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Portfolio.prototype.write = function(output) {
  output.writeStructBegin('Portfolio');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I64, 1);
    output.writeI64(this.date);
    output.writeFieldEnd();
  }
  if (this.positions !== null && this.positions !== undefined) {
    output.writeFieldBegin('positions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.positions.length);
    for (var iter58 in this.positions) {
      if (this.positions.hasOwnProperty(iter58)) {
        iter58 = this.positions[iter58];
        iter58.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.rentability !== null && this.rentability !== undefined) {
    output.writeFieldBegin('rentability', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.rentability);
    output.writeFieldEnd();
  }
  if (this.nav !== null && this.nav !== undefined) {
    output.writeFieldBegin('nav', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.nav);
    output.writeFieldEnd();
  }
  if (this.cash !== null && this.cash !== undefined) {
    output.writeFieldBegin('cash', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.cash);
    output.writeFieldEnd();
  }
  if (this.provisions !== null && this.provisions !== undefined) {
    output.writeFieldBegin('provisions', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.provisions.length);
    for (var iter59 in this.provisions) {
      if (this.provisions.hasOwnProperty(iter59)) {
        iter59 = this.provisions[iter59];
        iter59.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AnalyzerConfig = module.exports.AnalyzerConfig = function(args) {
  this.id = null;
  this.name = null;
  this.result_type = null;
  this.accepted_events = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.result_type !== undefined && args.result_type !== null) {
      this.result_type = args.result_type;
    }
    if (args.accepted_events !== undefined && args.accepted_events !== null) {
      this.accepted_events = Thrift.copyList(args.accepted_events, [null]);
    }
  }
};
AnalyzerConfig.prototype = {};
AnalyzerConfig.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.result_type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.SET) {
        this.accepted_events = [];
        var _rtmp361 = input.readSetBegin();
        var _size60 = _rtmp361.size || 0;
        for (var _i62 = 0; _i62 < _size60; ++_i62) {
          var elem63 = null;
          elem63 = input.readI32();
          this.accepted_events.push(elem63);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AnalyzerConfig.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerConfig');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.result_type !== null && this.result_type !== undefined) {
    output.writeFieldBegin('result_type', Thrift.Type.I32, 3);
    output.writeI32(this.result_type);
    output.writeFieldEnd();
  }
  if (this.accepted_events !== null && this.accepted_events !== undefined) {
    output.writeFieldBegin('accepted_events', Thrift.Type.SET, 4);
    output.writeSetBegin(Thrift.Type.I32, this.accepted_events.length);
    for (var iter64 in this.accepted_events) {
      if (this.accepted_events.hasOwnProperty(iter64)) {
        iter64 = this.accepted_events[iter64];
        output.writeI32(iter64);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CashFlow = module.exports.CashFlow = function(args) {
  this.date = null;
  this.value = null;
  this.balance = null;
  this.type = null;
  if (args) {
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = args.balance;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
CashFlow.prototype = {};
CashFlow.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.value = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.balance = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CashFlow.prototype.write = function(output) {
  output.writeStructBegin('CashFlow');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I64, 1);
    output.writeI64(this.date);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.value);
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.balance);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 4);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


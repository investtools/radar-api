//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var ttypes = module.exports = {};
var AuthenticationError = module.exports.AuthenticationError = function(args) {
  Thrift.TException.call(this, "AuthenticationError");
  this.name = "AuthenticationError";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(AuthenticationError, Thrift.TException);
AuthenticationError.prototype.name = 'AuthenticationError';
AuthenticationError.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AuthenticationError.prototype.write = function(output) {
  output.writeStructBegin('AuthenticationError');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SystemUnavailableError = module.exports.SystemUnavailableError = function(args) {
  Thrift.TException.call(this, "SystemUnavailableError");
  this.name = "SystemUnavailableError";
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(SystemUnavailableError, Thrift.TException);
SystemUnavailableError.prototype.name = 'SystemUnavailableError';
SystemUnavailableError.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SystemUnavailableError.prototype.write = function(output) {
  output.writeStructBegin('SystemUnavailableError');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FetchedPortfolio = module.exports.FetchedPortfolio = function(args) {
  this.date = null;
  this.portfolio = null;
  if (args) {
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
    if (args.portfolio !== undefined && args.portfolio !== null) {
      this.portfolio = Thrift.copyMap(args.portfolio, [null]);
    }
  }
};
FetchedPortfolio.prototype = {};
FetchedPortfolio.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.portfolio = {};
        var _rtmp31 = input.readMapBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var key3 = null;
          var val4 = null;
          key3 = new common_ttypes.SecurityId();
          key3.read(input);
          val4 = input.readI32();
          this.portfolio[key3] = val4;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FetchedPortfolio.prototype.write = function(output) {
  output.writeStructBegin('FetchedPortfolio');
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I64, 1);
    output.writeI64(this.date);
    output.writeFieldEnd();
  }
  if (this.portfolio !== null && this.portfolio !== undefined) {
    output.writeFieldBegin('portfolio', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.I32, Thrift.objectLength(this.portfolio));
    for (var kiter5 in this.portfolio) {
      if (this.portfolio.hasOwnProperty(kiter5)) {
        var viter6 = this.portfolio[kiter5];
        kiter5.write(output);
        output.writeI32(viter6);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


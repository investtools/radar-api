//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./radar_types');
//HELPER FUNCTIONS AND STRUCTURES

Radar.API.AnalyzerController_analyzers_args = function(args) {
};
Radar.API.AnalyzerController_analyzers_args.prototype = {};
Radar.API.AnalyzerController_analyzers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_analyzers_args.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_analyzers_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_analyzers_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Radar.API.AnalyzerController_analyzers_result.prototype = {};
Radar.API.AnalyzerController_analyzers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.success = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = new ttypes.AnalyzerConfig();
          elem134.read(input);
          this.success.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_analyzers_result.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_analyzers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter135 in this.success)
    {
      if (this.success.hasOwnProperty(iter135))
      {
        iter135 = this.success[iter135];
        iter135.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_on_each_day_args = function(args) {
  this.sessionid = null;
  this.portfolio = null;
  if (args) {
    if (args.sessionid !== undefined) {
      this.sessionid = args.sessionid;
    }
    if (args.portfolio !== undefined) {
      this.portfolio = args.portfolio;
    }
  }
};
Radar.API.AnalyzerController_on_each_day_args.prototype = {};
Radar.API.AnalyzerController_on_each_day_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.sessionid = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.portfolio = new ttypes.Portfolio();
        this.portfolio.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_on_each_day_args.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_on_each_day_args');
  if (this.sessionid !== null && this.sessionid !== undefined) {
    output.writeFieldBegin('sessionid', Thrift.Type.I16, 1);
    output.writeI16(this.sessionid);
    output.writeFieldEnd();
  }
  if (this.portfolio !== null && this.portfolio !== undefined) {
    output.writeFieldBegin('portfolio', Thrift.Type.STRUCT, 2);
    this.portfolio.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_on_each_day_result = function(args) {
};
Radar.API.AnalyzerController_on_each_day_result.prototype = {};
Radar.API.AnalyzerController_on_each_day_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_on_each_day_result.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_on_each_day_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_on_each_month_args = function(args) {
  this.sessionid = null;
  this.portfolio = null;
  if (args) {
    if (args.sessionid !== undefined) {
      this.sessionid = args.sessionid;
    }
    if (args.portfolio !== undefined) {
      this.portfolio = args.portfolio;
    }
  }
};
Radar.API.AnalyzerController_on_each_month_args.prototype = {};
Radar.API.AnalyzerController_on_each_month_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.sessionid = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.portfolio = new ttypes.Portfolio();
        this.portfolio.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_on_each_month_args.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_on_each_month_args');
  if (this.sessionid !== null && this.sessionid !== undefined) {
    output.writeFieldBegin('sessionid', Thrift.Type.I16, 1);
    output.writeI16(this.sessionid);
    output.writeFieldEnd();
  }
  if (this.portfolio !== null && this.portfolio !== undefined) {
    output.writeFieldBegin('portfolio', Thrift.Type.STRUCT, 2);
    this.portfolio.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_on_each_month_result = function(args) {
};
Radar.API.AnalyzerController_on_each_month_result.prototype = {};
Radar.API.AnalyzerController_on_each_month_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_on_each_month_result.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_on_each_month_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_on_finish_args = function(args) {
  this.session_id = null;
  this.portfolio = null;
  if (args) {
    if (args.session_id !== undefined) {
      this.session_id = args.session_id;
    }
    if (args.portfolio !== undefined) {
      this.portfolio = args.portfolio;
    }
  }
};
Radar.API.AnalyzerController_on_finish_args.prototype = {};
Radar.API.AnalyzerController_on_finish_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.session_id = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.portfolio = new ttypes.Portfolio();
        this.portfolio.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_on_finish_args.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_on_finish_args');
  if (this.session_id !== null && this.session_id !== undefined) {
    output.writeFieldBegin('session_id', Thrift.Type.I16, 1);
    output.writeI16(this.session_id);
    output.writeFieldEnd();
  }
  if (this.portfolio !== null && this.portfolio !== undefined) {
    output.writeFieldBegin('portfolio', Thrift.Type.STRUCT, 2);
    this.portfolio.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_on_finish_result = function(args) {
};
Radar.API.AnalyzerController_on_finish_result.prototype = {};
Radar.API.AnalyzerController_on_finish_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_on_finish_result.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_on_finish_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_on_cash_flow_args = function(args) {
  this.session_id = null;
  this.cash_flow = null;
  if (args) {
    if (args.session_id !== undefined) {
      this.session_id = args.session_id;
    }
    if (args.cash_flow !== undefined) {
      this.cash_flow = args.cash_flow;
    }
  }
};
Radar.API.AnalyzerController_on_cash_flow_args.prototype = {};
Radar.API.AnalyzerController_on_cash_flow_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.session_id = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.cash_flow = new ttypes.CashFlow();
        this.cash_flow.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_on_cash_flow_args.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_on_cash_flow_args');
  if (this.session_id !== null && this.session_id !== undefined) {
    output.writeFieldBegin('session_id', Thrift.Type.I16, 1);
    output.writeI16(this.session_id);
    output.writeFieldEnd();
  }
  if (this.cash_flow !== null && this.cash_flow !== undefined) {
    output.writeFieldBegin('cash_flow', Thrift.Type.STRUCT, 2);
    this.cash_flow.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_on_cash_flow_result = function(args) {
};
Radar.API.AnalyzerController_on_cash_flow_result.prototype = {};
Radar.API.AnalyzerController_on_cash_flow_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_on_cash_flow_result.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_on_cash_flow_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_create_session_args = function(args) {
  this.session_id = null;
  this.analyzer_id = null;
  if (args) {
    if (args.session_id !== undefined) {
      this.session_id = args.session_id;
    }
    if (args.analyzer_id !== undefined) {
      this.analyzer_id = args.analyzer_id;
    }
  }
};
Radar.API.AnalyzerController_create_session_args.prototype = {};
Radar.API.AnalyzerController_create_session_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.session_id = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.analyzer_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_create_session_args.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_create_session_args');
  if (this.session_id !== null && this.session_id !== undefined) {
    output.writeFieldBegin('session_id', Thrift.Type.I16, 1);
    output.writeI16(this.session_id);
    output.writeFieldEnd();
  }
  if (this.analyzer_id !== null && this.analyzer_id !== undefined) {
    output.writeFieldBegin('analyzer_id', Thrift.Type.STRING, 2);
    output.writeString(this.analyzer_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_create_session_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Radar.API.AnalyzerController_create_session_result.prototype = {};
Radar.API.AnalyzerController_create_session_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AnalyzerConfig();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_create_session_result.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_create_session_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_dump_args = function(args) {
  this.session_id = null;
  if (args) {
    if (args.session_id !== undefined) {
      this.session_id = args.session_id;
    }
  }
};
Radar.API.AnalyzerController_dump_args.prototype = {};
Radar.API.AnalyzerController_dump_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.session_id = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_dump_args.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_dump_args');
  if (this.session_id !== null && this.session_id !== undefined) {
    output.writeFieldBegin('session_id', Thrift.Type.I16, 1);
    output.writeI16(this.session_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_dump_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Radar.API.AnalyzerController_dump_result.prototype = {};
Radar.API.AnalyzerController_dump_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_dump_result.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_dump_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_resume_args = function(args) {
  this.session_id = null;
  this.data = null;
  if (args) {
    if (args.session_id !== undefined) {
      this.session_id = args.session_id;
    }
    if (args.data !== undefined) {
      this.data = args.data;
    }
  }
};
Radar.API.AnalyzerController_resume_args.prototype = {};
Radar.API.AnalyzerController_resume_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.session_id = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_resume_args.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_resume_args');
  if (this.session_id !== null && this.session_id !== undefined) {
    output.writeFieldBegin('session_id', Thrift.Type.I16, 1);
    output.writeI16(this.session_id);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 2);
    output.writeBinary(this.data);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_resume_result = function(args) {
};
Radar.API.AnalyzerController_resume_result.prototype = {};
Radar.API.AnalyzerController_resume_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_resume_result.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_resume_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_result_args = function(args) {
  this.session_id = null;
  if (args) {
    if (args.session_id !== undefined) {
      this.session_id = args.session_id;
    }
  }
};
Radar.API.AnalyzerController_result_args.prototype = {};
Radar.API.AnalyzerController_result_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.session_id = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_result_args.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_result_args');
  if (this.session_id !== null && this.session_id !== undefined) {
    output.writeFieldBegin('session_id', Thrift.Type.I16, 1);
    output.writeI16(this.session_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_result_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Radar.API.AnalyzerController_result_result.prototype = {};
Radar.API.AnalyzerController_result_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_result_result.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_result_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_example_result_args = function(args) {
  this.session_id = null;
  if (args) {
    if (args.session_id !== undefined) {
      this.session_id = args.session_id;
    }
  }
};
Radar.API.AnalyzerController_example_result_args.prototype = {};
Radar.API.AnalyzerController_example_result_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.session_id = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_example_result_args.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_example_result_args');
  if (this.session_id !== null && this.session_id !== undefined) {
    output.writeFieldBegin('session_id', Thrift.Type.I16, 1);
    output.writeI16(this.session_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_example_result_result = function(args) {
};
Radar.API.AnalyzerController_example_result_result.prototype = {};
Radar.API.AnalyzerController_example_result_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_example_result_result.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_example_result_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_destroy_session_args = function(args) {
  this.session_id = null;
  if (args) {
    if (args.session_id !== undefined) {
      this.session_id = args.session_id;
    }
  }
};
Radar.API.AnalyzerController_destroy_session_args.prototype = {};
Radar.API.AnalyzerController_destroy_session_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.session_id = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_destroy_session_args.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_destroy_session_args');
  if (this.session_id !== null && this.session_id !== undefined) {
    output.writeFieldBegin('session_id', Thrift.Type.I16, 1);
    output.writeI16(this.session_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerController_destroy_session_result = function(args) {
};
Radar.API.AnalyzerController_destroy_session_result.prototype = {};
Radar.API.AnalyzerController_destroy_session_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.AnalyzerController_destroy_session_result.prototype.write = function(output) {
  output.writeStructBegin('AnalyzerController_destroy_session_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.AnalyzerControllerClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Radar.API.AnalyzerControllerClient.prototype = {};
Radar.API.AnalyzerControllerClient.prototype.seqid = function() { return this._seqid; }
Radar.API.AnalyzerControllerClient.prototype.new_seqid = function() { return this._seqid += 1; }
Radar.API.AnalyzerControllerClient.prototype.analyzers = function(callback) {
  this._seqid = this.new_seqid();
  this._reqs[this.seqid()] = callback;
  this.send_analyzers();
};

Radar.API.AnalyzerControllerClient.prototype.send_analyzers = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('analyzers', Thrift.MessageType.CALL, this.seqid());
  var args = new Radar.API.AnalyzerController_analyzers_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

Radar.API.AnalyzerControllerClient.prototype.recv_analyzers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Radar.API.AnalyzerController_analyzers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('analyzers failed: unknown result');
};
Radar.API.AnalyzerControllerClient.prototype.on_each_day = function(sessionid, portfolio, callback) {
  this._seqid = this.new_seqid();
  this._reqs[this.seqid()] = callback;
  this.send_on_each_day(sessionid, portfolio);
};

Radar.API.AnalyzerControllerClient.prototype.send_on_each_day = function(sessionid, portfolio) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('on_each_day', Thrift.MessageType.CALL, this.seqid());
  var args = new Radar.API.AnalyzerController_on_each_day_args();
  args.sessionid = sessionid;
  args.portfolio = portfolio;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
Radar.API.AnalyzerControllerClient.prototype.on_each_month = function(sessionid, portfolio, callback) {
  this._seqid = this.new_seqid();
  this._reqs[this.seqid()] = callback;
  this.send_on_each_month(sessionid, portfolio);
};

Radar.API.AnalyzerControllerClient.prototype.send_on_each_month = function(sessionid, portfolio) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('on_each_month', Thrift.MessageType.CALL, this.seqid());
  var args = new Radar.API.AnalyzerController_on_each_month_args();
  args.sessionid = sessionid;
  args.portfolio = portfolio;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
Radar.API.AnalyzerControllerClient.prototype.on_finish = function(session_id, portfolio, callback) {
  this._seqid = this.new_seqid();
  this._reqs[this.seqid()] = callback;
  this.send_on_finish(session_id, portfolio);
};

Radar.API.AnalyzerControllerClient.prototype.send_on_finish = function(session_id, portfolio) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('on_finish', Thrift.MessageType.CALL, this.seqid());
  var args = new Radar.API.AnalyzerController_on_finish_args();
  args.session_id = session_id;
  args.portfolio = portfolio;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
Radar.API.AnalyzerControllerClient.prototype.on_cash_flow = function(session_id, cash_flow, callback) {
  this._seqid = this.new_seqid();
  this._reqs[this.seqid()] = callback;
  this.send_on_cash_flow(session_id, cash_flow);
};

Radar.API.AnalyzerControllerClient.prototype.send_on_cash_flow = function(session_id, cash_flow) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('on_cash_flow', Thrift.MessageType.CALL, this.seqid());
  var args = new Radar.API.AnalyzerController_on_cash_flow_args();
  args.session_id = session_id;
  args.cash_flow = cash_flow;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
Radar.API.AnalyzerControllerClient.prototype.create_session = function(session_id, analyzer_id, callback) {
  this._seqid = this.new_seqid();
  this._reqs[this.seqid()] = callback;
  this.send_create_session(session_id, analyzer_id);
};

Radar.API.AnalyzerControllerClient.prototype.send_create_session = function(session_id, analyzer_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_session', Thrift.MessageType.CALL, this.seqid());
  var args = new Radar.API.AnalyzerController_create_session_args();
  args.session_id = session_id;
  args.analyzer_id = analyzer_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

Radar.API.AnalyzerControllerClient.prototype.recv_create_session = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Radar.API.AnalyzerController_create_session_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_session failed: unknown result');
};
Radar.API.AnalyzerControllerClient.prototype.dump = function(session_id, callback) {
  this._seqid = this.new_seqid();
  this._reqs[this.seqid()] = callback;
  this.send_dump(session_id);
};

Radar.API.AnalyzerControllerClient.prototype.send_dump = function(session_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('dump', Thrift.MessageType.CALL, this.seqid());
  var args = new Radar.API.AnalyzerController_dump_args();
  args.session_id = session_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

Radar.API.AnalyzerControllerClient.prototype.recv_dump = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Radar.API.AnalyzerController_dump_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('dump failed: unknown result');
};
Radar.API.AnalyzerControllerClient.prototype.resume = function(session_id, data, callback) {
  this._seqid = this.new_seqid();
  this._reqs[this.seqid()] = callback;
  this.send_resume(session_id, data);
};

Radar.API.AnalyzerControllerClient.prototype.send_resume = function(session_id, data) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('resume', Thrift.MessageType.CALL, this.seqid());
  var args = new Radar.API.AnalyzerController_resume_args();
  args.session_id = session_id;
  args.data = data;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
Radar.API.AnalyzerControllerClient.prototype.result = function(session_id, callback) {
  this._seqid = this.new_seqid();
  this._reqs[this.seqid()] = callback;
  this.send_result(session_id);
};

Radar.API.AnalyzerControllerClient.prototype.send_result = function(session_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('result', Thrift.MessageType.CALL, this.seqid());
  var args = new Radar.API.AnalyzerController_result_args();
  args.session_id = session_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

Radar.API.AnalyzerControllerClient.prototype.recv_result = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Radar.API.AnalyzerController_result_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('result failed: unknown result');
};
Radar.API.AnalyzerControllerClient.prototype.example_result = function(session_id, callback) {
  this._seqid = this.new_seqid();
  this._reqs[this.seqid()] = callback;
  this.send_example_result(session_id);
};

Radar.API.AnalyzerControllerClient.prototype.send_example_result = function(session_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('example_result', Thrift.MessageType.CALL, this.seqid());
  var args = new Radar.API.AnalyzerController_example_result_args();
  args.session_id = session_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

Radar.API.AnalyzerControllerClient.prototype.recv_example_result = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Radar.API.AnalyzerController_example_result_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
Radar.API.AnalyzerControllerClient.prototype.destroy_session = function(session_id, callback) {
  this._seqid = this.new_seqid();
  this._reqs[this.seqid()] = callback;
  this.send_destroy_session(session_id);
};

Radar.API.AnalyzerControllerClient.prototype.send_destroy_session = function(session_id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('destroy_session', Thrift.MessageType.CALL, this.seqid());
  var args = new Radar.API.AnalyzerController_destroy_session_args();
  args.session_id = session_id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};
Radar.API.AnalyzerControllerProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
Radar.API.AnalyzerControllerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

Radar.API.AnalyzerControllerProcessor.prototype.process_analyzers = function(seqid, input, output) {
  var args = new Radar.API.AnalyzerController_analyzers_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.analyzers(function (err, result) {
    var result = new Radar.API.AnalyzerController_analyzers_result((err != null ? err : {success: result}));
    output.writeMessageBegin("analyzers", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

Radar.API.AnalyzerControllerProcessor.prototype.process_on_each_day = function(seqid, input, output) {
  var args = new Radar.API.AnalyzerController_on_each_day_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.on_each_day(args.sessionid, args.portfolio)
}

Radar.API.AnalyzerControllerProcessor.prototype.process_on_each_month = function(seqid, input, output) {
  var args = new Radar.API.AnalyzerController_on_each_month_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.on_each_month(args.sessionid, args.portfolio)
}

Radar.API.AnalyzerControllerProcessor.prototype.process_on_finish = function(seqid, input, output) {
  var args = new Radar.API.AnalyzerController_on_finish_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.on_finish(args.session_id, args.portfolio)
}

Radar.API.AnalyzerControllerProcessor.prototype.process_on_cash_flow = function(seqid, input, output) {
  var args = new Radar.API.AnalyzerController_on_cash_flow_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.on_cash_flow(args.session_id, args.cash_flow)
}

Radar.API.AnalyzerControllerProcessor.prototype.process_create_session = function(seqid, input, output) {
  var args = new Radar.API.AnalyzerController_create_session_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.create_session(args.session_id, args.analyzer_id, function (err, result) {
    var result = new Radar.API.AnalyzerController_create_session_result((err != null ? err : {success: result}));
    output.writeMessageBegin("create_session", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

Radar.API.AnalyzerControllerProcessor.prototype.process_dump = function(seqid, input, output) {
  var args = new Radar.API.AnalyzerController_dump_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.dump(args.session_id, function (err, result) {
    var result = new Radar.API.AnalyzerController_dump_result((err != null ? err : {success: result}));
    output.writeMessageBegin("dump", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

Radar.API.AnalyzerControllerProcessor.prototype.process_resume = function(seqid, input, output) {
  var args = new Radar.API.AnalyzerController_resume_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.resume(args.session_id, args.data)
}

Radar.API.AnalyzerControllerProcessor.prototype.process_result = function(seqid, input, output) {
  var args = new Radar.API.AnalyzerController_result_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.result(args.session_id, function (err, result) {
    var result = new Radar.API.AnalyzerController_result_result((err != null ? err : {success: result}));
    output.writeMessageBegin("result", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

Radar.API.AnalyzerControllerProcessor.prototype.process_example_result = function(seqid, input, output) {
  var args = new Radar.API.AnalyzerController_example_result_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.example_result(args.session_id, function (err, result) {
    var result = new Radar.API.AnalyzerController_example_result_result((err != null ? err : {success: result}));
    output.writeMessageBegin("example_result", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

Radar.API.AnalyzerControllerProcessor.prototype.process_destroy_session = function(seqid, input, output) {
  var args = new Radar.API.AnalyzerController_destroy_session_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.destroy_session(args.session_id)
}


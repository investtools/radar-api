//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./radar_types');
//HELPER FUNCTIONS AND STRUCTURES

Radar.API.IndexService_prices_args = function(args) {
  this.symbol = null;
  this.start_date = null;
  this.end_date = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
    if (args.start_date !== undefined) {
      this.start_date = args.start_date;
    }
    if (args.end_date !== undefined) {
      this.end_date = args.end_date;
    }
  }
};
Radar.API.IndexService_prices_args.prototype = {};
Radar.API.IndexService_prices_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.start_date = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.end_date = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.IndexService_prices_args.prototype.write = function(output) {
  output.writeStructBegin('IndexService_prices_args');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  if (this.start_date !== null && this.start_date !== undefined) {
    output.writeFieldBegin('start_date', Thrift.Type.I32, 2);
    output.writeI32(this.start_date);
    output.writeFieldEnd();
  }
  if (this.end_date !== null && this.end_date !== undefined) {
    output.writeFieldBegin('end_date', Thrift.Type.I32, 3);
    output.writeI32(this.end_date);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.IndexService_prices_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Radar.API.IndexService_prices_result.prototype = {};
Radar.API.IndexService_prices_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.success = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new ttypes.Price();
          elem126.read(input);
          this.success.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.IndexService_prices_result.prototype.write = function(output) {
  output.writeStructBegin('IndexService_prices_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter127 in this.success)
    {
      if (this.success.hasOwnProperty(iter127))
      {
        iter127 = this.success[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.IndexService_price_args = function(args) {
  this.symbol = null;
  this.date = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
    if (args.date !== undefined) {
      this.date = args.date;
    }
  }
};
Radar.API.IndexService_price_args.prototype = {};
Radar.API.IndexService_price_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.date = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.IndexService_price_args.prototype.write = function(output) {
  output.writeStructBegin('IndexService_price_args');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.I32, 2);
    output.writeI32(this.date);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.IndexService_price_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Radar.API.IndexService_price_result.prototype = {};
Radar.API.IndexService_price_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.DOUBLE) {
        this.success = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.IndexService_price_result.prototype.write = function(output) {
  output.writeStructBegin('IndexService_price_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.DOUBLE, 0);
    output.writeDouble(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.IndexService_price_change_args = function(args) {
  this.symbol = null;
  this.start_date = null;
  this.end_date = null;
  if (args) {
    if (args.symbol !== undefined) {
      this.symbol = args.symbol;
    }
    if (args.start_date !== undefined) {
      this.start_date = args.start_date;
    }
    if (args.end_date !== undefined) {
      this.end_date = args.end_date;
    }
  }
};
Radar.API.IndexService_price_change_args.prototype = {};
Radar.API.IndexService_price_change_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.symbol = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.start_date = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.end_date = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.IndexService_price_change_args.prototype.write = function(output) {
  output.writeStructBegin('IndexService_price_change_args');
  if (this.symbol !== null && this.symbol !== undefined) {
    output.writeFieldBegin('symbol', Thrift.Type.STRING, 1);
    output.writeString(this.symbol);
    output.writeFieldEnd();
  }
  if (this.start_date !== null && this.start_date !== undefined) {
    output.writeFieldBegin('start_date', Thrift.Type.I32, 2);
    output.writeI32(this.start_date);
    output.writeFieldEnd();
  }
  if (this.end_date !== null && this.end_date !== undefined) {
    output.writeFieldBegin('end_date', Thrift.Type.I32, 3);
    output.writeI32(this.end_date);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.IndexService_price_change_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
Radar.API.IndexService_price_change_result.prototype = {};
Radar.API.IndexService_price_change_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.DOUBLE) {
        this.success = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Radar.API.IndexService_price_change_result.prototype.write = function(output) {
  output.writeStructBegin('IndexService_price_change_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.DOUBLE, 0);
    output.writeDouble(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Radar.API.IndexServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Radar.API.IndexServiceClient.prototype = {};
Radar.API.IndexServiceClient.prototype.seqid = function() { return this._seqid; }
Radar.API.IndexServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
Radar.API.IndexServiceClient.prototype.prices = function(symbol, start_date, end_date, callback) {
  this._seqid = this.new_seqid();
  this._reqs[this.seqid()] = callback;
  this.send_prices(symbol, start_date, end_date);
};

Radar.API.IndexServiceClient.prototype.send_prices = function(symbol, start_date, end_date) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('prices', Thrift.MessageType.CALL, this.seqid());
  var args = new Radar.API.IndexService_prices_args();
  args.symbol = symbol;
  args.start_date = start_date;
  args.end_date = end_date;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

Radar.API.IndexServiceClient.prototype.recv_prices = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Radar.API.IndexService_prices_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('prices failed: unknown result');
};
Radar.API.IndexServiceClient.prototype.price = function(symbol, date, callback) {
  this._seqid = this.new_seqid();
  this._reqs[this.seqid()] = callback;
  this.send_price(symbol, date);
};

Radar.API.IndexServiceClient.prototype.send_price = function(symbol, date) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('price', Thrift.MessageType.CALL, this.seqid());
  var args = new Radar.API.IndexService_price_args();
  args.symbol = symbol;
  args.date = date;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

Radar.API.IndexServiceClient.prototype.recv_price = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Radar.API.IndexService_price_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('price failed: unknown result');
};
Radar.API.IndexServiceClient.prototype.price_change = function(symbol, start_date, end_date, callback) {
  this._seqid = this.new_seqid();
  this._reqs[this.seqid()] = callback;
  this.send_price_change(symbol, start_date, end_date);
};

Radar.API.IndexServiceClient.prototype.send_price_change = function(symbol, start_date, end_date) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('price_change', Thrift.MessageType.CALL, this.seqid());
  var args = new Radar.API.IndexService_price_change_args();
  args.symbol = symbol;
  args.start_date = start_date;
  args.end_date = end_date;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

Radar.API.IndexServiceClient.prototype.recv_price_change = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new Radar.API.IndexService_price_change_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('price_change failed: unknown result');
};
Radar.API.IndexServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
Radar.API.IndexServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

Radar.API.IndexServiceProcessor.prototype.process_prices = function(seqid, input, output) {
  var args = new Radar.API.IndexService_prices_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.prices(args.symbol, args.start_date, args.end_date, function (err, result) {
    var result = new Radar.API.IndexService_prices_result((err != null ? err : {success: result}));
    output.writeMessageBegin("prices", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

Radar.API.IndexServiceProcessor.prototype.process_price = function(seqid, input, output) {
  var args = new Radar.API.IndexService_price_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.price(args.symbol, args.date, function (err, result) {
    var result = new Radar.API.IndexService_price_result((err != null ? err : {success: result}));
    output.writeMessageBegin("price", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

Radar.API.IndexServiceProcessor.prototype.process_price_change = function(seqid, input, output) {
  var args = new Radar.API.IndexService_price_change_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.price_change(args.symbol, args.start_date, args.end_date, function (err, result) {
    var result = new Radar.API.IndexService_price_change_result((err != null ? err : {success: result}));
    output.writeMessageBegin("price_change", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}


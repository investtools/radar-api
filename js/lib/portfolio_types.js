//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var ttypes = module.exports = {};
var Security = module.exports.Security = function(args) {
  this.account = null;
  this.stock = null;
  this.shares = null;
  if (args) {
    if (args.account !== undefined && args.account !== null) {
      this.account = args.account;
    }
    if (args.stock !== undefined && args.stock !== null) {
      this.stock = new common_ttypes.StockId(args.stock);
    }
    if (args.shares !== undefined && args.shares !== null) {
      this.shares = args.shares;
    }
  }
};
Security.prototype = {};
Security.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stock = new common_ttypes.StockId();
        this.stock.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.shares = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Security.prototype.write = function(output) {
  output.writeStructBegin('Security');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.stock !== null && this.stock !== undefined) {
    output.writeFieldBegin('stock', Thrift.Type.STRUCT, 2);
    this.stock.write(output);
    output.writeFieldEnd();
  }
  if (this.shares !== null && this.shares !== undefined) {
    output.writeFieldBegin('shares', Thrift.Type.I32, 3);
    output.writeI32(this.shares);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Lending = module.exports.Lending = function(args) {
  this.account = null;
  this.stock = null;
  this.shares = null;
  if (args) {
    if (args.account !== undefined && args.account !== null) {
      this.account = args.account;
    }
    if (args.stock !== undefined && args.stock !== null) {
      this.stock = new common_ttypes.StockId(args.stock);
    }
    if (args.shares !== undefined && args.shares !== null) {
      this.shares = args.shares;
    }
  }
};
Lending.prototype = {};
Lending.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stock = new common_ttypes.StockId();
        this.stock.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.shares = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Lending.prototype.write = function(output) {
  output.writeStructBegin('Lending');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.stock !== null && this.stock !== undefined) {
    output.writeFieldBegin('stock', Thrift.Type.STRUCT, 2);
    this.stock.write(output);
    output.writeFieldEnd();
  }
  if (this.shares !== null && this.shares !== undefined) {
    output.writeFieldBegin('shares', Thrift.Type.I32, 3);
    output.writeI32(this.shares);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Borrowing = module.exports.Borrowing = function(args) {
  this.account = null;
  this.stock = null;
  this.shares = null;
  if (args) {
    if (args.account !== undefined && args.account !== null) {
      this.account = args.account;
    }
    if (args.stock !== undefined && args.stock !== null) {
      this.stock = new common_ttypes.StockId(args.stock);
    }
    if (args.shares !== undefined && args.shares !== null) {
      this.shares = args.shares;
    }
  }
};
Borrowing.prototype = {};
Borrowing.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.account = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.stock = new common_ttypes.StockId();
        this.stock.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.shares = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Borrowing.prototype.write = function(output) {
  output.writeStructBegin('Borrowing');
  if (this.account !== null && this.account !== undefined) {
    output.writeFieldBegin('account', Thrift.Type.STRING, 1);
    output.writeString(this.account);
    output.writeFieldEnd();
  }
  if (this.stock !== null && this.stock !== undefined) {
    output.writeFieldBegin('stock', Thrift.Type.STRUCT, 2);
    this.stock.write(output);
    output.writeFieldEnd();
  }
  if (this.shares !== null && this.shares !== undefined) {
    output.writeFieldBegin('shares', Thrift.Type.I32, 3);
    output.writeI32(this.shares);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SimplePosition = module.exports.SimplePosition = function(args) {
  this.security = null;
  this.lending = null;
  this.borrowing = null;
  if (args) {
    if (args.security !== undefined && args.security !== null) {
      this.security = new ttypes.Security(args.security);
    }
    if (args.lending !== undefined && args.lending !== null) {
      this.lending = new ttypes.Lending(args.lending);
    }
    if (args.borrowing !== undefined && args.borrowing !== null) {
      this.borrowing = new ttypes.Borrowing(args.borrowing);
    }
  }
};
SimplePosition.prototype = {};
SimplePosition.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.security = new ttypes.Security();
        this.security.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.lending = new ttypes.Lending();
        this.lending.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.borrowing = new ttypes.Borrowing();
        this.borrowing.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimplePosition.prototype.write = function(output) {
  output.writeStructBegin('SimplePosition');
  if (this.security !== null && this.security !== undefined) {
    output.writeFieldBegin('security', Thrift.Type.STRUCT, 1);
    this.security.write(output);
    output.writeFieldEnd();
  }
  if (this.lending !== null && this.lending !== undefined) {
    output.writeFieldBegin('lending', Thrift.Type.STRUCT, 2);
    this.lending.write(output);
    output.writeFieldEnd();
  }
  if (this.borrowing !== null && this.borrowing !== undefined) {
    output.writeFieldBegin('borrowing', Thrift.Type.STRUCT, 3);
    this.borrowing.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

